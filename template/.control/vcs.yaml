repo:
  homepage: ${{ web.url.home }}$
  topics: |
    #{{
      return [
        slugify(keyword) for keyword in get("keywords", []) if len(keyword) <= 50
      ][:20]
    }}#
  secret_scanning: true
  secret_scanning_push_protection: true
  vulnerability_alerts: true
  automated_security_fixes: true
  private_vulnerability_reporting: true
  has_discussions: true
  has_projects: false
  has_wiki: false
  allow_merge_commit: false
  allow_rebase_merge: true
  allow_auto_merge: false
  delete_branch_on_merge: false
  allow_update_branch: true
  archived: false
branch:
  main:
    name: main
    ruleset:
      protect_creation: true
      protect_modification:
        allow_fetch_and_merge: true
      protect_deletion: true
      protect_force_push: true
      require_linear_history: true
      require_signatures: true
      require_pull_request:
        dismiss_stale_reviews_on_push: true
        require_code_owner_review: true
        require_last_push_approval: true
        require_review_thread_resolution: true
        required_approving_review_count: 1
  release:
    name: release/v
    ruleset: ${{ branch.main.ruleset }}$
  pre:
    name: prerelease/v
    ruleset: ${{ branch.main.ruleset }}$
  dev:
    name: dev/
    ruleset:
      protect_creation: true
      protect_deletion: true
      protect_force_push: true
      require_linear_history: true
  auto:
    name: auto-update/
    ruleset: ${{ branch.dev.ruleset }}$
tag:
  version:
    prefix: ver/
file:
  duplicate:
    license_texts:
      sources: |
        #{{
          return [
            component["path"]["text_plain"]
            for component in get("license.component", {}).values()
          ]
        }}#
      destinations:
        - ${{ pkg.path.root }}$/${{ __data__.dir_name.licenses }}$
        - ${{ test.path.root }}$/${{ __data__.dir_name.licenses }}$
    copyright_texts:
      sources: |
        #{{
          return [
            component["path"]["header_plain"]
            for component in get("license.component", {}).values()
            if component["path"].get("header_plain")
          ]
        }}#
      destinations:
        - ${{ pkg.path.root }}$/${{ __data__.dir_name.copyrights }}$
        - ${{ test.path.root }}$/${{ __data__.dir_name.copyrights }}$
file_gitattributes:
  name: .gitattributes
  summary: Main [`.gitattributes`](https://git-scm.com/docs/gitattributes) file for the repository.
  description: |
    The `.gitattributes` file defines attributes 
    for files and directories in the repository,
    such as data type (e.g., text or binary), 
    line endings, diff settings, and merge strategies
    to manage how Git handles specific files.
    The data is in plain text, 
    where each line specifies a path or glob pattern and its attributes.
    
    :::{admonition} Learn More: `.gitattributes`
    :class: dropdown seealso

    - https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes
    - https://github.com/alexkaratarakis/gitattributes/blob/master/Common.gitattributes
    - https://github.com/alexkaratarakis/gitattributes/blob/master/Python.gitattributes
    :::
  type: txt
  path: .gitattributes
  content: |-
    #{{
      lines = []
      attributes = get(".config.content", [])
      max_len_pattern = max([len(list(attribute.keys())[0]) for attribute in attributes])
      max_len_attr = max(
          [max(len(attr) for attr in list(attribute.values())[0]) for attribute in attributes]
      )
      for attribute in attributes:
          pattern = list(attribute.keys())[0]
          attrs = list(attribute.values())[0]
          attrs_str = "  ".join(f"{attr: <{max_len_attr}}" for attr in attrs).strip()
          lines.append(f"{pattern: <{max_len_pattern}}    {attrs_str}")
      return "\n".join(lines)
    }}#
  config:
    content:
      # ------------------------------------------ Auto Detect -------------------------------------------
      # Auto-detect text files and perform LF normalization. This will handle all files NOT listed below.
      - "*": [ text=auto ]
      # ------------------------------------------ Explicit ----------------------------------------------
      - ".gitattributes": [ text, export-ignore ]
      - ".gitignore": [ text, export-ignore ]
      - "AUTHORS": [ text ]
      - "CHANGELOG": [ text ]
      - "CHANGES": [ text ]
      - "CODEOWNERS": [ text ]
      - "CONTRIBUTING": [ text ]
      - "COPYING": [ text ]
      - "copyright": [ text ]
      - "*COPYRIGHT*": [ text ]
      - "INSTALL": [ text ]
      - "license": [ text ]
      - "LICENSE*": [ text ]
      - "Makefile": [ text ]
      - "NEWS": [ text ]
      - "readme": [ text ]
      - "*README*": [ text ]
      - "TODO": [ text ]
      - "MANIFEST.in": [ text ]
      - "*.typed": [ text ]
      # ------------------------------------------ Documents ---------------------------------------------
      - "*.bibtex": [ text, diff=bibtex ]
      - "*.doc": [ diff=astextplain ]
      - "*.DOC": [ diff=astextplain ]
      - "*.docx": [ diff=astextplain ]
      - "*.DOCX": [ diff=astextplain ]
      - "*.dot": [ diff=astextplain ]
      - "*.DOT": [ diff=astextplain ]
      - "*.pdf": [ diff=astextplain ]
      - "*.PDF": [ diff=astextplain ]
      - "*.rtf": [ diff=astextplain ]
      - "*.RTF": [ diff=astextplain ]
      - "*.md": [ text, diff=markdown ]
      - "*.mdx": [ text, diff=markdown ]
      - "*.rst": [ text ]
      - "*.tex": [ text, diff=tex ]
      - "*.adoc": [ text ]
      - "*.textile": [ text ]
      - "*.mustache": [ text ]
      - "*.csv": [ text, eol=crlf ]
      - "*.tab": [ text ]
      - "*.tsv": [ text ]
      - "*.txt": [ text ]
      - "*.sql": [ text ]
      - "*.epub": [ diff=astextplain ]
      - "*.css": [ text, diff=css ]
      - "*.htm": [ text, diff=html ]
      - "*.html": [ text, diff=html ]
      # ------------------------------------------ Graphics ----------------------------------------------
      - "*.svg": [ text ]
      - "*.png": [ binary ]
      - "*.jpg": [ binary ]
      - "*.jpeg": [ binary ]
      - "*.gif": [ binary ]
      - "*.tif": [ binary ]
      - "*.tiff": [ binary ]
      - "*.ico": [ binary ]
      - "*.eps": [ binary ]
      # ------------------------------------------ Scripts -----------------------------------------------
      - "*.bash": [ text, eol=lf ]
      - "*.fish": [ text, eol=lf ]
      - "*.sh": [ text, eol=lf ]
      - "*.zsh": [ text, eol=lf ]
      # Below are explicitly windows files and should use crlf
      - "*.bat": [ text, eol=crlf ]
      - "*.cmd": [ text, eol=crlf ]
      - "*.ps1": [ text, eol=crlf ]
      # ------------------------------------------ Serialisation -----------------------------------------
      - "*.json": [ text ]
      - "*.toml": [ text ]
      - "*.xml": [ text ]
      - "*.yaml": [ text ]
      - "*.yml": [ text ]
      # ------------------------------------------ Archives ----------------------------------------------
      - "*.7z": [ binary ]
      - "*.gz": [ binary ]
      - "*.jar": [ binary ]
      - "*.rar": [ binary ]
      - "*.tar": [ binary ]
      - "*.tgz": [ binary ]
      - "*.zip": [ binary ]
      # ------------------------------------------ Preserve EOL ------------------------------------------
      # Text files where line endings should be preserved.
      - "*.patch": [ -text ]
      # ------------------------------------------ Python Source Files -----------------------------------
      - "*.pxd": [ text, diff=python ]
      - "*.py": [ text, diff=python ]
      - "*.py3": [ text, diff=python ]
      - "*.pyw": [ text, diff=python ]
      - "*.pyx": [ text, diff=python ]
      - "*.pyz": [ text, diff=python ]
      - "*.pyi": [ text, diff=python ]
      # ------------------------------------------ Python Binary Files -----------------------------------
      # Note: .db, .p, and .pkl files are associated with the python modules
      # ``pickle``, ``dbm.*``, ``shelve``, ``marshal``, ``anydbm``, and ``bsddb``, among others.
      - "*.db": [ binary ]
      - "*.p": [ binary ]
      - "*.pkl": [ binary ]
      - "*.pickle": [ binary ]
      - "*.pyc": [ binary, export-ignore ]
      - "*.pyo": [ binary, export-ignore ]
      - "*.pyd": [ binary ]
      # ------------------------------------------ Jupyter notebook --------------------------------------
      - "*.ipynb": [ text, eol=lf ]
    jsonschema:
      title: .gitattributes
      description: |
        The data must be an array of objects, as explained below.
      type: array
      uniqueItems: true
      items:
        title: File Attributes
        summary: Attributes for a specific filetype.
        description: |
          This must be a key-value pair, where the key is a path or glob pattern,
          and the value is the attributes to set for the matched files,
          specified as an array of strings.
        type: object
        minProperties: 1
        maxProperties: 1
        additionalProperties:
          title: Attributes
          summary: List of attributes to set for the matched files.
          type: array
          minItems: 1
          uniqueItems: true
          items:
            title: Attribute
            summary: An attribute to set for the matched files.
            type: string
            minLength: 1
file_gitignore:
  name: .gitignore
  summary: Main [`.gitignore`](https://git-scm.com/docs/gitignore) file for the repository.
  description: |
    The `.gitignore` file defines files and directories in the repository 
    to be excluded from version control by Git,
    preventing them from being pushed to the remote repository.
    The data is in plain text, where each line specifies a path or glob pattern to ignore.
    In addition to project-specific files,
    the `.gitignore` file also includes common patterns from relevant 
    [`gitignore` templates](https://github.com/github/gitignore).
  type: txt
  path: .gitignore
  content:
    # Project-specific files
    - ${{ web.path.root }}$/.build/
    - ${{ web.path.source }}$/api/*/**
    - ${{ web.path.source }}$/about/license/*/**
    - ${{ local.cache.path }}$/**
    - '!${{ local.cache.path }}$/**/'
    - '!${{ local.cache.path }}$/**/README.md'
    - ${{ local.report.path }}$/**
    - '!${{ local.report.path }}$/**/'
    - '!${{ local.report.path }}$/**/README.md'
    # Byte-compiled / optimized / DLL files
    - __pycache__/
    - "*.py[cod]"
    - "*$py.class"
    # C extensions
    - "*.so"
    # Distribution / packaging
    - .Python
    - ./build/
    - develop-eggs/
    - dist/
    - downloads/
    - eggs/
    - .eggs/
    - lib/
    - lib64/
    - parts/
    - sdist/
    - var/
    - wheels/
    - share/python-wheels/
    - "*.egg-info/"
    - .installed.cfg
    - "*.egg"
    # PyInstaller
    #  Usually these files are written by a python script from a template
    #  before PyInstaller builds the exe, so as to inject date/other infos into it.
    - "*.manifest"
    - "*.spec"
    # Installer logs
    - pip-log.txt
    - pip-delete-this-directory.txt
    # Unit test / coverage reports
    - htmlcov/
    - .tox/
    - .nox/
    - .coverage
    - .coverage.*
    - .cache
    - nosetests.xml
    - coverage.xml
    - "*.cover"
    - .hypothesis/
    - .pytest_cache
    - cover/
    # Translations
    - "*.mo"
    - "*.pot"
    # Django stuff:
    - "*.log"
    - local_settings.py
    - db.sqlite3
    - db.sqlite3-journal
    # Flask stuff:
    - instance/
    - .webassets-cache
    # Scrapy stuff:
    - .scrapy
    # Sphinx documentation
    - docs/website/_build/
    - docs/website/source/api/_autosummary
    # PyBuilder
    - .pybuilder/
    - target/
    # Jupyter Notebook
    - .ipynb_checkpoints
    # IPython
    - profile_default/
    - ipython_config.py
    # pyenv
    - .python-version
    # Celery stuff
    - celerybeat-schedule
    - celerybeat.pid
    # SageMath parsed files
    - "*.sage.py"
    # Environments
    - .env
    - .venv
    - env/
    - venv/
    - ENV/
    - env.bak/
    - venv.bak/
    # Spyder project settings
    - .spyderproject
    - .spyproject
    # Rope project settings
    - .ropeproject
    # mkdocs documentation
    - /site
    # mypy
    - .mypy_cache/
    - .dmypy.json
    - dmypy.json
    # Pyre type checker
    # There are reports this comes from LLVM profiling, but also Xcode 9.
    - .pyre/
    # pytype static type analyzer
    - .pytype/
    # Cython debug symbols
    - cython_debug/
    # profraw files from LLVM? Unclear exactly what triggers this
    # There are reports this comes from LLVM profiling, but also Xcode 9.
    - "*profraw"
    # In-tree generated files
    - "*/_version.py"
    # VSCode
    - .vscode/
    # PyCharm
    - .idea/
    # MacOS system files
    - .DS_Store
