file_readme:
  name: Repository README
  summary: >-
    GitHub repository [`README`](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes)
    file.
  type: md
  path: README.md
  path_schema:
    description: |
      The file must be named `README` (case-sensitive) and placed either in the
      `.github` directory, the `docs` directory, or the root of the repository,
      and can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
      If more than one of such files are present, the order of precedence is
      `.github`, then root, and finally the `docs` directory.
    pattern: ^(?:|.github/|docs/)README(?i:.(txt|md|rst))?$
    examples:
      - README
      - README.md
      - .github/README.txt
      - docs/README.rst
  content:
    body:
      - class: block_image
        src: ${{ web.file.logo_full_light.url }}$
        src_dark: ${{ web.file.logo_full_dark.url }}$
        title: Welcome to ${{ name }}$! Click to visit our website and learn more.
        alt: '${{ name }}$: ${{ title }}$'
        align: center
        width: 100%
        link: ${{ web.url.home }}$
      - class: menu
        items:
          - text: Intro
            link: ${{ web.page.intro.url }}$
            title: Introduction and Background
          - text: Manual
            link: ${{ web.page.manual.url }}$
            title: User Manual
          - text: News
            link: ${{ web.page.blog.url }}$
            title: Latest News and Releases
          - text: Contribute
            link: ${{ web.page.contribute.url }}$
            title: How to Contribute
          - text: About
            link: ${{ web.page.about.url }}$
            title: About the Project
          - text: Help
            link: ${{ web.page.help.url }}$
            title: Get Help and Support
        line_top_width: 100%
        line_bottom_width: 100%
        style: for-the-badge
        color: ${{ theme.color.primary.light }}$
        color_dark: ${{ theme.color.primary.dark }}$
        height: 33px
        attrs_container:
          align: center
      - - class: badge
          service: static
          label: Keywords
          args:
            message: ${{ keywords[0] }}$
          style: ${{ theme.badge.style }}$
          height: ${{ theme.badge.height }}$
          color: ${{ theme.badge.color.blue }}$
          label_color: ${{ theme.badge.color.grey }}$
        - '&nbsp;'
        - class: buttons
          items: ${{ keywords[1:] }}$
          style: ${{ theme.badge.style }}$
          height: ${{ theme.badge.height }}$
          color: ${{ theme.badge.color.blue }}$
      - class: paragraph
        content: ${{ abstract }}$
        attrs:
          align: justify
      - class: badges
        service: static
        style: ${{ theme.badge.style }}$
        height: ${{ theme.badge.height }}$
        color: ${{ theme.badge.color.blue }}$
        label_color: ${{ theme.badge.color.grey }}$
        separator: ${{ theme.badge.separator }}$
        items:
          - |
            *{{
              #{{
                out = []
                doi = get("zenodo.concept.doi")
                if doi:
                  zenodo = {
                    "label": "DOI",
                    "args": {"message": doi},
                    "logo": "zenodo",
                    "logo_type": "name",
                    "color": "#1682D4",
                    "link": f"https://doi.org/{doi}"
                  }
                  out.append(zenodo)
                if get("pypkg_main.pypi.publishable") and get("workflow.publish.pypi"):
                  pypi = {
                    "label": "pip install ",
                    "args": {"message": get("pypkg_main.name").lower()},
                    "logo": f"{get("web.path.source")}/_media/logo_ext/pypi.png",
                    "logo_type": "file",
                    "logo_media_type": "png",
                    "color": "#3775A9",
                    "link": get("pypkg_main.pypi.url.home"),
                  }
                  out.append(pypi)
                publish_conda = get("workflow.publish.conda-forge") or get("workflow.publish.anaconda")
                if publish_conda:
                  conda = {
                    "label": "conda install",
                    "args": {"message": f"{get("pypkg_main.name").lower()} -c {publish_conda["index"]["channel"].lower()}"},
                    "logo": "anaconda",
                    "logo_type": "name",
                    "logo_color": "#44A833",
                    "color": "#44A833",
                    "link": get("pypkg_main.conda.url.home"),
                  }
                  out.append(conda)
                publish_docker = get("workflow.binder")
                if publish_docker:
                  index = publish_docker["index"]
                  docker = {
                      "label": "docker pull",
                      "args": {"message": f"{index["registry"]}/{index["namespace"]}/{index["name"]}:latest".lower()},
                      "logo": "docker",
                      "logo_type": "name",
                      "color": "#2496ED",
                      "logo_color": "#2496ED",
                      "link": index["url"]["home"],
                    }
                  out.append(docker)
                if get("workflow.publish.github"):
                  github = {
                    "label": "GitHub",
                    "args": {"message": get("repo.name")},
                    "logo": "github",
                    "logo_type": "name",
                    "color": "#181717",
                    "link": get("repo.url.releases.home"),
                  }
                  out.append(github)
                return out
              }}#
            }}*
          - service: binder
            endpoint: github
            label: Binder
            args:
              message: try online
              user: ${{ repo.owner }}$
              repo: ${{ repo.name }}$
              ref: ${{ repo.default_branch }}$
            color: "#579ACA"
            label_color: ${{ theme.badge.color.grey }}$
    sections:
      - heading: Highlights
        body:
          - class: highlights
            items: ${{ highlights }}$
            button:
              style: for-the-badge
              color: [ '${{ theme.color.primary.light }}$', '${{ theme.color.secondary.light }}$' ]
              color_dark: [ '${{ theme.color.primary.dark }}$', '${{ theme.color.secondary.dark }}$' ]
              height: 30px
              align: left
            attrs_p:
              align: justify
      - heading: >-
          #{{
            if changelog.current_public.get("phase") == "dev":
              return "Upcoming Release"
            return "Latest Release"
          }}#
        body: ${{ __temp__.changelog.body }}$
        sections: ${{ __temp__.changelog.sections }}$
      - heading: Statistics
        body:
          - class: table
            rows:
              - - <b>Project</b>
                - - class: badges
                    style: ${{ theme.badge.style }}$
                    height: ${{ theme.badge.height }}$
                    color: ${{ theme.badge.color.blue }}$
                    separator: ${{ theme.badge.separator }}$
                    service: github
                    args:
                      user: ${{ repo.owner }}$
                      repo: ${{ repo.name }}$
                    items:
                      - endpoint: created_at
                        label: üóì‚ÄÇCreation Date
                      - endpoint: contributors
                        label: üßë‚ÄçüíªÔ∏è‚ÄÇContributors
                      - endpoint: language_count
                        label: üî†‚ÄÇProgramming Languages
                      - endpoint: top_language
                        logo: ${{ web.path.source }}$/_media/logo_ext/python.svg
                        logo_type: file
                        logo_media_type: svg+xml
                      - endpoint: repo_size
                        label: üöö‚ÄÇRepo Size
                      - endpoint: code_size
                        label: üöõ‚ÄÇCode Size
              - - <b>Health</b>
                - - class: badges
                    service: github
                    style: ${{ theme.badge.style }}$
                    height: ${{ theme.badge.height }}$
                    separator: ${{ theme.badge.separator }}$
                    args:
                      user: ${{ repo.owner }}$
                      repo: ${{ repo.name }}$
                    items:
                      - service: codecov
                        endpoint: coverage
                        args:
                          vcs_name: github
                      - service: librariesio
                        endpoint: source_rank
                        args:
                          platform: pypi
                          package: ${{ pypkg_main.name }}$
                      - service: librariesio
                        endpoint: dependency_status
                        args:
                          platform: pypi
                          package: ${{ pypkg_main.name }}$
                        label: Package Dependencies
                      - service: librariesio
                        endpoint: dependency_status_github
                        args:
                          platform: github
                          package: ""
                        label: Repository Dependencies
                      - service: website
                        args:
                          url: ${{ web.url.home }}$
                          up_message: online
                          up_color: '#00802b'
                          down_message: offline
                          down_color: '#AF1F10'
                        label: Website
              - - <b>Standards</b>
                - - class: badges
                    service: static
                    style: ${{ theme.badge.style }}$
                    height: ${{ theme.badge.height }}$
                    separator: ${{ theme.badge.separator }}$
                    items:
                      - label: Testing
                        args:
                          message: Pytest
                        color: "#0A9EDC"
                        logo: pytest
                        logo_color: "#0A9EDC"
                        logo_type: name
                        link: https://github.com/pytest-dev/pytest/
                      - label: Type Checking
                        args:
                          message: mypy
                        color: "#2A6DB2"
                        logo: ${{ web.path.source }}$/_media/logo_ext/mypy.svg
                        logo_type: file
                        logo_media_type: svg+xml
                        link: https://github.com/python/mypy
                      - label: Lint
                        args:
                          message: Ruff
                        color: "#D7FF64"
                        logo: ruff
                        logo_type: name
                        logo_color: "#D7FF64"
                        link: https://github.com/astral-sh/ruff
                      - label: Security
                        args:
                          message: CodeQL
                        color: "#181717"
                        logo: github
                        logo_type: name
                        link: https://codeql.github.com/
                      - label: Code Style
                        args:
                          message: Black
                        color: "#000"
                        logo: ${{ web.path.source }}$/_media/logo_ext/black.png
                        logo_type: file
                        logo_media_type: png
                        link: https://github.com/psf/black
              - - <b>Downloads</b>
                - - - |
                      *{{
                        #{{
                          if not get("pypkg_main.pypi.publishable"):
                            return []
                          badges = {
                            "class": "badges",
                            "style": get("theme.badge.style"),
                            "height": get("theme.badge.height"),
                            "color": get("theme.badge.color.blue"),
                            "separator": 1,
                            "service": "pypi",
                            "endpoint": "downloads",
                            "args": {"package": get("pypkg_main.name")},
                            "logo": "",
                            "label": "",
                            "items": [
                              {
                                "service": "pepy",
                                "endpoint": "total_downloads",
                                "label": "PyPI",
                                "logo": f"{get("web.path.source")}/_media/logo_ext/pypi.png",
                                "logo_type": "file",
                                "logo_media_type": "png",
                              },
                            ] + [{"args": {"period": period}} for period in ("m", "w", "d")]
                          }
                          return [badges, "&nbsp;" * get("theme.badge.separator")]
                        }}#
                      }}*
                    - |
                      *{{
                        #{{
                          conda = get("workflow.publish.conda-forge") or get("workflow.publish.anaconda")
                          if not conda:
                            return []
                          badge = {
                            "class": "badge",
                            "style": get("theme.badge.style"),
                            "height": get("theme.badge.height"),
                            "color": get("theme.badge.color.blue"),
                            "service": "conda",
                            "endpoint": "downloads",
                            "args": {"channel": conda.get("index", {}).get("channel", "conda-forge").lower(), "package": get("pypkg_main.name").lower()},
                            "label": "Conda",
                            "logo": "anaconda",
                            "logo_color": "#44A833",
                          }
                          return [badge, "&nbsp;" * get("theme.badge.separator")]
                        }}#
                      }}*
                    - class: badge
                      style: ${{ theme.badge.style }}$
                      height: ${{ theme.badge.height }}$
                      color: ${{ theme.badge.color.blue }}$
                      service: github
                      endpoint: downloads_all_releases
                      label: GitHub
                      args:
                        user: ${{ repo.owner }}$
                        repo: ${{ repo.name }}$
              - - <b>Users</b>
                - - class: badges
                    style: ${{ theme.badge.style }}$
                    height: ${{ theme.badge.height }}$
                    color: ${{ theme.badge.color.blue }}$
                    separator: ${{ theme.badge.separator }}$
                    service: librariesio
                    args:
                      platform: pypi
                      package: ${{ pypkg_main.name }}$
                    items:
                      - endpoint: dependents
                        label: Dependent Packages
                      - endpoint: dependents
                        args:
                          repo: true
                        label: Dependent Repositories
              - |
                *{{
                  #{{
                    out = []
                    label_data = [("Total", None)] + [
                      (badge_label, get(f"label.type.label.{label_type}.name"))
                      for badge_label, label_type in (
                        (f"{get(f"theme.icon.fix")}‚ÄÇBug Fixes", "fix"),
                        (f"{get(f"theme.icon.feat")}‚ÄÇNew Features", "feat"),
                        (f"{get(f"theme.icon.change")}‚ÄÇBreaking Changes", "change"),
                      )
                    ]
                    repo_owner = get("repo.owner")
                    repo_name = get("repo.name")
                    color_open = get("theme.badge.color.red")
                    color_closed = get("theme.badge.color.green")
                    style = get("theme.badge.style")
                    height = get("theme.badge.height")
                    separator = get("theme.badge.separator")
                    for title, issue_kind in (
                      ("Issues", "issues"),
                      ("PRs", "pulls"),
                    ):
                      badges = []
                      for badge_label, issue_label in label_data:
                        badges_config = {
                          "class": "badges",
                          "service": "github",
                          "endpoint": "issue_count",
                          "args": {"user": repo_owner, "repo": repo_name, "kind": issue_kind, "label": issue_label},
                          "style": style,
                          "height": height,
                          "separator": 0,
                          "items": [
                            {"args": {"state": "open"}, "label": badge_label, "color": color_open},
                            {"args": {"state": "closed"}, "label": "", "color": color_closed},
                          ],
                        }
                        badges.extend([badges_config, "&nbsp;" * separator])
                      out.append([f"<b>{title}</b>", [badges]])
                    return out
                  }}#
                }}*
              - - <b>Commits</b>
                - - class: badges
                    style: ${{ theme.badge.style }}$
                    height: ${{ theme.badge.height }}$
                    color: ${{ theme.badge.color.blue }}$
                    separator: ${{ theme.badge.separator }}$
                    service: github
                    endpoint: commit_activity
                    args:
                      user: ${{ repo.owner }}$
                      repo: ${{ repo.name }}$
                    items:
                      - args:
                          interval: t
                        label: Total
                        logo: git
                        logo_type: name
                        logo_color: "#F05032"
                      - args:
                          interval: y
                        label: ""
                      - args:
                          interval: m
                        label: ""
                      - args:
                          interval: w
                        label: ""
                      - endpoint: commits_since_latest_release
                        label: Since Latest Release
                      - endpoint: last_commit
                        label: Last
              - - <b>Discussions</b>
                - - class: badges
                    style: ${{ theme.badge.style }}$
                    height: ${{ theme.badge.height }}$
                    color: ${{ theme.badge.color.blue }}$
                    separator: ${{ theme.badge.separator }}$
                    service: github
                    endpoint: discussion_search_hits
                    args:
                      user: ${{ repo.owner }}$
                      repo: ${{ repo.name }}$
                    items:
                      - |
                        *{{
                          #{{
                            return [
                              {
                                "args": {"query": f'category:"{category["name"]}"'},
                                "label": f"{category["emoji"]}‚ÄÇ{category["name"]}",
                                "title": category["description"],
                              } for category in get("discussion.category", {}).values()
                            ]
                          }}#
                        }}*
              - - <b>Community</b>
                - - class: badges
                    style: ${{ theme.badge.style }}$
                    height: ${{ theme.badge.height }}$
                    color: ${{ theme.badge.color.blue }}$
                    separator: ${{ theme.badge.separator }}$
                    service: github
                    args:
                      user: ${{ repo.owner }}$
                      repo: ${{ repo.name }}$
                    logo: github
                    items:
                      - endpoint: forks
                      - endpoint: stars
                      - endpoint: watchers
              - - <b>DevOps</b>
                - - class: badges
                    style: ${{ theme.badge.style }}$
                    height: ${{ theme.badge.height }}$
                    separator: ${{ theme.badge.separator }}$
                    service: github
                    args:
                      user: ${{ repo.owner }}$
                      repo: ${{ repo.name }}$
                    items:
                      - endpoint: workflow_status
                        logo: github
                        logo_type: name
                        args:
                          workflow: main.yaml
                        label: CI
                      - |
                        *{{
                          #{{
                            import jinja2

                            out = []
                            for platform in ("pypi", "testpypi"):
                              env = get(f"workflow.publish.{platform}.env")
                              if env:
                                for pkg_key in ("pypkg_main", "pypkg_test"):
                                  pkg_name = get(f"{pkg_key}.name")
                                  if pkg_name:
                                    env_name = jinja2.Template(env["name"]).render(
                                      pkg={"name": pkg_name}
                                    )
                                    badge = {
                                      "endpoint": "deployment_status",
                                      "args": {"environment": env_name},
                                      "logo": f"{get("web.path.source")}/_media/logo_ext/pypi.png",
                                      "logo_type": "file",
                                      "logo_media_type": "png",
                                    }
                                    out.append(badge)
                            for platform in ("zenodo", "zenodo_sandbox"):
                              env = get(f"workflow.publish.{platform}.env")
                              if env:
                                badge = {
                                  "endpoint": "deployment_status",
                                  "args": {"environment": env["name"]},
                                  "logo": "zenodo",
                                  "logo_type": "name",
                                }
                                out.append(badge)
                            github_env = get("workflow.publish.github.env")
                            if github_env:
                              badge = {
                                "endpoint": "deployment_status",
                                "args": {"environment": github_env["name"]},
                                "logo": "github",
                                "logo_type": "name",
                              }
                              out.append(badge)
                            web_env = get("workflow.web.env")
                            if web_env:
                              badge = {
                                "endpoint": "deployment_status",
                                "args": {"environment": web_env["name"]},
                                "logo": "github",
                                "logo_type": "name",
                              }
                              out.append(badge)
                            rtd_name = get("tool.readthedocs.config.workflow.name")
                            if rtd_name:
                              badge = {
                                "service": "readthedocs",
                                "endpoint": "build_status",
                                "args": {"name": rtd_name},
                                "label": "CD ReadTheDocs",
                              }
                              out.append(badge)
                            return out
                          }}#
                        }}*
    footer:
      - class: thematic_break
      - class: badges
        style: for-the-badge
        items:
          - service: dynamic
            args:
              url: ${{ control.url.metadata }}$
              query: '$.copyright'
            label: ${{ name }}$
            color: ${{ theme.color.primary.light }}$
            logo: ${{ web.file.icon.path }}$
            logo_type: file
            color_dark: ${{ theme.color.primary.dark }}$
            logo_dark: ${{ web.file.icon.path }}$
            logo_type_dark: file
            link: ${{ team.owner.github.url }}$
            title: '${{ name }}$: Copyright ${{ copyright }}$'
            alt: ${{ .title }}$
            align: left
          - service: static
            args:
              message: ${{ license.expression }}$
            label: SPDX License Identifier
            color: "#4398CC"
            logo: spdx
            logo_color: "#4398CC"
            link: ${{ web.page.license.url }}$
            title: 'SPDX-License-Identifier: ${{ license.expression }}$'
            alt: 'SPDX-License-Identifier: ${{ license.expression }}$'
            align: right
      - class: badges
        style: for-the-badge
        items:
          - service: repodynamics
            endpoint: pypackit
            align: right
# GitHub community health files
# - https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file
file_coc:
  name: Code of Conduct
  type: md
  summary: >-
    GitHub [`CODE_OF_CONDUCT`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-code-of-conduct-to-your-project)
    community health file.
  notes: |
    For "Code of conduct" to be marked as complete in the repository's community profile,
    GitHub only accepts the
    [Contributor Covenant](https://www.contributor-covenant.org/version/2/0/code_of_conduct.html)
    and the [Citizen Code of Conduct](http://stumptownsyndicate.org/).
  path: CODE_OF_CONDUCT.md
  path_schema:
    description: |
      The file must be named `CODE_OF_CONDUCT` (case-sensitive)
      and placed either in the `.github` directory, the `docs` directory,
      or the root of the repository.
      It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
    pattern: ^(?:|.github/|docs/)CODE_OF_CONDUCT(?i:.(txt|md|rst))?$
    examples:
      - CODE_OF_CONDUCT
      - CODE_OF_CONDUCT.md
      - docs/CODE_OF_CONDUCT.txt
      - .github/CODE_OF_CONDUCT.MD
  content:
    class: covenant_code_of_conduct
    contact_name: |
      #{{
        return team_members_with_role_ids(
          "coc",
          active_only=True,
        )[0]["email"]["id"]
      }}#
    contact_url: |
      #{{
        return team_members_with_role_ids(
          "coc",
          active_only=True,
        )[0]["email"]["url"]
      }}#
file_contributing:
  name: Contribution Guide
  type: md
  summary: >-
    GitHub [`CONTRIBUTING`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors)
    community health file.
  path: CONTRIBUTING.md
  path_schema:
    description: |
      The file must be named `CONTRIBUTING` (case-insensitive)
      and placed either in the `.github` directory, the `docs` directory,
      or the root of the repository. It can have the extensions `.txt`, `.md`, or `.rst`.
    pattern: ^(?:|.github/|docs/)(?i:CONTRIBUTING(?:.(txt|md|rst))?)$
    examples:
      - CONTRIBUTING
      - CONTRIBUTING.md
      - contributing.rst
      - docs/CONTRIBUTING.txt
      - .github/contributing.md
  content:
    heading: ${{ name }}$ Contributing Guidelines
    body:
      - class: paragraph
        attrs:
          align: justify
        content: |
          Welcome to the <em>${{ name }}$</em> community!
          We are excited to have you here,
          and grateful that you are considering contributing.
          ${{ name }}$ is a free and open-source project that evolves with the needs of its users,
          and can only grow through the help of great members like you.
    sections:
      - heading: How To Contribute
        body:
          - class: paragraph
            attrs:
              align: justify
            content: |
              To keep all our project documentation organized and easy to find, the complete
              <a href="${{ web.page.contribute.url }}$">contribution guide</a> is hosted on our website.
    footer: ${{ file_readme.content.footer }}$
file_governance:
  name: Governance
  type: md
  summary: >-
    GitHub [`GOVERNANCE`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/)
    community health file.
  path: GOVERNANCE.md
  path_schema:
    description: |
      The file must be named `GOVERNANCE` (case-sensitive)
      and placed either in the `.github` directory, the `docs` directory,
      or the root of the repository.
      It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
    pattern: ^(?:|.github/|docs/)GOVERNANCE(?i:.(txt|md|rst))?$
    examples:
      - GOVERNANCE
      - GOVERNANCE.md
      - docs/GOVERNANCE.txt
      - .github/GOVERNANCE.md
  content:
    heading: Project Governance
    footer: ${{ file_readme.content.footer }}$
file_security:
  name: Security Policy
  type: md
  summary: >-
    GitHub [`SECURITY`](https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository)
    community health file.
  path: SECURITY.md
  path_schema:
    description: |
      The file must be named `SECURITY` (case-sensitive)
      and placed either in the `.github` directory, the `docs` directory,
      or the root of the repository.
      It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
    pattern: ^(?:|.github/|docs/)SECURITY(?i:.(txt|md|rst))?$
    examples:
      - SECURITY
      - SECURITY.md
      - docs/SECURITY.txt
      - .github/SECURITY.md
  content:
    heading: Security Policy
    footer: ${{ file_readme.content.footer }}$
file_support:
  name: Support Resources
  type: md
  summary: >-
      GitHub [`SUPPORT`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-support-resources-to-your-project)
      community health file.
  path: SUPPORT.md
  path_schema:
    description: |
      The file must be named `SUPPORT` (case-sensitive)
      and placed either in the `.github` directory, the `docs` directory,
      or the root of the repository.
      It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
    pattern: ^(?:|.github/|docs/)SUPPORT(?i:.(txt|md|rst))?$
    examples:
      - SUPPORT
      - SUPPORT.md
      - docs/SUPPORT.txt
      - .github/SUPPORT.md
  content:
    heading: Support Resources
    footer: ${{ file_readme.content.footer }}$
# Templates
__temp__:
  changelog:
    body:
      - class: badges
        service: static
        style: ${{ theme.badge.style }}$
        height: ${{ theme.badge.height }}$
        color: ${{ theme.badge.color.blue }}$
        label_color: ${{ theme.badge.color.grey }}$
        separator: ${{ theme.badge.separator }}$
        items:
          - label: ${{ pypkg_main.name }}$
            args:
              message: >-
                #{{ return changelog.current_public.version }}#
            label_color: ${{ theme.color.primary.light }}$
            label_color_dark: ${{ theme.color.primary.dark }}$
            color: ${{ theme.color.secondary.light }}$
            color_dark: ${{ theme.color.secondary.dark }}$
            logo: ${{ web.file.icon.path }}$
            logo_type: file
          - label: >-
              #{{
                release_type = changelog.current_public.type
                icon_type = {
                  "major": "change",
                  "minor": "feat",
                  "patch": "fix",
                  "post": "post"
                }[release_type]
                icon = get(f"theme.icon.{icon_type}")
                return f"{icon}‚ÄÇRelease Type"
              }}#
            args:
              message: >-
                #{{ return changelog.current_public.type }}#
            color: >-
              #{{
                release_type = changelog.current_public.type
                color_name = {
                  "major": "red",
                  "minor": "orange",
                  "patch": "green",
                  "post": "blue"
                }[release_type]
                return get(f"theme.badge.color.{color_name}")
              }}#
          - label: üóì‚ÄÇRelease Date
            args:
              message: >-
                #{{ return changelog.current_public.date }}#
          - |
            *{{
              #{{
                curr_changelog = changelog.current_public
                out = []
                zenodo = curr_changelog.get("zenodo", {})
                if zenodo:
                  badge = {
                    "label": "DOI",
                    "args": {"message": zenodo["doi"]},
                    "logo": "zenodo",
                    "logo_color": "#1682D4",
                    "color": "#1682D4",
                    "link": f"https://zenodo.org/{"uploads" if zenodo.get("draft") else "records"}/{zenodo["id"]}"
                  }
                  out.append(badge)
                version = curr_changelog.version
                if get("pypkg_main.pypi.publishable") and get("workflow.publish.pypi"):
                  pypi = {
                    "label": "pip install",
                    "args": {"message": f"{get("pypkg_main.name")} == {version}"},
                    "logo": f"{get("web.path.source")}/_media/logo_ext/pypi.png",
                    "logo_type": "file",
                    "logo_media_type": "png",
                    "color": "#3775A9",
                    "link": get("pypkg_main.pypi.url.home"),
                  }
                  out.append(pypi)
                conda_publish = get("workflow.publish.conda-forge") or get("workflow.publish.anaconda")
                if conda_publish:
                  conda = {
                    "label": "conda install",
                    "args": {"message": f"{get("pypkg_main.name")} == {version} -c {conda_publish["index"]["channel"]}"},
                    "logo": "anaconda",
                    "logo_type": "name",
                    "logo_color": "#44A833",
                    "color": "#44A833",
                    "link": get("pypkg_main.conda.url.home"),
                  }
                  out.append(conda)
                publish_docker = get("workflow.binder")
                if publish_docker:
                  index = publish_docker["index"]
                  docker = {
                      "label": "docker pull",
                      "args": {"message": f"{index["registry"]}/{index["namespace"]}/{index["name"]}:{version}".lower()},
                      "logo": "docker",
                      "logo_type": "name",
                      "color": "#2496ED",
                      "logo_color": "#2496ED",
                      "link": index["url"]["home"],
                    }
                  out.append(docker)
                tag = f"{get("tag.version.prefix")}{version}"
                github = {
                  "label": "git checkout",
                  "args": {"message": tag},
                  "logo": "github",
                  "logo_type": "name",
                  "color": "#181717",
                  "link": get("repo.url.releases.home"),
                }
                out.append(github)
                binder = {
                  "label": "Binder",
                  "service": "binder",
                  "endpoint": "github",
                  "args": {
                    "message": "try online",
                    "user": get("repo.owner"),
                    "repo": get("repo.name"),
                    "ref": tag
                  },
                  "color": "#579ACA",
                }
                out.append(binder)
                return out
              }}#
            }}*
      - >-
        **#{{ return changelog.current_public.title }}#**
      - >-
        #{{ return changelog.current_public.description }}#
    sections:
      - |
        *{{
          #{{
            if changelog.current_public.get("phase") != "dev":
              return []
            dev_release = changelog.current_public.get("dev")
            if not dev_release:
              return []
            badge_items = []
            date = dev_release.get("date")
            if date:
              badge_items.append({"label": "üóì‚ÄÇRelease Date", "args": {"message": date}})
            zenodo = dev_release.get("zenodo_sandbox")
            if zenodo:
              badge = {
                "label": "DOI",
                "args": {"message": zenodo["doi"]},
                "logo": "zenodo",
                "logo_color": "#1682D4",
                "color": "#1682D4",
                "link": f"https://sandbox.zenodo.org/{"uploads" if zenodo.get("draft") else "records"}/{zenodo["id"]}"
              }
              badge_items.append(badge)
            version = dev_release.get("version")
            if version:
              tag = f"{get("tag.version.prefix")}{version}"
              github = {
                "label": "git checkout",
                "args": {"message": tag},
                "logo": "github",
                "logo_type": "name",
                "color": "#181717",
                "link": get("repo.url.releases.home"),
              }
              badge_items.append(github)
              binder = {
                "label": "Binder",
                "service": "binder",
                "endpoint": "github",
                "args": {
                  "message": "try online",
                  "user": get("repo.owner"),
                  "repo": get("repo.name"),
                  "ref": tag
                },
                "color": "#579ACA",
              }
              badge_items.append(binder)
            badges = {
              "class": "badges",
              "service": "static",
              "style": get("theme.badge.style"),
              "height": get("theme.badge.height"),
              "color": get("theme.badge.color.blue"),
              "label_color": get("theme.badge.color.grey"),
              "separator": get("theme.badge.separator"),
              "items": badge_items
            }
            section = {
              "heading": "Latest Developmental Release",
              "body": [badges]
            }
            return [section]
          }}#
        }}*
      - heading: Requirements
        body:
          - - class: button
              text: "‚öôÔ∏è‚ÄÇOperating System"
              style: ${{ theme.badge.style }}$
              height: ${{ theme.badge.height }}$
              color: ${{ theme.badge.color.grey }}$
            - '&nbsp;'
            - class: badges
              service: static
              style: ${{ theme.badge.style }}$
              height: ${{ theme.badge.height }}$
              label_color: ${{ theme.badge.color.grey }}$
              separator: 1
              items:
                - |
                  *{{
                    #{{
                      badges = []
                      oss = get("pypkg_main.os")
                      color_green = get("theme.badge.color.green")
                      for os in oss.values():
                        supports = "any" if "cibuild" not in os else " | ".join(os["builds"])
                        badge = {
                          "label": os["name"],
                          "args": {"message": supports},
                          "color": color_green,
                          "logo": os.get("data", {}).get("logo"),
                          "logo_color": os.get("data", {}).get("logo_color")
                        }
                        badges.append(badge)
                      return badges
                    }}#
                  }}*
          - - class: badge
              service: static
              args:
                message: "Python"
              style: ${{ theme.badge.style }}$
              height: ${{ theme.badge.height }}$
              color: ${{ theme.badge.color.grey }}$
              label_color: ${{ theme.badge.color.grey }}$
              logo: ${{ web.path.source }}$/_media/logo_ext/python.svg
              logo_type: file
              logo_media_type: svg+xml
            - '&nbsp;'
            - class: badges
              service: static
              style: ${{ theme.badge.style }}$
              height: ${{ theme.badge.height }}$
              color: ${{ theme.badge.color.blue }}$
              label_color: ${{ theme.badge.color.grey }}$
              separator: 1
              items:
                - label: Versions
                  args:
                    message: >-
                      #{{ return " | ".join(get("pypkg_main.python.version.minors")) }}#
                - label: Implementation
                  args:
                    message: >-
                      #{{ return "any" if get("pypkg_main.python.pure") else pypkg_main.python.implementation }}#
                  color: >-
                    #{{
                      if get("pypkg_main.python.pure"):
                        return get("theme.badge.color.green")
                      return get("theme.badge.color.blue")
                    }}#
          - |
            #{{
              deps = list(get("pypkg_main.dependency.core", {}).values())
              style = get("theme.badge.style")
              height = get("theme.badge.height")
              green = get("theme.badge.color.green")
              blue = get("theme.badge.color.blue")
              grey = get("theme.badge.color.grey")
              label = "üì¶‚ÄÇDependencies"
              if not deps:
                badge = {
                  "class": "badge",
                  "service": "static",
                  "label": label,
                  "args": {"message": "none"},
                  "style": style,
                  "height": height,
                  "color": green,
                  "label_color": grey
                }
                return [badge]
              button = {
                "class": "button",
                "text": label,
                "style": style,
                "height": height,
                "color": grey,
              }
              badges = {
                "class": "badges",
                "service": "static",
                "style": style,
                "height": height,
                "label_color": grey,
                "separator": 1,
                "items": [],
              }
              out = [button, "&nbsp;", badges]
              for dep in deps:
                name = dep["name"].strip()
                name_spec = dep["install"].get("pip", {}).get("spec") or dep.get("conda", {}).get("spec")
                spec = name_spec.strip().casefold().removeprefix(name.casefold()).strip()
                badge = {
                  "label": name,
                  "args": {"message": spec or "any"},
                  "color": blue if spec else green,
                }
                badges["items"].append(badge)
              return out
            }}#
      - heading: Interfaces
        body:
          - |
            *{{
              #{{
                interfaces = get("pypkg_main.entry")
                style = get("theme.badge.style")
                height = get("theme.badge.height")
                blue = get("theme.badge.color.blue")
                grey = get("theme.badge.color.grey")

                config = {
                  "python": {
                    "text": "API",
                    "logo": f"{get("web.path.source")}/_media/logo_ext/python.svg",
                    "logo_type": "file",
                    "logo_media_type": "svg+xml",
                  },
                  "cli": {
                    "text": "CLI",
                    "logo": "gnubash",
                    "logo_color": "#4EAA25",
                  },
                  "gui": {
                    "text": f"{get("theme.icon.gui")}‚ÄÇGUI"
                  },
                }
                item_color = {
                  "python": "#3776AB",
                  "cli": "#000",
                  "gui": "#CCC",
                }
                item_label = {
                  "python": "import",
                  "cli": "$",
                  "gui": "$",
                }

                out = []
                for interface in ("python", "cli", "gui"):
                  if interface not in interfaces:
                    continue
                  button = {
                    "class": "button",
                    "style": style,
                    "height": height,
                    "color": grey,
                  } | config[interface]
                  badges = {
                    "class": "badges",
                    "service": "static",
                    "label": item_label[interface],
                    "style": style,
                    "height": height,
                    "color": blue,
                    "label_color": grey,
                    "separator": 1,
                    "items": [],
                  }
                  out.append([button, "&nbsp;", badges])
                  for entry in interfaces[interface].values():
                    badge = {
                      "args": {"message": entry["name"]},
                      "color": item_color[interface],
                      "title": entry["description"],
                      "alt": entry["name"],
                    }
                    badges["items"].append(badge)
                return out
              }}#
            }}*
