name: '[Reusable]: Package - Lint'
on:
  workflow_call:
    inputs:
      config:
        description: Configuration as a JSON string.
        type: string
        required: true
jobs:
  #TODO: add Tokei   https://github.com/XAMPPRocky/tokei
  CodeQL:
    # Run code scanning with GitHub CodeQL.
    # Adapted from GitHub starter workflow, e.g.:
    #  https://github.com/Armin-Ariamajd/PyPACKIT/new/main?filename=.github%2Fworkflows%2Fcodeql.yml&workflow_template=code-scanning%2Fcodeql
    # Refs:
    #  https://github.com/github/codeql-action
    # https://github.com/github/codeql-action/blob/main/upload-sarif/action.yml
    #  https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning-for-a-repository
    name: CodeQL Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
        # Available languages: 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift'
        # CodeQL language support: https://aka.ms/codeql-docs/language-support
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ fromJSON(inputs.config).repository }}
          ref: ${{ fromJSON(inputs.config).ref }}
          fetch-depth: 0
      - name: CodeQL Initialization
        # Initializes the CodeQL tools for scanning.
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # queries: security-extended,security-and-quality
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.
          # For more details on CodeQL's query packs, refer to:
          #  https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs

      - name: CodeQL Autobuild
        # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
        # If this step fails, then you should remove it and run the build manually instead.
        uses: github/codeql-action/autobuild@v3

      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
  dependency-review:
    # This Action will scan dependency manifest files that change as part of a Pull Request,
    # surfacing known-vulnerable versions of the packages declared or updated in the PR.
    # Once installed, if the workflow run is marked as required,
    # PRs introducing known-vulnerable packages will be blocked from merging
    name: Dependency Review
    if: contains(fromJSON('["push", "pull_request"]'), github.event_name)
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ fromJSON(inputs.config).repository }}
          ref: ${{ fromJSON(inputs.config).ref }}
      - name: Dependency Review
        # Source repository: https://github.com/actions/dependency-review-action
        # Public documentation: https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/about-dependency-review#dependency-review-enforcement
        # https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/configuring-dependency-review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: low
          fail-on-scopes: development, runtime, unknown
          comment-summary-in-pr: true
          base-ref: ${{ fromJSON(inputs.config).ref-before }}
          head-ref: ${{ fromJSON(inputs.config).ref }}
#  mypy:
#    name: MyPy (Py ${{ matrix.python }} | ${{ matrix.os.name }})
#    strategy:
#      fail-fast: false
#      matrix:
#        os: ${{ fromJSON(inputs.config).os }}
#        python: ${{ fromJSON(inputs.config).pkg.python.version.minors }}
#    runs-on: ${{ matrix.os.runner }}
#    steps:
#      - name: Repository Checkout
#        uses: actions/checkout@v4
#        with:
#          repository: ${{ fromJSON(inputs.config).repository }}
#          ref: ${{ fromJSON(inputs.config).ref }}
#          fetch-depth: 0
#
#      - name: Python Setup
#        uses: actions/setup-python@v5
#        with:
#          python-version: ${{ fromJSON(inputs.config).python-max }}
#          check-latest: 'true'
#          cache: pip
#          cache-dependency-path: ${{ fromJSON(inputs.config).tool.mypy.env.file.pip.path }}
#
#      - name: Environment Setup
#        shell: bash
#        run: |
#          echo "::group::Upgrade pip"
#          python3 -m pip install --upgrade pip
#          echo "::endgroup::"
#
#          echo "::group::Install ${{ fromJSON(inputs.config).pkg.name }}"
#          python3 -m pip install "./${{ fromJSON(inputs.config).pkg.path.root }}"
#          echo "::endgroup::"
#
#          if [[ "${{ fromJSON(inputs.config).type }}" == "test" ]]; then
#            echo "::group::Install ${{ fromJSON(inputs.config).pkg2.name }}"
#            python3 -m pip install "./${{ fromJSON(inputs.config).pkg2.path.root }}"
#            echo "::endgroup::"
#          fi
#
#          echo "::group::Install mypy"
#          python3 -m pip install -r "${{ fromJSON(inputs.config).tool.mypy.env.file.pip.path }}"
#          echo "::endgroup::"
#
#          echo "::group::Display pip environment"
#          python3 -m pip list
#          echo "::endgroup::"
#
#      - name: Cache Load
#        uses: actions/cache@v4  # https://github.com/actions/cache
#        with:
#          path: ${{ fromJSON(inputs.config).tool.mypy.config.workflow.cache_path }}
#          key: >-
#            branch
#            __${{ inputs.ref-name }}
#            __mypy
#            __${{ matrix.os.runner }}
#            __py${{ matrix.python }}
#            __dep-hash-${{ hashFiles(fromJSON(inputs.config).tool.mypy.env.file.pip.path) }}
#
#      - name: MyPy
#        shell: bash
#        run: >-
#          mypy
#          --package ${{ fromJSON(inputs.config).pkg.import_name }}
#          --config-file ${{ fromJSON(inputs.config).tool.mypy.config.file.path }}
#          --python-version ${{ matrix.python }}
#          --install-types
#          --non-interactive
#
#      - name: Report Upload
#        if: always()
#        uses: actions/upload-artifact@v4  # https://github.com/actions/upload-artifact
#        with:
#          name: >-
#            MyPy Report
#            - ${{ fromJSON(inputs.config).pkg.name }}
#            - ${{ fromJSON(inputs.config).version }}
#            - Py ${{ matrix.python }}
#            - ${{ matrix.os.name }}
#          path: ${{ fromJSON(inputs.config).tool.mypy.config.workflow.report_path }}
#  mypy-report:
#    name: MyPy Report
#    if: ${{ !cancelled() }}
#    needs: mypy
#    runs-on: ubuntu-latest
#    steps:
#      - name: Artifact Merge
#        uses: actions/upload-artifact/merge@v4
#        with:
#          name: >-
#            MyPy Reports
#            - ${{ fromJSON(inputs.config).pkg.name }}
#            - ${{ fromJSON(inputs.config).version }}
#          pattern: >-
#            MyPy Report
#            - ${{ fromJSON(inputs.config).pkg.name }}
#            - ${{ fromJSON(inputs.config).version }}
#            - *
#          separate-directories: 'true'
#          delete-merged: 'true'
#  pylint:
#    name: 'PyLint (${{ matrix.os.name }})'
#    strategy:
#      fail-fast: false
#      matrix:
#        os: ${{ fromJSON(inputs.config).os }}
#    runs-on: ${{ matrix.os.runner }}
#    steps:
#      - name: 'Checkout repository'
#        uses: actions/checkout@v4
#        with:
#          repository: ${{ fromJSON(inputs.config).repository }}
#          ref: ${{ fromJSON(inputs.config).ref }}
#          fetch-depth: 0
#          path: repo
#
#      - name: 'Setup Python'
#        id: setup_python
#        uses: actions/setup-python@v5
#        with:
#          python-version: ${{ fromJSON(inputs.config).python-max-ver }}
#          cache: pip
#          cache-dependency-path: repo/.github/workflow_requirements/pylint.txt
#
#      - name: 'Setup MSYS2'
#        if: runner.os == 'Windows'
#        uses: msys2/setup-msys2@v2
#        with:
#          update: true
#          install: mingw-w64-x86_64-enchant
#
#      - name: 'Install Extra Requirements'
#        shell: bash
#        run: |
#          if [ "$RUNNER_OS" == "Linux" ]; then
#              sudo apt update
#              sudo apt install -y libenchant-2-2
#              sudo apt install -y graphviz
#          elif [ "$RUNNER_OS" == "Windows" ]; then
#              echo "Requirement already satisfied."
#          elif [ "$RUNNER_OS" == "macOS" ]; then
#              brew update-reset
#              brew install enchant
#          else
#              echo "$RUNNER_OS not supported"
#              exit 1
#          fi
#
#      - name: 'Setup Environment'
#        shell: bash
#        run: |
#          echo "::group::Upgrade pip"
#          python3 -m pip install --upgrade pip
#          echo "::endgroup::"
#
#          echo "::group::Install package"
#          python3 -m pip install ./repo
#          echo "::endgroup::"
#
#          echo "::group::Install pylint"
#          python3 -m pip install -r ./repo/.github/workflow_requirements/pylint.txt
#          echo "::endgroup::"
#
#          echo "::group::Display pip environment"
#          python3 -m pip list
#          echo "::endgroup::"
#
#      - name: 'Run Pylint'
#        shell: bash
#        run: |
#          echo "::group::Create temporary directory"
#          TEMP_DIR=${{ github.workspace }}/reports/pylint/${{ runner.os }}
#          mkdir -p $TEMP_DIR
#          echo "::endgroup::"
#
#          cd repo
#          echo "::group::Run pylint"
#          pylint \
#          ${{ fromJSON(inputs.config).package-name }} \
#          --rcfile pyproject.toml \
#          --import-graph $TEMP_DIR/import_graph_total.svg \
#          --int-import-graph $TEMP_DIR/import_graph_internal.svg \
#          --ext-import-graph $TEMP_DIR/import_graph_external.svg \
#          --output-format=colorized,text:$TEMP_DIR/report_text.txt,json:$TEMP_DIR/report_json.json,parseable:$TEMP_DIR/report_parseable.txt,msvs:$TEMP_DIR/report_msvs.txt \
#          -j 0
#          echo "::endgroup::"
#
#      - name: 'Create diagrams'
#        # https://pylint.readthedocs.io/en/latest/pyreverse.html
#        if: always()
#        shell: bash
#        run: |
#          echo "::group::Create temporary directory"
#          TEMP_DIR=${{ github.workspace }}/reports/pyreverse/${{ runner.os }}
#          mkdir -p $TEMP_DIR
#          echo "::endgroup::"
#
#          cd repo
#          echo "::group::Run pyreverse"
#          pyreverse \
#          --source-roots ${{ fromJSON(inputs.config).path-source }} \
#          --output-directory $TEMP_DIR \
#          --output html \
#          --module-names y \
#          --colorized \
#          --max-color-depth 5 \
#          ${{ fromJSON(inputs.config).package-name }}
#          echo "::endgroup::"
#
#      - name: 'Upload Pylint reports'
#        if: always()
#        uses: actions/upload-artifact@v3
#        with:
#          name: Lint Reports
#          path: ${{ github.workspace }}/reports/
