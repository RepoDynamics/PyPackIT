pypkg_ci:
  name: PyPackIT
  path:
    root: .manager
  os: ${{ pypkg_main.os }}$
  python:
    version:
      spec: '>=3.10'
  entry:
    cli:
      main:
        name: project
        description: Main command line interface for PyPackIT.
        ref: pypackit.__main__:cli
        parser:
          kwargs:
            description: Project Manager CLI
          arguments:
            - args: [ --repo ]
              kwargs:
                type: str
                help: Local path to the repository root directory.
          subparser:
            id: main
            kwargs:
              dest: command
              required: true
            parsers:
              - id: cca
                args: [ cca ]
                kwargs:
                  help: Run Continuous Configuration Automation on the repository.
                defaults:
                  endpoint: cca.run_cli
                arguments:
                  - args: [ -t, --token ]
                    kwargs:
                      type: str
                      help: GitHub token for accessing the repository.
                  - args: [ -b, --branch-version ]
                    kwargs:
                      help: Branch-name to version mappings (e.g., -b main=0.0.0 dev=1.0.0a1) to use instead of git tags.
                      type: str
                      nargs: "*"
                      metavar: BRNACH=VERSION
                    post_process: |
                      if args.branch_version:
                          try:
                              args.branch_version = dict(pair.split("=", 1) for pair in args.branch_version)
                          except ValueError:
                              parser.error(
                                  "--branch-version must be in the format BRANCH=VERSION (e.g., -b main=1.0.0 dev=2.0.0)."
                              )
                  - args: [ -c, --control-center ]
                    kwargs:
                      help: Path to the control center directory containing configuration files.
                      type: str
                  - args: [ -d, --dry-run ]
                    kwargs:
                      help: Perform a dry run without making any changes.
                      action: store_true
                  - args: [ -n, --no-validate ]
                    kwargs:
                      help: Skip validation of the metadata.json file.
                      dest: validate
                      action: store_false
              - id: lint
                args: [ lint ]
                kwargs:
                  help: Run pre-commit hooks on the repository.
                defaults:
                  endpoint: lint.run_cli
                arguments:
                  - args: [ -x, --action ]
                    kwargs:
                      help: Lint mode.
                      type: str
                      choices: [ report, run, validate ]
                      default: run
                  - args: [ -c, --config ]
                    kwargs:
                      help: Path to the pre-commit configuration file.
                      type: str
                      default: .devcontainer/config/pre-commit.yaml
                  - args: [ -r2, --to-ref ]
                    kwargs:
                      help: Run on files changed until the given git ref. This must be accompanied by --from-ref.
                    post_process: |
                      if (args.from_ref and not args.to_ref) or (args.to_ref and not args.from_ref):
                          parser.error("Both --from-ref and --to-ref must be provided together.")
                mutually_exclusive:
                  - id: hook
                    arguments:
                      - args: [ -i, --hook-id ]
                        kwargs:
                          help: Specific hook ID to run. This will only run the specified hook.
                          type: str
                      - args: [ -s, --hook-stage ]
                        kwargs:
                          help: Specific hook stage to run. This will only run hooks in the specified stage.
                          type: str
                  - id: file
                    arguments:
                      - args: [ -a, --all-files ]
                        kwargs:
                          help: Run on all files in the repository.
                          action: store_true
                      - args: [ -f, --files ]
                        kwargs:
                          help: Run on specific files.
                          nargs: "+"
                      - args: [ -r1, --from-ref ]
                        kwargs:
                          help: Run on files changed since the given git ref. This must be accompanied by --to-ref.
              - id: version
                args: [ version ]
                kwargs:
                  help: Print the current version of the project.
              - id: build
                args: [ build ]
                kwargs:
                  help: Build project components.
                subparser:
                  id: build
                  kwargs:
                    dest: build
                    required: true
                  parsers:
                    - id: conda
                      args: [ conda ]
                      kwargs:
                        help: Build a conda package in the project.
                      arguments:
                        - args: [ -p, --pkg ]
                          kwargs:
                            help: Package ID, i.e., the `pypkg_` key suffix in configuration files.
                            default: main
                        - args: [ -o, --output ]
                          kwargs:
                            help: Path to the local conda channel directory.
                            type: str
                            default: ${{ local.temp.path }}$/conda-channel
                        - args: [ -r, --recipe ]
                          kwargs:
                            help: Type of recipe to build.
                            type: str
                            choices: [ local, global ]
                            default: local
                        - args: [ --args ]
                          kwargs:
                            help: Additional arguments to pass to the conda build command.
                            nargs: argparse.REMAINDER
                    - id: python
                      args: [ python ]
                      kwargs:
                        help: Build a Python package in the project.
                      arguments:
                        - args: [ -p, --pkg ]
                          kwargs:
                            help: Package ID, i.e., the `pypkg_` key suffix in configuration files.
                            default: main
                        - args: [ -o, --output ]
                          kwargs:
                            help: Path to the local PyPI channel directory.
                            type: str
                            default: ${{ local.temp.path }}$/wheelhouse
                        - args: [ --args ]
                          kwargs:
                            help: Additional arguments to pass to the Python build command.
                            nargs: argparse.REMAINDER
  dependency:
    core:
      actionman:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/actionman
        url:
          docs: https://actionman.repodynamics.com
          source: https://github.com/repodynamics/actionman
      ansi-sgr:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/ansi-sgr
        url:
          docs: https://ansi-sgr.repodynamics.com
          source: https://github.com/repodynamics/ansi-sgr
      conventionalcommits:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/conventionalcommits
        url:
          docs: https://conventionalcommits.repodynamics.com
          source: https://github.com/repodynamics/conventionalcommits
      exceptionman:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/exceptionman
        url:
          docs: https://exceptionman.repodynamics.com
      fileex:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/fileex
        url:
          docs: https://fileex.repodynamics.com
          source: https://github.com/repodynamics/fileex
      github-contexts:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/github-contexts
        url:
          docs: https://github-contexts.repodynamics.com
          source: https://github.com/repodynamics/github-contexts
      gittidy:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/gittidy
        url:
          docs: https://gittidy.repodynamics.com
          source: https://github.com/repodynamics/gittidy
      htmp:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/htmp
        url:
          docs: https://htmp.repodynamics.com
          source: https://github.com/repodynamics/htmp
      jinja2:
        install:
          pip:
            version: ==3.1.6
      jsonpath-ng:
        install:
          pip:
            version: ==1.7.0
            homepage: https://pypi.org/project/jsonpath-ng
      jsonschema:
        install:
          pip:
            version: ==4.23.0
      jsonschemata:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/jsonschemata
      licenseman:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/licenseman
        url:
          docs: https://licenseman.repodynamics.com
      loggerman:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/loggerman
        url:
          docs: https://loggerman.repodynamics.com
          source: https://github.com/repodynamics/loggerman
      mdit:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/mdit
        url:
          docs: https://mdit.repodynamics.com
          source: https://github.com/repodynamics/mdit
      packaging:
        install:
          pip:
            version: ==24.2
            homepage: https://pypi.org/project/packaging
      pkgdata:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/pkgdata
        url:
          docs: https://pkgdata.repodynamics.com
          source: https://github.com/repodynamics/pkgdata
      pycolorit:
        install:
          pip:
            version: ==0.1.1
            homepage: https://pypi.org/project/pycolorit
        url:
          docs: https://pycolorit.repodynamics.com
          source: https://github.com/repodynamics/pycolorit
      pylinks:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/pylinks
        url:
          docs: https://pylinks.repodynamics.com
          source: https://github.com/repodynamics/pylinks
      pyserials:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/pyserials
        url:
          docs: https://pyserials.repodynamics.com
          source: https://github.com/repodynamics/pyserials
      pyshellman:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/pyshellman
        url:
          docs: https://pyshellman.repodynamics.com
          source: https://github.com/repodynamics/pyshellman
      pysyntax:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/pysyntax
        url:
          docs: https://pysyntax.repodynamics.com
          source: https://github.com/repodynamics/pysyntax
      referencing:
        install:
          pip:
            version: ==0.36.2
            homepage: https://pypi.org/project/referencing
      ruamel.yaml:
        install:
          pip:
            version: ==0.18.10
            homepage: https://pypi.org/project/ruamel.yaml/
      rich:
        install:
          pip:
            version: ==13.9.4
      trove-classifiers:
        install:
          pip:
            version: '>=2025.3.13.13'
            homepage: https://pypi.org/project/trove-classifiers
      versionman:
        install:
          pip:
            version: ==0.1.1
            homepage: https://pypi.org/project/versionman
        url:
          docs: https://versionman.repodynamics.com
          source: https://github.com/repodynamics/versionman
  pyproject:
    build-system:
      build-backend: setuptools.build_meta
      requires:
        - setuptools >=72.1.0,<73
    project:
      name: ${{ pypkg_ci.name }}$
      version: 0.1.0
      requires-python: ${{ pypkg_ci.python.version.spec }}$
      dependencies: >-
        #{{ return hook.pyproject_dependency("core", pkg="ci") }}#
      scripts:
        project: pypackit.__main__:cli
    tool:
      setuptools:
        include-package-data: true
        packages:
          find:
            where:
              - ${{ pypkg_ci.path.source_rel }}$
            namespaces: true
control:
  cache:
    retention_hours:
      css_color_filter: 0
workflow:
  refactor:
    pre_commit_config: ${{ devcontainer_main.environment.pre_commit.file.pre_commit_config.content }}$
  web:
    container:
      id: docs
      command: ${{ devcontainer_docs.environment.website.task.build.alias }}$
    artifact:
      build:
        name: Website - v{{ version }}
        path: ${{ data_website.path.build }}$
        include_hidden: true
      pages:
        name: Website - v{{ version }} - GH-Pages
        path: ${{ data_website.path.build }}$/${{ file_script_web_build.data.sphinx_builder }}$
  binder:
    path:
      config: .binder_config
      dockerfile: .binder
    image:
      test_script: '${{ pypkg_test.entry.cli.main.name }}$'
  publish:
    anaconda:
      name: Publish (Anaconda)
      task_name: '{{ pkg.name }} v{{ version }}'
      env:
        name: Anaconda ({{ pkg.name }})
        url: https://anaconda.org/${{ ..index.channel }}$/{{ pkg.name }}/files?version={{ version }}
      index:
        channel: ${{ repo.owner }}$
      action:
        pkg: auto
        test: auto
    pypi:
      name: Publish (PyPI)
      task_name: '{{ pkg.name }} v{{ version }}'
      env:
        name: PyPI ({{ pkg.name }})
        url: https://pypi.org/project/{{ pkg.name }}/{{ version }}
      index:
        url:
          upload: https://upload.pypi.org/legacy/
      action:
        pkg: auto
        test: auto
    testpypi:
      name: Publish (TestPyPI)
      task_name: '{{ pkg.name }} v{{ version }}'
      env:
        name: TestPyPI ({{ pkg.name }})
        url: https://test.pypi.org/project/{{ pkg.name }}/{{ version }}
      index:
        url:
          upload: https://test.pypi.org/legacy/
      action:
        pkg: auto
        test: auto
    github:
      name: Release
      task_name: GitHub
      env:
        name: GitHub Release
        url: ${{ repo.url.deployments.home }}$
      release:
        body:
          body: ${{ __temp__.changelog.body }}$
          sections: ${{ __temp__.changelog.sections }}$
      asset:
        template:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}.zip
          label: ${{ name }}$
          format: zip
          files:
            - source: template
            - source: .github/workflows
              destination: .github/workflows
        sdist:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}-sdists.zip
          label: Source Distributions
          format: zip
          files:
            - pattern: '^[^/]+ - sdist/[^/]+\.tar\.gz$'
              artifact: true
        wheel:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}-wheels.zip
          label: Binary Distributions
          format: zip
          files:
            - pattern: '^[^/]+ - wheels/[^/]+\.whl$'
              artifact: true
        conda:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}-conda.zip
          label: Conda Distributions
          format: zip
          files:
            - pattern: '^[^/]+ - conda/.+\.conda$'
              artifact: true
        dockerfile:
          name: Dockerfile
          label: Dockerfile
          files:
            - source: ${{ workflow.binder.path.dockerfile }}$/Dockerfile
          media_type: text/plain
        docs:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}-docs.zip
          label: Documentation
          format: zip
          files:
            - pattern: '^Website(?!.*GH-Pages)[^/]*$'
              artifact: true
        license:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}-license.zip
          label: License
          format: zip
          files:
            - pattern: '^(LICENSE|COPYING)[^/]*$'
        citation:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}-citation.cff
          label: Citation
          files:
            - source: CITATION.cff
          media_type: application/yaml
    zenodo:
      name: Release
      task_name: Zenodo
      env:
        name: Zenodo
        url: https://zenodo.org/records/{{ id }}
      asset: ${{ workflow.publish.github.asset }}$
    zenodo_sandbox:
      name: Release
      task_name: Zenodo Sandbox
      env:
        name: Zenodo Sandbox
        url: https://sandbox.zenodo.org/records/{{ id }}
      asset: ${{ workflow.publish.github.asset }}$
  schedule:
    cca:
      cron: '43 23 * * *'  # Every day at 23:43 UTC.
      branch_types: [ main, release, pre ]
      job:
        sync:
          action: pull
        announcement_expiry:
          action: commit
    cr_ct:
      cron: '43 6 * * 6'  # Every Saturday at 6:43 UTC.
      branch_types: [ main, release ]
      job:
        lint:
          action: issue
        refactor:
          action: pull
        test:
          action: issue
  test:
    codecov:
      codecov_yml_path: ${{ devcontainer_main.environment.codecov.file.codecov_config.path }}$
