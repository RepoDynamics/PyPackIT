control:
  cache:
    retention_hours:
      css_color_filter: 0
workflow:
  refactor:
    pre_commit_config: ${{ devcontainer_main.environment.pre_commit.file.pre_commit_config.content }}$
  web:
    container:
      id: docs
      command: ${{ devcontainer_docs.environment.website.task.build.alias }}$
    artifact:
      build:
        name: Website - v{{ version }}
        path: ${{ data_website.path.build }}$/
        include_hidden: true
      pages:
        name: Website - v{{ version }} - GH-Pages
        path: ${{ data_website.path.build }}$/${{ file_script_web_build.data.sphinx_builder }}$
  binder:
    path:
      config: .binder_config
      dockerfile: .binder
    image:
      test_script: '${{ pypkg_test.entry.cli.main.name }}$'
  publish:
    anaconda:
      name: Publish (Anaconda)
      task_name: '{{ pkg.name }} v{{ version }}'
      env:
        name: Anaconda ({{ pkg.name }})
        url: https://anaconda.org/${{ ..index.channel }}$/{{ pkg.name }}/files?version={{ version }}
      index:
        channel: ${{ repo.owner }}$
      action:
        pkg: auto
        test: auto
    pypi:
      name: Publish (PyPI)
      task_name: '{{ pkg.name }} v{{ version }}'
      env:
        name: PyPI ({{ pkg.name }})
        url: https://pypi.org/project/{{ pkg.name }}/{{ version }}
      index:
        url:
          upload: https://upload.pypi.org/legacy/
      action:
        pkg: auto
        test: auto
    testpypi:
      name: Publish (TestPyPI)
      task_name: '{{ pkg.name }} v{{ version }}'
      env:
        name: TestPyPI ({{ pkg.name }})
        url: https://test.pypi.org/project/{{ pkg.name }}/{{ version }}
      index:
        url:
          upload: https://test.pypi.org/legacy/
      action:
        pkg: auto
        test: auto
    github:
      name: Release
      task_name: GitHub
      env:
        name: GitHub Release
        url: ${{ repo.url.deployments.home }}$
      release:
        body:
          body: ${{ __temp__.changelog.body }}$
          sections: ${{ __temp__.changelog.sections }}$
      asset:
        template:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}.zip
          label: ${{ name }}$
          format: zip
          files:
            - source: template
            - source: .github/workflows
              destination: .github/workflows
        sdist:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}-sdists.zip
          label: Source Distributions
          format: zip
          files:
            - pattern: '^[^/]+ - sdist/[^/]+\.tar\.gz$'
              artifact: true
        wheel:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}-wheels.zip
          label: Binary Distributions
          format: zip
          files:
            - pattern: '^[^/]+ - wheels/[^/]+\.whl$'
              artifact: true
        conda:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}-conda.zip
          label: Conda Distributions
          format: zip
          files:
            - pattern: '^[^/]+ - conda/.+\.conda$'
              artifact: true
        dockerfile:
          name: Dockerfile
          label: Dockerfile
          files:
            - source: ${{ workflow.binder.path.dockerfile }}$/Dockerfile
          media_type: text/plain
        docs:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}-docs.zip
          label: Documentation
          format: zip
          files:
            - pattern: '^Website(?!.*GH-Pages)[^/]*$'
              artifact: true
        license:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}-license.zip
          label: License
          format: zip
          files:
            - pattern: '^(LICENSE|COPYING)[^/]*$'
        citation:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}-citation.cff
          label: Citation
          files:
            - source: CITATION.cff
          media_type: application/yaml
    zenodo:
      name: Release
      task_name: Zenodo
      env:
        name: Zenodo
        url: https://zenodo.org/records/{{ id }}
      asset: ${{ workflow.publish.github.asset }}$
    zenodo_sandbox:
      name: Release
      task_name: Zenodo Sandbox
      env:
        name: Zenodo Sandbox
        url: https://sandbox.zenodo.org/records/{{ id }}
      asset: ${{ workflow.publish.github.asset }}$
  schedule:
    cca:
      cron: '43 23 * * *'  # Every day at 23:43 UTC.
      branch_types: [ main, release, pre ]
      job:
        sync:
          action: pull
        announcement_expiry:
          action: commit
    cr_ct:
      cron: '43 6 * * 6'  # Every Saturday at 6:43 UTC.
      branch_types: [ main, release ]
      job:
        lint:
          action: issue
        refactor:
          action: pull
        test:
          action: issue
