color:
  primary:
    light: rgb(0 85 0)
    dark: rgb(28 170 0)
  secondary:
    light: rgb(60 85 0)  # rgb(5 80 5)
    dark: rgb(175 138 0)  # rgb(156 204 0)
  accent:
    light: rgb(19 84 0)
    dark: rgb(69 155 36)
  heading: ${{ color.primary }}$
document:
  readme:
    output:
      repo:
        path: README.md
      pkg:
        path: ${{ pkg.path.root }}$/${{ pkg.readme.file }}$
        target: pypi
    content:
      body:
        - class: block_image
          src: ${{ web.file.logo_full_light.url }}$
          src_dark: ${{ web.file.logo_full_dark.url }}$
          title: Welcome to ${{ name }}$! Click to visit our website and learn more.
          alt: '${{ name }}$: ${{ title }}$'
          align: center
          width: 100%
          link: ${{ web.url.home }}$
        - class: menu
          items:
            - text: Intro
              link: ${{ web.page.intro.url }}$
              title: Introduction and Background
            - text: Manual
              link: ${{ web.page.manual.url }}$
              title: User Manual
            - text: News
              link: ${{ web.page.blog.url }}$
              title: Latest News and Releases
            - text: Contribute
              link: ${{ web.page.contribute.url }}$
              title: How to Contribute
            - text: About
              link: ${{ web.page.about.url }}$
              title: About the Project
            - text: Help
              link: ${{ web.page.help.url }}$
              title: Get Help and Support
          line_top_width: 100%
          line_bottom_width: 100%
          style: for-the-badge
          color: ${{ color.primary.light }}$
          color_dark: ${{ color.primary.dark }}$
          height: 33px
          attrs_container:
            align: center
        - - class: badge
            service: static
            label: Keywords
            args:
              message: ${{ keywords[0] }}$
            style: ${{ __custom__.badge.style }}$
            height: ${{ __custom__.badge.height }}$
            color: ${{ __custom__.badge.color.blue }}$
            label_color: ${{ __custom__.badge.color.grey }}$
          - '&nbsp;'
          - class: buttons
            items: ${{ keywords[1:] }}$
            style: ${{ __custom__.badge.style }}$
            height: ${{ __custom__.badge.height }}$
            color: ${{ __custom__.badge.color.blue }}$
        - class: paragraph
          content: ${{ abstract }}$
          attrs:
            align: justify
        - class: badges
          service: static
          style: ${{ __custom__.badge.style }}$
          height: ${{ __custom__.badge.height }}$
          color: ${{ __custom__.badge.color.blue }}$
          label_color: ${{ __custom__.badge.color.grey }}$
          separator: ${{ __custom__.badge.separator }}$
          items:
            - |
              *{{
                #{{
                  out = []
                  doi = get("var.zenodo.concept.doi")
                  if doi:
                    zenodo = {
                      "label": "DOI",
                      "args": {"message": doi},
                      "logo": "zenodo",
                      "logo_type": "name",
                      "color": "#1682D4",
                      "link": f"https://doi.org/{doi}"
                    }
                    out.append(zenodo)
                  if get("pkg.pypi.publishable") and get("workflow.publish.pypi"):
                    pypi = {
                      "label": "pip install ",
                      "args": {"message": get("pkg.name").lower()},
                      "logo": f"{get("web.path.source")}/_media/logo_ext/pypi.png",
                      "logo_type": "file",
                      "logo_media_type": "png",
                      "color": "#3775A9",
                      "link": get("pkg.pypi.url.home"),
                    }
                    out.append(pypi)
                  publish_conda = get("workflow.publish.conda-forge") or get("workflow.publish.anaconda")
                  if publish_conda:
                    conda = {
                      "label": "conda install",
                      "args": {"message": f"{get("pkg.name").lower()} -c {publish_conda["index"]["channel"].lower()}"},
                      "logo": "anaconda",
                      "logo_type": "name",
                      "logo_color": "#44A833",
                      "color": "#44A833",
                      "link": get("pkg.conda.url.home"),
                    }
                    out.append(conda)
                  publish_docker = get("workflow.binder")
                  if publish_docker:
                    index = publish_docker["index"]
                    docker = {
                        "label": "docker pull",
                        "args": {"message": f"{index["registry"]}/{index["namespace"]}/{index["name"]}:latest".lower()},
                        "logo": "docker",
                        "logo_type": "name",
                        "color": "#2496ED",
                        "logo_color": "#2496ED",
                        "link": index["url"]["home"],
                      }
                    out.append(docker)
                  if get("workflow.publish.github"):
                    github = {
                      "label": "GitHub",
                      "args": {"message": get("repo.name")},
                      "logo": "github",
                      "logo_type": "name",
                      "color": "#181717",
                      "link": get("repo.url.releases.home"),
                    }
                    out.append(github)
                  return out
                }}#
              }}*
            - service: binder
              endpoint: github
              label: Binder
              args:
                message: try online
                user: ${{ repo.owner }}$
                repo: ${{ repo.name }}$
                ref: ${{ repo.default_branch }}$
              color: "#579ACA"
              label_color: ${{ __custom__.badge.color.grey }}$
      sections:
        - heading: Highlights
          body:
            - class: highlights
              items: ${{ highlights }}$
              button:
                style: for-the-badge
                color: [ '${{ color.primary.light }}$', '${{ color.secondary.light }}$' ]
                color_dark: [ '${{ color.primary.dark }}$', '${{ color.secondary.dark }}$' ]
                height: 30px
                align: left
              attrs_p:
                align: justify
        - heading: >-
            #{{
              if changelog.current_public.get("phase") == "dev":
                return "Upcoming Release"
              return "Latest Release"
            }}#
          body: ${{ __custom__.changelog.body }}$
          sections: ${{ __custom__.changelog.sections }}$
        - heading: Statistics
          body:
            - class: table
              rows:
                - - <b>Project</b>
                  - - class: badges
                      style: ${{ __custom__.badge.style }}$
                      height: ${{ __custom__.badge.height }}$
                      color: ${{ __custom__.badge.color.blue }}$
                      separator: ${{ __custom__.badge.separator }}$
                      service: github
                      args:
                        user: ${{ repo.owner }}$
                        repo: ${{ repo.name }}$
                      items:
                        - endpoint: created_at
                          label: üóì‚ÄÇCreation Date
                        - endpoint: contributors
                          label: üßë‚ÄçüíªÔ∏è‚ÄÇContributors
                        - endpoint: language_count
                          label: üî†‚ÄÇProgramming Languages
                        - endpoint: top_language
                          logo: ${{ web.path.source }}$/_media/logo_ext/python.svg
                          logo_type: file
                          logo_media_type: svg+xml
                        - endpoint: repo_size
                          label: üöö‚ÄÇRepo Size
                        - endpoint: code_size
                          label: üöõ‚ÄÇCode Size
                - - <b>Health</b>
                  - - class: badges
                      service: github
                      style: ${{ __custom__.badge.style }}$
                      height: ${{ __custom__.badge.height }}$
                      separator: ${{ __custom__.badge.separator }}$
                      args:
                        user: ${{ repo.owner }}$
                        repo: ${{ repo.name }}$
                      items:
                        - service: codecov
                          endpoint: coverage
                          args:
                            vcs_name: github
                        - service: librariesio
                          endpoint: source_rank
                          args:
                            platform: pypi
                            package: ${{ pkg.name }}$
                        - service: librariesio
                          endpoint: dependency_status
                          args:
                            platform: pypi
                            package: ${{ pkg.name }}$
                          label: Package Dependencies
                        - service: librariesio
                          endpoint: dependency_status_github
                          args:
                            platform: github
                            package: ""
                          label: Repository Dependencies
                        - service: website
                          args:
                            url: ${{ web.url.home }}$
                            up_message: online
                            up_color: '#00802b'
                            down_message: offline
                            down_color: '#AF1F10'
                          label: Website
                - - <b>Standards</b>
                  - - class: badges
                      service: static
                      style: ${{ __custom__.badge.style }}$
                      height: ${{ __custom__.badge.height }}$
                      separator: ${{ __custom__.badge.separator }}$
                      items:
                        - label: Testing
                          args:
                            message: Pytest
                          color: "#0A9EDC"
                          logo: pytest
                          logo_color: "#0A9EDC"
                          logo_type: name
                          link: https://github.com/pytest-dev/pytest/
                        - label: Type Checking
                          args:
                            message: mypy
                          color: "#2A6DB2"
                          logo: ${{ web.path.source }}$/_media/logo_ext/mypy.svg
                          logo_type: file
                          logo_media_type: svg+xml
                          link: https://github.com/python/mypy
                        - label: Lint
                          args:
                            message: Ruff
                          color: "#D7FF64"
                          logo: ruff
                          logo_type: name
                          logo_color: "#D7FF64"
                          link: https://github.com/astral-sh/ruff
                        - label: Security
                          args:
                            message: CodeQL
                          color: "#181717"
                          logo: github
                          logo_type: name
                          link: https://codeql.github.com/
                        - label: Code Style
                          args:
                            message: Black
                          color: "#000"
                          logo: ${{ web.path.source }}$/_media/logo_ext/black.png
                          logo_type: file
                          logo_media_type: png
                          link: https://github.com/psf/black
                - - <b>Downloads</b>
                  - - - |
                        *{{
                          #{{
                            if not get("pkg.pypi.publishable"):
                              return []
                            badges = {
                              "class": "badges",
                              "style": get("__custom__.badge.style"),
                              "height": get("__custom__.badge.height"),
                              "color": get("__custom__.badge.color.blue"),
                              "separator": 1,
                              "service": "pypi",
                              "endpoint": "downloads",
                              "args": {"package": get("pkg.name")},
                              "logo": "",
                              "label": "",
                              "items": [
                                {
                                  "service": "pepy",
                                  "endpoint": "total_downloads",
                                  "label": "PyPI",
                                  "logo": f"{get("web.path.source")}/_media/logo_ext/pypi.png",
                                  "logo_type": "file",
                                  "logo_media_type": "png",
                                },
                              ] + [{"args": {"period": period}} for period in ("m", "w", "d")]
                            }
                            return [badges, "&nbsp;" * get("__custom__.badge.separator")]
                          }}#
                        }}*
                      - |
                        *{{
                          #{{
                            conda = get("workflow.publish.conda-forge") or get("workflow.publish.anaconda")
                            if not conda:
                              return []
                            badge = {
                              "class": "badge",
                              "style": get("__custom__.badge.style"),
                              "height": get("__custom__.badge.height"),
                              "color": get("__custom__.badge.color.blue"),
                              "service": "conda",
                              "endpoint": "downloads",
                              "args": {"channel": conda.get("index", {}).get("channel", "conda-forge").lower(), "package": get("pkg.name").lower()},
                              "label": "Conda",
                              "logo": "anaconda",
                              "logo_color": "#44A833",
                            }
                            return [badge, "&nbsp;" * get("__custom__.badge.separator")]
                          }}#
                        }}*
                      - class: badge
                        style: ${{ __custom__.badge.style }}$
                        height: ${{ __custom__.badge.height }}$
                        color: ${{ __custom__.badge.color.blue }}$
                        service: github
                        endpoint: downloads_all_releases
                        label: GitHub
                        args:
                          user: ${{ repo.owner }}$
                          repo: ${{ repo.name }}$
                - - <b>Users</b>
                  - - class: badges
                      style: ${{ __custom__.badge.style }}$
                      height: ${{ __custom__.badge.height }}$
                      color: ${{ __custom__.badge.color.blue }}$
                      separator: ${{ __custom__.badge.separator }}$
                      service: librariesio
                      args:
                        platform: pypi
                        package: ${{ pkg.name }}$
                      items:
                        - endpoint: dependents
                          label: Dependent Packages
                        - endpoint: dependents
                          args:
                            repo: true
                          label: Dependent Repositories
                - |
                  *{{
                    #{{
                      out = []
                      label_data = [("Total", None)] + [
                        (badge_label, get(f"label.type.label.{label_type}.name"))
                        for badge_label, label_type in (
                          (f"{get(f"__custom__.icon.fix")}‚ÄÇBug Fixes", "fix"),
                          (f"{get(f"__custom__.icon.feat")}‚ÄÇNew Features", "feat"),
                          (f"{get(f"__custom__.icon.change")}‚ÄÇBreaking Changes", "change"),
                        )
                      ]
                      repo_owner = get("repo.owner")
                      repo_name = get("repo.name")
                      color_open = get("__custom__.badge.color.red")
                      color_closed = get("__custom__.badge.color.green")
                      style = get("__custom__.badge.style")
                      height = get("__custom__.badge.height")
                      separator = get("__custom__.badge.separator")
                      for title, issue_kind in (
                        ("Issues", "issues"),
                        ("PRs", "pulls"),
                      ):
                        badges = []
                        for badge_label, issue_label in label_data:
                          badges_config = {
                            "class": "badges",
                            "service": "github",
                            "endpoint": "issue_count",
                            "args": {"user": repo_owner, "repo": repo_name, "kind": issue_kind, "label": issue_label},
                            "style": style,
                            "height": height,
                            "separator": 0,
                            "items": [
                              {"args": {"state": "open"}, "label": badge_label, "color": color_open},
                              {"args": {"state": "closed"}, "label": "", "color": color_closed},
                            ],
                          }
                          badges.extend([badges_config, "&nbsp;" * separator])
                        out.append([f"<b>{title}</b>", [badges]])
                      return out
                    }}#
                  }}*
                - - <b>Commits</b>
                  - - class: badges
                      style: ${{ __custom__.badge.style }}$
                      height: ${{ __custom__.badge.height }}$
                      color: ${{ __custom__.badge.color.blue }}$
                      separator: ${{ __custom__.badge.separator }}$
                      service: github
                      endpoint: commit_activity
                      args:
                        user: ${{ repo.owner }}$
                        repo: ${{ repo.name }}$
                      items:
                        - args:
                            interval: t
                          label: Total
                          logo: git
                          logo_type: name
                          logo_color: "#F05032"
                        - args:
                            interval: y
                          label: ""
                        - args:
                            interval: m
                          label: ""
                        - args:
                            interval: w
                          label: ""
                        - endpoint: commits_since_latest_release
                          label: Since Latest Release
                        - endpoint: last_commit
                          label: Last
                - - <b>Discussions</b>
                  - - class: badges
                      style: ${{ __custom__.badge.style }}$
                      height: ${{ __custom__.badge.height }}$
                      color: ${{ __custom__.badge.color.blue }}$
                      separator: ${{ __custom__.badge.separator }}$
                      service: github
                      endpoint: discussion_search_hits
                      args:
                        user: ${{ repo.owner }}$
                        repo: ${{ repo.name }}$
                      items:
                        - |
                          *{{
                            #{{
                              return [
                                {
                                  "args": {"query": f'category:"{category["name"]}"'},
                                  "label": f"{category["emoji"]}‚ÄÇ{category["name"]}",
                                  "title": category["description"],
                                } for category in get("discussion.category", {}).values()
                              ]
                            }}#
                          }}*
                - - <b>Community</b>
                  - - class: badges
                      style: ${{ __custom__.badge.style }}$
                      height: ${{ __custom__.badge.height }}$
                      color: ${{ __custom__.badge.color.blue }}$
                      separator: ${{ __custom__.badge.separator }}$
                      service: github
                      args:
                        user: ${{ repo.owner }}$
                        repo: ${{ repo.name }}$
                      logo: github
                      items:
                        - endpoint: forks
                        - endpoint: stars
                        - endpoint: watchers
                - - <b>DevOps</b>
                  - - class: badges
                      style: ${{ __custom__.badge.style }}$
                      height: ${{ __custom__.badge.height }}$
                      separator: ${{ __custom__.badge.separator }}$
                      service: github
                      args:
                        user: ${{ repo.owner }}$
                        repo: ${{ repo.name }}$
                      items:
                        - endpoint: workflow_status
                          logo: github
                          logo_type: name
                          args:
                            workflow: main.yaml
                          label: CI
                        - |
                          *{{
                            #{{
                              import jinja2

                              out = []
                              for platform in ("pypi", "testpypi"):
                                env = get(f"workflow.publish.{platform}.env")
                                if env:
                                  for pkg_key in ("pkg", "test"):
                                    pkg_name = get(f"{pkg_key}.name")
                                    if pkg_name:
                                      env_name = jinja2.Template(env["name"]).render(
                                        pkg={"name": pkg_name}
                                      )
                                      badge = {
                                        "endpoint": "deployment_status",
                                        "args": {"environment": env_name},
                                        "logo": f"{get("web.path.source")}/_media/logo_ext/pypi.png",
                                        "logo_type": "file",
                                        "logo_media_type": "png",
                                      }
                                      out.append(badge)
                              for platform in ("zenodo", "zenodo_sandbox"):
                                env = get(f"workflow.publish.{platform}.env")
                                if env:
                                  badge = {
                                    "endpoint": "deployment_status",
                                    "args": {"environment": env["name"]},
                                    "logo": "zenodo",
                                    "logo_type": "name",
                                  }
                                  out.append(badge)
                              github_env = get("workflow.publish.github.env")
                              if github_env:
                                badge = {
                                  "endpoint": "deployment_status",
                                  "args": {"environment": github_env["name"]},
                                  "logo": "github",
                                  "logo_type": "name",
                                }
                                out.append(badge)
                              web_env = get("workflow.web.env")
                              if web_env:
                                badge = {
                                  "endpoint": "deployment_status",
                                  "args": {"environment": web_env["name"]},
                                  "logo": "github",
                                  "logo_type": "name",
                                }
                                out.append(badge)
                              rtd_name = get("tool.readthedocs.config.workflow.name")
                              if rtd_name:
                                badge = {
                                  "service": "readthedocs",
                                  "endpoint": "build_status",
                                  "args": {"name": rtd_name},
                                  "label": "CD ReadTheDocs",
                                }
                                out.append(badge)
                              return out
                            }}#
                          }}*
        - heading: Acknowledgements
          body:
            - ${{ name }}$ was developed in [Volkamer Lab](https://volkamerlab.org/).
      footer:
        - class: thematic_break
        - class: badges
          style: for-the-badge
          items:
            - service: dynamic
              args:
                url: ${{ control.url.metadata }}$
                query: '$.copyright'
              label: ${{ name }}$
              color: ${{ color.primary.light }}$
              logo: ${{ web.file.icon.path }}$
              logo_type: file
              color_dark: ${{ color.primary.dark }}$
              logo_dark: ${{ web.file.icon.path }}$
              logo_type_dark: file
              link: ${{ team.owner.github.url }}$
              title: '${{ name }}$: Copyright ${{ copyright }}$'
              alt: ${{ .title }}$
              align: left
            - service: static
              args:
                message: ${{ license.expression }}$
              label: SPDX License Identifier
              color: "#4398CC"
              logo: spdx
              logo_color: "#4398CC"
              link: ${{ web.page.license.url }}$
              title: 'SPDX-License-Identifier: ${{ license.expression }}$'
              alt: 'SPDX-License-Identifier: ${{ license.expression }}$'
              align: right
  code_of_conduct:
    output:
      repo:
        path: CODE_OF_CONDUCT.md
    content:
      class: covenant_code_of_conduct
      contact_name: |
        #{{
          return team_members_with_role_ids(
            "coc",
            active_only=True,
          )[0]["email"]["id"]
        }}#
      contact_url: |
        #{{
          return team_members_with_role_ids(
            "coc",
            active_only=True,
          )[0]["email"]["url"]
        }}#
  contributing:
    output:
      repo:
        path: CONTRIBUTING.md
    content:
      heading: ${{ name }}$ Contributing Guidelines
      body:
        - class: paragraph
          attrs:
            align: justify
          content: |
            Welcome to the <em>${{ name }}$</em> community!
            We are excited to have you here,
            and grateful that you are considering contributing.
            ${{ name }}$ is a free and open-source project that evolves with the needs of its users,
            and can only grow through the help of great members like you.
      sections:
        - heading: How To Contribute
          body:
            - class: paragraph
              attrs:
                align: justify
              content: |
                To keep all our project documentation organized and easy to find, the complete
                <a href="${{ web.page.contribute.url }}$">contribution guide</a> is hosted on our website.
      footer: ${{ document.readme.content.footer }}$
  security:
    output:
      repo:
        path: SECURITY.md
    content:
      heading: Security Policy
      footer: ${{ document.readme.content.footer }}$
web:
  toc:
    path: .toc.yaml
    root: index
    defaults:
      hidden: true
    entries:
      - file: intro/index
        title: Intro
        options:
          numbered: true
        entries:
          - file: intro/motivation/index
          - file: intro/overview/index
          - file: intro/background/index
            entries:
              - file: intro/background/methodologies/index
              - file: intro/background/github/index
              - file: intro/background/python/index
                entries:
                  - file: intro/background/python/pypi/index
                  - file: intro/background/python/pip/index
                  - file: intro/background/python/packaging/index
                  - file: intro/background/python/governance/index
              - file: intro/background/conda/index
                entries:
                  - file: intro/background/conda/packaging/index
              - file: intro/background/versioning/index
              - file: intro/background/jsonpath/index
              - file: intro/background/yaml/index
              - file: intro/background/toml/index
              - file: intro/background/jinja/index
              - file: intro/background/markdown/index
          - file: intro/glossary/index
          - file: intro/references/index
      - file: manual/index
        title: Manual
        options:
          numbered: true
        entries:
          - file: manual/install/index
            entries:
              - file: manual/install/new/index
              - file: manual/install/existing/index
              - file: manual/install/upgrade/index
              - file: manual/install/common/index
          - file: manual/quickstart/index
          - file: manual/config/index
            entries:
              - file: manual/config/location/index
              - file: manual/config/structure/index
              - file: manual/config/options/index
              - file: manual/config/synchronization/index
              - file: manual/config/outputs/index
              - file: manual/config/templating/index
              - file: manual/config/inheritance/index
              - file: manual/config/hooks/index
              - file: manual/config/caching/index
      - file: api/index
        title: API
        entries:
          - file: api/metadata/index
          - file: api/local/index
          - file: api/changelog/index
          - file: api/variables/index
          - file: api/contributors/index
          - file: api/cache/index
          - file: api/refs/index
      - file: news/index
        title: News
        entries:
          - glob: news/post/**
      - file: contribute/index
        title: Contribute
        options:
          numbered: true
        entries:
          - file: contribute/feedback/index
            entries:
              - file: contribute/feedback/security/index
              - file: contribute/feedback/bug/index
          - file: contribute/develop/index
          - file: contribute/support/index
      - file: about/index
        title: About
        options:
          numbered: true
        entries:
          - file: about/citation/index
          - file: about/contact/index
          - file: about/license/index
            entries:
              - glob: about/license/*/index
      - file: help/index
        title: Help
        options:
          numbered: true
        entries:
          - file: help/website/index
            entries:
              - file: help/website/tips/index
              - file: help/website/api/index
  sphinx:
    config:
      trim_footnote_reference_space: true
      math_eqref_format: Eq. {number}
      math_number_all: true
      math_numfig: true
      math_numsep: .
      nitpicky: true
      maximum_signature_line_length: 80
      root_doc: index
      templates_path:
        - _templates  # Ref: https://www.sphinx-doc.org/en/master/development/templating.html
      show_warning_types: true
      html_title: ${{ name }}$
      html_short_title: ${{ name }}$
      html_baseurl: ${{ web.url.base }}$
      html_favicon: ${{ web.file.icon.rel_path }}$
      html_sidebars:
        "${{ web.page.blog.path }}$/**":
          - ablog/postcard.html
          - ablog/recentposts.html
          - ablog/tagcloud.html
          - ablog/categories.html
          - ablog/archives.html
          - ablog/authors.html
      html_static_path:
        - _static
        # Due to an issue with the PyData Sphinx Theme,
        #    the logo files used in the navbar must be explicitly
        #    added to the root of static path, since PyData always looks there,
        #    regardless of the set path.
        #    Refs:
        #    - https://github.com/pydata/pydata-sphinx-theme/issues/1325
        #    - https://github.com/pydata/pydata-sphinx-theme/issues/1328
        #    - https://github.com/pydata/pydata-sphinx-theme/issues/1385
        - '${{ web.file.logo_simple_light.rel_path }}$'
        - '${{ web.file.logo_simple_dark.rel_path }}$'
      html_css_files:
        - https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css
      html_js_files:
        - https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js
      html_secnumber_suffix: ".‚ÄÇ"
      html_extra_path: [ ]
      html_use_opensearch: ${{ web.url.base }}$
      html_show_sphinx: false
      html_math_renderer: mathjax
      html_context:
        # Used by the Giscus template to extract page title
        pp_title_sep: ${{ web.sphinx.config.html_secnumber_suffix }}$
      html_last_updated_fmt: '%b %d, %Y'
      numfig_format:
        code-block: Code %s
        figure: Figure %s
        section: Section
        table: Table %s
      language: en
      latex_engine: lualatex
      latex_elements:
        papersize: a4paper
        pointsize: 11pt
        figure_align: htbp
        fontpkg: |
          \setmainfont{DejaVu Serif}
          \setsansfont{DejaVu Sans}
          \setmonofont{DejaVu Sans Mono}
        preamble: |
          \usepackage[titles]{tocloft}
          \usepackage{fontspec}
          \cftsetpnumwidth {1.25cm}\cftsetrmarg{1.5cm}
          \setlength{\cftchapnumwidth}{0.75cm}
          \setlength{\cftsecindent}{\cftchapnumwidth}
          \setlength{\cftsecnumwidth}{1.25cm}
        fncychap: '\usepackage[Bjornstrup]{fncychap}'
        printindex: '\footnotesize\raggedright\printindex'
      latex_theme: manual
      latex_show_urls: footnote
      latex_show_pagerefs: true
      latex_logo: ${{ web.file.logo_full_raster.rel_path }}$
      python_display_short_literal_types: true
      python_maximum_signature_line_length: 80
      suppress_warnings:
        - etoc.toctree
    extension:
      # Sphinx's built-in extensions: https://www.sphinx-doc.org/en/master/usage/extensions/index.html#built-in-extensions
      autosummary:
        dependency:
          import_name: sphinx.ext.autosummary
          url:
            docs: https://www.sphinx-doc.org/en/master/usage/extensions/autosummary.html
        config:
          autosummary_generate: true
          autosummary_generate_overwrite: true
          autosummary_imported_members: false
          autosummary_ignore_module_all: false
      extlinks:
        dependency:
          import_name: sphinx.ext.extlinks
      duration:
        dependency:
          import_name: sphinx.ext.duration
      doctest:
        dependency:
          import_name: sphinx.ext.doctest
      autodoc:
        dependency:
          import_name: sphinx.ext.autodoc
      mathjax:
        dependency:
          import_name: sphinx.ext.mathjax
      linkcode:
        # For configuration see `linkcode_resolve` function in `conf.py`.
        dependency:
          import_name: sphinx.ext.linkcode
          description: Linking source code to documentation.
          url:
            docs: https://www.sphinx-doc.org/en/master/usage/extensions/linkcode.html
      intersphinx:
        dependency:
          import_name: sphinx.ext.intersphinx
          description: Adding links to external documentation.
          notes: |
            This is also required for the
            [ABlog extension](https://ablog.readthedocs.io/en/stable/index.html#getting-started).
          url:
            docs: https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html
        config:
          intersphinx_mapping:
            # When `intersphinx_registry` (see `env` key) is used,
            # you can specify keys without values;
            # these will be automatically filled in by the registry.
            python: [ 'https://docs.python.org/3/', null ]
            numpy: null
            scipy: null
            matplotlib: null
      ifconfig:
        dependency:
          import_name: sphinx.ext.ifconfig
          description: Conditional content in Sphinx.
          url:
            docs: https://www.sphinx-doc.org/en/master/usage/extensions/ifconfig.html
  theme:
    config:
      # https://pydata-sphinx-theme.readthedocs.io/en/stable/user_guide/layout.html#references
      html_theme_options:
        # ---- Section Layout ----
        # -- Header --
        navbar_start: [ navbar-logo ]  # header left
        navbar_center: [ navbar-nav ]  # header center
        navbar_persistent: [ search-button, theme-switcher, user_login_button ]  # header right persistent
        navbar_end: [ navbar-icon-links ]  # header right
        navbar_align: left  # alignment of `navbar_center`: {"left", "right", "content"}
        # -- Article Header --
        article_header_start: [ breadcrumbs ]  # article header left
        article_header_end: [ ]  # article header right
        # -- Article Footer --
        article_footer_items: [ ]  # article footer
        # -- Primary Sidebar (left) --
        primary_sidebar_end: [ ]  # left sidebar bottom
        # -- Secondary Sidebar (right) --
        secondary_sidebar_items:
          - page-toc
          - last-updated
          - edit-this-page
        # -- Content Footer --
        content_footer_items: [ user_login_dialog ]
        # -- Footer --
        footer_start: [ footer_badges ]  # footer left
        footer_center: [ ]  # footer center
        footer_end: [ quicklinks ]  # footer right
        # ---- General ----
        show_prev_next: True
        show_nav_level: 1
        navigation_depth: 5
        show_toc_level: 5
        header_links_before_dropdown: 7
        icon_links:
          - name: Source Repository
            icon: fa-brands fa-github
            url: ${{ repo.url.home }}$
          - name: Issues
            icon: fa-regular fa-circle-dot
            url: ${{ repo.url.issues.home }}$
          - name: Pull Requests
            icon: fa-solid fa-code-pull-request
            url: ${{ repo.url.pulls.home }}$
          - name: Discussions
            icon: fa-solid fa-comments
            url: ${{ repo.url.discussions.home }}$
          - name: License
            icon: fa-solid fa-copyright
            url: ${{ web.page.license.url }}$
        icon_links_label: External links
        use_edit_page_button: true
        announcement: ${{ web.announcement.url }}$
        search_bar_text: Search ${{ name }}$
        back_to_top_button: true
        logo:
          image_light: _static/simple_light.svg
          image_dark: _static/simple_dark.svg
          alt_text: ${{ name }}$
        pygments_light_style: default  # Code highlighting color themes. See: https://pygments.org/styles/
        pygments_dark_style: monokai   # https://pydata-sphinx-theme.readthedocs.io/en/stable/user_guide/styling.html#configure-pygments-theme
        sidebarwidth: 270
        sidebar_includehidden: True
        # ---- Analytics ----
        analytics:
          google_analytics_id: G-0X66W6TGL2
      html_context:
        github_user: ${{ repo.owner }}$
        github_repo: ${{ repo.name }}$
        github_version: ${{ repo.default_branch }}$
        doc_path: ${{ web.path.source }}$
        default_mode: auto  # Default theme mode: {'light', 'dark', 'auto'}
  extension:
    # Resources:
    # - https://www.sphinx-doc.org/en/master/usage/extensions/index.html#third-party-extensions
    myst-nb:
      dependency:
        import_name: myst_nb
        description: Adding MyST Markdown and Jupyter support to Sphinx.
        note: |
          MyST-NB is built on top of [MyST-Parser](https://myst-parser.readthedocs.io/)
          and exposes all of its functionalities. It also includes support for Jupyter Notebooks.
          When using MyST-NB, MyST-Parser must not be included separately.
        url:
          source: https://github.com/executablebooks/MyST-Parser
          docs: https://myst-parser.readthedocs.io/
          pip: https://pypi.org/project/myst-nb/
          conda: https://anaconda.org/conda-forge/myst-nb
        pip:
          spec: myst-nb == 1.1.2
        conda:
          spec: myst-nb = 1.1.2
          channel: conda-forge
      config:
        # ---- MyST Parser Configurations ----
        # Ref: https://myst-parser.readthedocs.io/en/latest/configuration.html
        myst_enable_extensions: # https://myst-parser.readthedocs.io/en/latest/syntax/optional.html
          - amsmath
          - attrs_inline
          - attrs_block
          - colon_fence
          - deflist
          - dollarmath
          - fieldlist
          - html_admonition
          - html_image
          - linkify
          - replacements
          - smartquotes
          - substitution
          - tasklist
        myst_links_external_new_tab: true
        myst_heading_anchors: 6
        myst_fence_as_directive: [ mermaid ]  # https://github.com/mgaitan/sphinxcontrib-mermaid?tab=readme-ov-file#markdown-support
        myst_linkify_fuzzy_links: false
    thebe:
      dependency:
        import_name: sphinx_thebe
        description: Make code cells interactive in Sphinx.
        url:
          source: https://github.com/executablebooks/sphinx-thebe
          docs: https://sphinx-thebe.readthedocs.io
          pip: https://pypi.org/project/sphinx-thebe/
          conda: https://anaconda.org/conda-forge/sphinx-thebe
        pip:
          spec: sphinx-thebe == 0.3.1
        conda:
          spec: sphinx-thebe = 0.3.1
          channel: conda-forge
    design:
      dependency:
        import_name: sphinx_design
        description: Adding responsive web components, such as grids, cards, tabs, etc.
        url:
          docs: https://sphinx-design.readthedocs.io/
          pip: https://pypi.org/project/sphinx_design/
          source: https://github.com/executablebooks/sphinx-design
        pip:
          spec: sphinx-design == 0.6.1
        conda:
          spec: sphinx-design = 0.6.1
          channel: conda-forge
      config:
        sd_fontawesome_latex: true
    ext_toc:
      dependency:
        import_name: sphinx_external_toc
        description: Adding external table of contents to Sphinx.
        url:
          source: https://github.com/executablebooks/sphinx-external-toc
          docs: https://sphinx-external-toc.readthedocs.io
          pip: https://pypi.org/project/sphinx_external_toc/
          conda: https://anaconda.org/conda-forge/sphinx-external-toc
        pip:
          spec: sphinx_external_toc == 1.0.1
        conda:
          spec: sphinx-external-toc = 1.0.1
          channel: conda-forge
      config:
        external_toc_path: ${{ web.toc.path }}$
        external_toc_exclude_missing: false
    ablog:
      dependency:
        import_name: ablog
        description: Adding a news blog to the website.
        url:
          docs: https://ablog.readthedocs.io/
          pip: https://pypi.org/project/ablog/
          source: https://github.com/sunpy/ablog
          docs_config:
            title: Configuration Docs
            url: https://ablog.readthedocs.io/en/stable/manual/ablog-configuration-options.html
        pip:
          spec: ablog == 0.11.12
        conda:
          spec: ablog = 0.11.12
          channel: conda-forge
      config:
        # blog_authors (if not explicitly set here) is dynamically generated in conf.py from `team` data.
        blog_baseurl: ${{ web.url.base }}$
        blog_default_author: owner
        blog_feed_archives: true
        blog_path: ${{ web.page.blog.path }}$/list
        blog_post_pattern:
          - ${{ web.page.blog.path }}$/post/*.md
        post_show_prev_next: false
        blog_title: ${{ name }}$ News
        fontawesome_included: true
        post_always_section: true
        post_auto_image: 1
    copy_button:
      dependency:
        import_name: sphinx_copybutton
        description: Adding a copy button to code blocks.
        url:
          docs: https://sphinx-copybutton.readthedocs.io/
          pip: https://pypi.org/project/sphinx-copybutton/
          source: https://github.com/executablebooks/sphinx-copybutton
        pip:
          spec: sphinx-copybutton == 0.5.2
        conda:
          spec: sphinx-copybutton = 0.5.2
          channel: conda-forge
    last_update:
      dependency:
        import_name: sphinx_last_updated_by_git
        pip:
          spec: sphinx-last-updated-by-git == 0.3.8
        description: Adding page-specific last-updated dates to each page.
        url:
          docs: https://sphinx-last-updated-by-git.readthedocs.io/
          pip: https://pypi.org/project/sphinx-last-updated-by-git/
          source: https://github.com/mgeier/sphinx-last-updated-by-git
    opengraph:
      dependency:
        import_name: sphinxext.opengraph
        description: |
          Generating [Open Graph](https://ogp.me/) metadata for each page.
        url:
          docs: https://sphinxext-opengraph.readthedocs.io/
          source: https://github.com/wpilibsuite/sphinxext-opengraph/
          pip: https://pypi.org/project/sphinxext-opengraph
          conda: https://anaconda.org/conda-forge/sphinxext-opengraph
        pip:
          spec: sphinxext-opengraph == 0.9.1
        conda:
          spec: sphinxext-opengraph = 0.9.1
          channel: conda-forge
      config:
        ogp_site_url: ${{ web.url.base }}$
        ogp_use_first_image: true
        ogp_enable_meta_description: true
        ogp_social_cards:
          image: _static/simple_light.svg
          line_color: ${{ color.primary.light }}$
    bibtex:
      dependency:
        import_name: sphinxcontrib.bibtex
        description: Adding BibTeX-style citations.
        url:
          docs: https://sphinxcontrib-bibtex.readthedocs.io/
          source: https://github.com/mcmtroffaes/sphinxcontrib-bibtex
          pip: https://pypi.org/project/sphinxcontrib-bibtex/
          conda: https://anaconda.org/conda-forge/sphinxcontrib-bibtex
        pip:
          spec: sphinxcontrib-bibtex == 2.6.3
        conda:
          spec: sphinxcontrib-bibtex = 2.6.3
          channel: conda-forge
      config:
        bibtex_bibfiles: [ refs.bib ]
        bibtex_default_style: plain
        bibtex_reference_style: label
    toggle_button:
      dependency:
        import_name: sphinx_togglebutton
        description: Adding toggle buttons to admonitions and other content.
        url:
          docs: https://sphinx-togglebutton.readthedocs.io/
          pip: https://pypi.org/project/sphinx-togglebutton/
          source: https://github.com/executablebooks/sphinx-togglebutton
        pip:
          spec: sphinx-togglebutton == 0.3.2
        conda:
          spec: sphinx-togglebutton = 0.3.2
          channel: conda-forge
      config:
        # https://sphinx-togglebutton.readthedocs.io/en/latest/use.html#change-the-button-hint-text
        togglebutton_hint: show details
        togglebutton_hint_hide: hide details
    mermaid:
      dependency:
        import_name: sphinxcontrib.mermaid
        description: Adding Mermaid diagrams and charts.
        url:
          docs: https://sphinxcontrib-mermaid-demo.readthedocs.io/en/stable/
          pip: https://pypi.org/project/sphinxcontrib-mermaid/
          source: https://github.com/mgaitan/sphinxcontrib-mermaid
        pip:
          spec: sphinxcontrib-mermaid == 1.0.0
        conda:
          spec: sphinxcontrib-mermaid = 1.0.0
          channel: conda-forge
    svg2pdf:
      dependency:
        import_name: sphinxcontrib.rsvgconverter
        description: Converting SVG images to PNG for LaTeX.
        pip:
          spec: sphinxcontrib-svg2pdfconverter[CairoSVG] == 1.2.3
        url:
          pip: https://pypi.org/project/sphinxcontrib-svg2pdfconverter/
          source: https://github.com/missinglinkelectronics/sphinxcontrib-svg2pdfconverter
        notes: |
          This doesn't work on `latex_logo`;
          see [nbsphinx](https://nbsphinx.readthedocs.io/en/latest/markdown-cells.html).
    tippy:
      dependency:
        import_name: sphinx_tippy
        description: Adding rich hover tooltips to content.
        url:
          docs: https://sphinx-tippy.readthedocs.io
          source: https://github.com/sphinx-extensions2/sphinx-tippy
          pip: https://pypi.org/project/sphinx_tippy
        pip:
          spec: sphinx-tippy == 0.4.3
      config:
        tippy_props:
          placement: auto-start  # https://atomiks.github.io/tippyjs/v6/all-props/#placement
          maxWidth: 500  # https://atomiks.github.io/tippyjs/v6/all-props/#maxwidth
          theme: material  # https://atomiks.github.io/tippyjs/v6/all-props/#theme
          interactive: true  # https://atomiks.github.io/tippyjs/v6/all-props/#interactive
          delay: [ 200, 500 ]  # https://atomiks.github.io/tippyjs/v6/all-props/#delay
          duration: [ 200, 100 ]  # https://atomiks.github.io/tippyjs/v6/all-props/#duration
    not_found_page:
      dependency:
        import_name: notfound.extension
        description: Handling relative links in the custom 404 page.
        url:
          docs: https://sphinx-notfound-page.readthedocs.io/
          source: https://github.com/readthedocs/sphinx-notfound-page
          pip: https://pypi.org/project/sphinx-notfound-page/
        pip:
          spec: sphinx-notfound-page == 1.0.4
      config:
        notfound_urls_prefix: /${{ repo.name }}$/  # dynamically set in conf.py if not set here
    jsonschema:
      dependency:
        import_name: jsonschema_autodoc.sphinx
        pip:
          spec: jsonschema-autodoc
  css:
    theme_colors:
      # Colors for pydata-sphinx-theme
      # - Docs: https://pydata-sphinx-theme.readthedocs.io/en/stable/user_guide/styling.html#color-variables
      # - Source: https://github.com/pydata/pydata-sphinx-theme/blob/main/src/pydata_sphinx_theme/assets/styles/variables/_color.scss
      cases:
        light:
          selector: 'html[data-theme="light"]'
          prefix: --pst-color-
        dark:
          selector: 'html[data-theme="dark"]'
          prefix: --pst-color-
      properties: ${{ color }}$
    theme_font_sizes:
      # Font sizes for pydata-sphinx-theme.
      # - Docs: https://pydata-sphinx-theme.readthedocs.io/en/stable/user_guide/fonts.html
      # - Source: https://github.com/pydata/pydata-sphinx-theme/blob/main/src/pydata_sphinx_theme/assets/styles/variables/_fonts.scss
      selector: html
      prefix: --pst-font-size-
      properties:
        milli: 0.9rem
        base: 1rem
        # 1.2x (minor third) typographic scale starting from 1.10rem.
        # https://designcode.io/typographic-scales
        h6: 1.10rem
        h5: 1.32rem
        h4: 1.58rem
        h3: 1.90rem
        h2: 2.28rem
        h1: 2.74rem
    theme_header_color:
      cases:
        light:
          selector: html[data-theme="light"] .bd-header
        dark:
          selector: html[data-theme="dark"] .bd-header
      properties:
        background-color:
          light: white !important
          dark: black !important
    black_to_primary_filter:
      # CSS filters for transforming black to project's primary color.
      # This is used to dynamically change the color of SVG icons
      # with class name 'black-svg-icon'.
      cases:
        light:
          selector: html[data-theme="light"] .black-svg-icon
        dark:
          selector: html[data-theme="dark"] .black-svg-icon
      properties:
        filter: |
          #{{
            import pycolorit as pcit

            primary_color = get("color.primary")
            return {
                theme: pcit.css_filter.generate(pcit.color.css(primary_color[theme]))[2]
                for theme in ["light", "dark"]
            }
          }}#
  env:
    file:
      conda:
        name: ${{ repo.name }}$-docs
        path: ${{ web.path.root }}$/environment.yaml
      pip:
        path: ${{ web.path.root }}$/requirements.txt
    dependency:
      myst:
        import_name: myst_parser
        description: Adding MyST Markdown functionalities to Sphinx.
        notes: |
          This is added as a dependency and not an extension
          because the MyST-NB extension (a superset of MyST-Parser) is used as an extension,
          which already includes MyST-Parser.
          However, here we specifically include MyST-Parser to ensure the correct version is installed.
        url:
          source: https://github.com/executablebooks/MyST-Parser
          docs: https://myst-parser.readthedocs.io/
        pip:
          spec: myst-parser[linkify] == 4.0.0
        conda:
          spec: myst-parser = 4.0.0
          channel: conda-forge
      linkify:
        import_name: linkify_it
        description: |
          Linkify extension for MyST Markdown to automatically convert URLs to hyperlinks.
        url:
          docs: https://myst-parser.readthedocs.io/en/latest/syntax/optional.html#linkify
          pip: https://pypi.org/project/linkify-it-py/
        pip:
          spec: linkify-it-py == 2.0.3
        conda:
          spec: linkify-it-py == 2.0.3
          channel: conda-forge
      gittidy:
        import_name: gittidy
        description: |
          Git API to automatically retrieve project version from tags during builds.
        url:
          docs: https://gittidy.repodynamics.com
        pip:
          spec: gittidy
      versionman:
        import_name: versionman
        description: |
          Version management utilities to automatically find the latest version
          from git tags during build.
        url:
          docs: https://versionman.repodynamics.com
        pip:
          spec: versionman
      autobuild:
        import_name: sphinx-autobuild
        description: Automatically rebuilding the documentation when changes are made.
        notes: |
          This is added to the `Makefile` of Sphinx under the `livehtml` target,
          meaning that you can run `make livehtml` in the website directory
          to start the autobuild server.
        url:
          source: https://github.com/sphinx-doc/sphinx-autobuild
        pip:
          spec: sphinx-autobuild >= 2024.10.03
      librsvg:
        import_name: librsvg
        description: |
          Library for rendering SVG files and using them
          in PDF (via LaTeX) builds done by latexmk.
        conda:
          spec: librsvg
          channel: conda-forge
        url:
          docs: https://wiki.gnome.org/Projects/LibRsvg
          source: https://gitlab.gnome.org/GNOME/librsvg
      intersphinx_registry:
        import_name: intersphinx_registry
        description: |
          Registry of intersphinx mappings for external documentation.
        url:
          source: https://github.com/Quansight-labs/intersphinx_registry
          pip: https://pypi.org/project/intersphinx_registry/
          conda: https://anaconda.org/conda-forge/intersphinx-registry
        pip:
          spec: intersphinx_registry
        conda:
          spec: intersphinx-registry
          channel: conda-forge
      pygments_git_lexer:
        import_name: pygments_git
        description: |
          Pygments lexer for Git files and outputs.
        url:
          pip: https://pypi.org/project/pygments-git/
          source: https://github.com/adamchainz/pygments-git
        pip:
          spec: pygments-git == 1.8.0
      pkg_resources:
        import_name: pkgdata
        description: |
          Handling package resources, such as accessing data files that are
          distributed with the package.
        pip:
          spec: pkgdata
        url:
          docs: https://pkgdata.repodynamics.com/
          source: https://github.com/repodynamics/pkgdata
      controlman:
        import_name: controlman
        pip:
          spec: controlman
      mdit:
        import_name: mdit
        pip:
          spec: mdit
  url:
    custom:
      name: pypackit.repodynamics.com
  quicklinks:
    - links:
        - title: Outline
          path: 'intro/outline'
        - title: Background
          path: 'intro/background'
        - title: Overview
          path: 'intro/overview'
        - title: Basics
          path: 'intro/basics'
    - links:
        - title: Fundamentals
          path: 'manual/fundamentals'
        - title: Installation
          path: 'manual/install'
        - title: Control Center
          path: 'manual/control'
        - title: Usage
          path: 'manual/usage'
    - links:
        - title: Release Notes
          path: 'news/category/release'
    - links:
        - title: Q&A
          path: 'help/ask'
  announcement:
    path: ${{ web.path.root }}$/announcement.html
  file:
    icon:
      rel_path: ${{ __custom__.logo_dir_path }}$/favicon.svg
    logo_simple_light:
      rel_path: ${{ __custom__.logo_dir_path }}$/simple_light.svg
    logo_simple_dark:
      rel_path: ${{ __custom__.logo_dir_path }}$/simple_dark.svg
    logo_simple_raster:
      rel_path: ${{ __custom__.logo_dir_path }}$/simple_light.png
    logo_full_light:
      rel_path: ${{ __custom__.logo_dir_path }}$/full_light.svg
    logo_full_dark:
      rel_path: ${{ __custom__.logo_dir_path }}$/full_dark.svg
    logo_full_raster:
      rel_path: ${{ __custom__.logo_dir_path }}$/full_light.png
  page: '#{{ return hook.web_page() }}#'
