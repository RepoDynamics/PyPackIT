__temp__:
  container_env_path: /usr/local/share/environments
  dockerfile_copy_env_cmd: COPY ${{ ..path.environment }}$ ${{ __temp__.container_env_path }}$/
  dockerfile_copy_script_cmd: |
    COPY ${{ control.path.pkg_install_script }}$ ${{ devfeature_pkg_setup.feature.options.script_filepath.default }}$
    COPY .github/.repodynamics/metadata.json ${{ devfeature_pkg_setup.feature.options.metadata_filepath.default }}$
  port:
    desktop_lite:
      web: 6080
      vnc: 5901
    jupyter: 8888
  conda_env_name:
    app: app
default:
  task_setting:
    local:
      environment:
        process:
          prepend:
            - conda
            - run
            - --cwd
            - '{{ devcontainer.container.workspaceFolder }}'
            - --name
            - '{{ environment.name }}'
            - --live-stream
            - -vv
        script:
          prepend: |
            current_dir=$(pwd)
            cd '{{ devcontainer.container.workspaceFolder }}'
            conda activate '{{ environment.name }}'
          append: |
            conda deactivate
            cd "$current_dir"
      root:
        process:
          prepend:
            - conda
            - run
            - --cwd
            - '{{ devcontainer.container.workspaceFolder }}'
            - --name
            - base
            - --live-stream
            - -vv
        script:
          prepend: |
            current_dir=$(pwd)
            cd '{{ devcontainer.container.workspaceFolder }}'
          append: |
            cd "$current_dir"
    global:
      environment:
        process:
          prepend:
            - conda
            - run
            - --name
            - '{{ environment.name }}'
            - --live-stream
            - -vv
        script:
          prepend: |
            conda activate '{{ environment.name }}'
          append: |
            conda deactivate
      root:
        process:
          prepend:
            - conda
            - run
            - --name
            - base
            - --live-stream
            - -vv
devfeature_pixi:
  # See:
  # - https://github.com/prefix-dev/pixi-docker
  # - https://pixi.sh/latest/ide_integration/devcontainer/
  feature:
    name: Pixi
    description: Install Pixi in the development container and activate it.
    documentationURL: https://pixi.sh/latest/ide_integration/devcontainer/
    version: 0.40.3
    mounts:
      - type: volume
        source: ${localWorkspaceFolderBasename}-pixi
        target: ${containerWorkspaceFolder}/.pixi
    postCreateCommand: >-
      sudo chown $(whoami) .pixi &&
      echo 'eval "$(pixi completion -s bash)"' >> $HOME/.bashrc &&
      pixi install
    options:
      version:
        type: string
        description: The version of Pixi to install.
        default: ${{ ...version }}$
  install: |
    #!/usr/bin/env bash
    set -e
    curl -L -o /usr/local/bin/pixi -fsSL --compressed "https://github.com/prefix-dev/pixi/releases/download/v${VERSION}/pixi-$(uname -m)-unknown-linux-musl"
    chmod +x /usr/local/bin/pixi
    pixi info
devfeature_pkg_setup:
  feature:
    name: Package Setup
    version: 0.1.0
    description: Install local packages in development mode.
    installsAfter:
      - ghcr.io/devcontainers/features/common-utils
      - ghcr.io/devcontainers/features/conda
    postStartCommand: "/usr/local/share/app_installation/post-start-command.sh"
    options:
      packages:
        type: string
        description: >-
          Packages to install.
          This must be a string representing a JSON object,
          where keys are the name of Conda environments to use for installation.
          Each value is a JSON object with a key "packages",
          and optionally "python-version", and "sources",
          corresponding to the package installation script's input arguments.
          Note that quotes inside the JSON string must be escaped with triple backslashes.
        default: ""
      script_filepath:
        type: string
        description: Absolute path to the installation script file.
        default: /usr/local/share/app_installation/install.py
      metadata_filepath:
        type: string
        description: Absolute path to the project metadata file.
        default: /usr/local/share/app_installation/metadata.json
      log_dir:
        type: string
        description: Absolute path to a directory to write log files.
        default: /var/log/conda_setup
  install: |
    #!/usr/bin/env bash
    set -euxo pipefail

    echo "Creating log directory..."
    mkdir -p "$LOG_DIR"
    LOG_FILE="${LOG_DIR}/install.log"
    # Redirect stdout and stderr to a file
    exec > >(tee -a "$LOG_FILE") 2>&1

    # Create postStartCommand script
    POST_START_SCRIPT_DIRPATH="/usr/local/share/app_installation"
    POST_START_SCRIPT_FILEPATH="${POST_START_SCRIPT_DIRPATH}/post-start-command.sh"
    mkdir -p "$POST_START_SCRIPT_DIRPATH"
    {
      echo '#!/usr/bin/env bash'
      echo 'set -euxo pipefail'
    } > "$POST_START_SCRIPT_FILEPATH"
    chmod +x "$POST_START_SCRIPT_FILEPATH"

    echo "Initializing conda..."
    conda init

    echo "Removing existing Conda channels..."
    conda config --remove-key channels 2>/dev/null || true

    echo "Adding conda-forge as the only channel..."
    conda config --add channels conda-forge

    echo "Setting strict channel priority..."
    conda config --set channel_priority strict

    echo "Verifying channels..."
    conda config --show channels

    if ! echo "$PACKAGES" | jq empty; then
        echo "Invalid JSON in PACKAGES"
        exit 1
    fi

    for conda_env_name in $(echo "$PACKAGES" | jq -r 'keys[]'); do
        value=$(echo "$PACKAGES" | jq -c --arg k "$conda_env_name" '.[$k]')
        packages=$(echo "$value" | jq -c '.packages')

        # Build the base command
        cmd=(
          python "$SCRIPT_FILEPATH"
            --conda-env-name "$conda_env_name"
            --packages "$packages"
            --filepath "$METADATA_FILEPATH"
            --no-self
        )

        # Optionally add --python-version
        if echo "$value" | jq -e 'has("python-version")' > /dev/null; then
            python_version=$(echo "$value" | jq -r '.["python-version"]')
            cmd+=(--python-version "$python_version")
        fi

        # Optionally add --sources
        if echo "$value" | jq -e 'has("sources")' > /dev/null; then
            sources=$(echo "$value" | jq -r '.sources')
            cmd+=(--sources "$sources")
        fi

        # Capture and write command output
        output=$("${cmd[@]}")

        # Append output to the file
        while IFS= read -r line; do
            echo "$line" >> "$POST_START_SCRIPT_FILEPATH"
        done <<< "$output"
    done

    echo "Cleaning up cache..."
    conda clean --all -y
devfeature_conda_setup:
  feature:
    name: Conda Setup
    version: 0.1.0
    description: Install conda environments and setup conda configuration.
    installsAfter:
      - ghcr.io/devcontainers/features/common-utils
      - ghcr.io/devcontainers/features/conda
    postCreateCommand: >-
      echo "Initializing conda..."
      && conda init;
      echo "Removing existing Conda channels..."
      && config --remove-key channels 2>/dev/null || true;
      echo "Adding conda-forge as the only channel..."
      && conda config --add channels conda-forge
      && echo "Setting strict channel priority..."
      && conda config --set channel_priority strict;
      echo "Verifying channels..."
      && conda config --show channels;
    options:
      log_dir:
        type: string
        description: Absolute path to a directory to write log files.
        default: /var/log/conda_setup
      env_dir:
        type: string
        description: Absolute path to the directory containing conda environment files.
        default: ${{ __temp__.container_env_path }}$/${{ devcontainer.containers.rel_path.conda }}$
  install: |
    #!/usr/bin/env bash
    set -eux
    echo "Initializing conda..."
    conda init
    echo "Removing existing Conda channels..."
    conda config --remove-key channels 2>/dev/null || true
    echo "Adding conda-forge as the only channel..."
    conda config --add channels conda-forge
    echo "Setting strict channel priority..."
    conda config --set channel_priority strict
    echo "Verifying channels..."
    conda config --show channels
    echo "Updating conda..."
    conda update -n base --all -y
    echo "Creating log directory..."
    mkdir -p $LOG_DIR
    if [ -d $ENV_DIR ] && find $ENV_DIR -name '*.yaml' | grep -q .; then
        umask 0002;
        for file in $ENV_DIR/*.yaml; do
            conda env update --file "$file" 2>&1 | tee "$LOG_DIR/$(basename "$file").log";
        done;
    fi
    echo "Cleaning up cache..."
    conda clean --all -y
devfeature_user_setup:
  # https://github.com/devcontainers/images/blob/main/src/universal/.devcontainer/local-features/setup-user/
  feature:
    id: setup-user
    name: Setup user configs
    version: "0.1.0"
    containerEnv:
      RUBY_HOME: /usr/local/rvm/rubies/default
      JAVA_ROOT: /home/codespace/java
      NODE_ROOT: /home/codespace/nvm
      PHP_ROOT: /home/codespace/.php
      PYTHON_ROOT: /home/codespace/.python
      RUBY_ROOT: /home/codespace/.ruby
      MAVEN_ROOT: /home/codespace/.maven
      HUGO_ROOT: /home/codespace/.hugo
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"
      NUGET_XMLDOC_MODE: skip
      ORYX_ENV_TYPE: vsonline-present
      PYTHONIOENCODING: UTF-8
      NPM_GLOBAL: /home/codespace/.npm-global
      NVS_HOME: /home/codespace/.nvs
      RVM_PATH: /usr/local/rvm
      RAILS_DEVELOPMENT_HOSTS: .githubpreview.dev,.preview.app.github.dev,.app.github.dev
      GOROOT: /usr/local/go
      JUPYTERLAB_PATH: /home/codespace/.local/bin
      PATH: /home/codespace/.dotnet:/home/codespace/nvm/current/bin:/home/codespace/.php/current/bin:/home/codespace/.python/current/bin:/home/codespace/java/current/bin:/home/codespace/.ruby/current/bin:/home/codespace/.local/bin:${PATH}
  install: |
    #!/usr/bin/env bash

    USERNAME=${USERNAME:-"codespace"}

    set -eux

    if [ "$(id -u)" -ne 0 ]; then
        echo -e 'Script must be run as root. Use sudo, su, or add "USER root" to your Dockerfile before running this script.'
        exit 1
    fi

    # Ensure that login shells get the correct path if the user updated the PATH using ENV.
    rm -f /etc/profile.d/00-restore-env.sh
    echo "export PATH=${PATH//$(sh -lc 'echo $PATH')/\$PATH}" > /etc/profile.d/00-restore-env.sh
    chmod +x /etc/profile.d/00-restore-env.sh

    export DEBIAN_FRONTEND=noninteractive

    sudo_if() {
        COMMAND="$*"
        if [ "$(id -u)" -eq 0 ] && [ "$USERNAME" != "root" ]; then
            su - "$USERNAME" -c "$COMMAND"
        else
            "$COMMAND"
        fi
    }

    # Enables the oryx tool to generate manifest-dir which is needed for running the postcreate tool
    DEBIAN_FLAVOR="focal-scm"
    mkdir -p /opt/oryx && echo "vso-focal" > /opt/oryx/.imagetype
    echo "DEBIAN|${DEBIAN_FLAVOR}" | tr '[a-z]' '[A-Z]' > /opt/oryx/.ostype

    # Oryx expects the tool to be installed at `/opt/oryx` and looks for relevant files in there.
    ln -snf /usr/local/oryx/* /opt/oryx

    # For the universal image, oryx build tool installs the detected platforms in /home/codespace/*. Hence, linking current platforms to the /home/codespace/ path and adding it to the PATH.
    # This ensures that whatever platfornm versions oryx detects and installs are set as root.
    NODE_PATH="/home/codespace/nvm/current"
    ln -snf /usr/local/share/nvm /home/codespace

    PHP_PATH="/home/${USERNAME}/.php/current"
    mkdir -p /home/${USERNAME}/.php
    ln -snf /usr/local/php/current $PHP_PATH

    PYTHON_PATH="/home/${USERNAME}/.python/current"
    mkdir -p /home/${USERNAME}/.python
    ln -snf /usr/local/python/current $PYTHON_PATH
    ln -snf /usr/local/python /opt/python

    JAVA_PATH="/home/codespace/java/current"
    ln -snf /usr/local/sdkman/candidates/java /home/codespace

    RUBY_PATH="/home/${USERNAME}/.ruby/current"
    mkdir -p /home/${USERNAME}/.ruby
    ln -snf /usr/local/rvm/rubies/default $RUBY_PATH

    DOTNET_PATH="/home/${USERNAME}/.dotnet"

    # Required due to https://github.com/devcontainers/features/pull/628/files#r1276659825
    chown -R "${USERNAME}:${USERNAME}" /usr/share/dotnet
    chmod g+r+w+s /usr/share/dotnet
    chmod -R g+r+w /usr/share/dotnet

    ln -snf /usr/share/dotnet $DOTNET_PATH
    mkdir -p /opt/dotnet/lts
    cp -R /usr/share/dotnet/dotnet /opt/dotnet/lts
    cp -R /usr/share/dotnet/LICENSE.txt /opt/dotnet/lts
    cp -R /usr/share/dotnet/ThirdPartyNotices.txt /opt/dotnet/lts

    MAVEN_PATH="/home/${USERNAME}/.maven/current"
    mkdir -p /home/${USERNAME}/.maven
    ln -snf /usr/local/sdkman/candidates/maven/current $MAVEN_PATH

    HUGO_ROOT="/home/${USERNAME}/.hugo/current"
    mkdir -p /home/${USERNAME}/.hugo
    ln -snf /usr/local/hugo $HUGO_ROOT

    HOME_DIR="/home/${USERNAME}/"
    chown -R ${USERNAME}:${USERNAME} ${HOME_DIR}
    chmod -R g+r+w "${HOME_DIR}"
    find "${HOME_DIR}" -type d | xargs -n 1 chmod g+s

    OPT_DIR="/opt/"
    chown -R ${USERNAME}:oryx ${OPT_DIR}
    chmod -R g+r+w "${OPT_DIR}"
    find "${OPT_DIR}" -type d | xargs -n 1 chmod g+s

    echo "Defaults secure_path=\"${DOTNET_PATH}:${NODE_PATH}/bin:${PHP_PATH}/bin:${PYTHON_PATH}/bin:${JAVA_PATH}/bin:${RUBY_PATH}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin:/usr/local/share:/home/${USERNAME}/.local/bin:${PATH}\"" >> /etc/sudoers.d/$USERNAME

    echo "Done!"
devcontainer:
  docker-compose:
    config:
      services:
        openjournals:
          container_name: openjournals
          image: openjournals/inara:latest
          entrypoint: [ "/bin/sh" ]
          command: [ "-c", "tail -f /dev/null" ]  # `sleep` is not available in the base image.
          volumes:
            - |-
              #{{
                docker_compose_path = get("devcontainer.docker-compose.path")
                path_depth = len(docker_compose_path.split("/")) - 1
                path_to_root_from_compose_file = "../" * path_depth if path_depth else "."
                return path_to_root_from_compose_file
              }}#:${{ devcontainer.docker-compose.config.services.openjournals.working_dir }}$
          working_dir: /workspace
devcontainer_main:
  service:
    privileged: true  # Required to use Docker in Docker.
  dockerfile:
    # https://hub.docker.com/_/ubuntu
    - FROM ubuntu:noble
    # https://github.com/devcontainers/images/blob/main/src/base-ubuntu/.devcontainer/Dockerfile
    - |
      RUN if id "ubuntu" &>/dev/null; then \
              echo "Deleting user 'ubuntu'" && userdel -f -r ubuntu || echo "Failed to delete ubuntu user."; \
          else \
              echo "User 'ubuntu' does not exist."; \
          fi
    # https://github.dev/devcontainers/images/tree/main/src/universal/.devcontainer
    - |
      RUN apt-get update && export DEBIAN_FRONTEND=noninteractive \
          # Restore man command
          && yes | unminimize 2>&1

      ENV LANG="C.UTF-8"

      # Install basic build tools
      RUN apt-get update \
          && apt-get upgrade -y \
          && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
              make \
              unzip \
              # The tools in this package are used when installing packages for Python
              build-essential \
              swig3.0 \
              # Required for Microsoft SQL Server
              unixodbc-dev \
              # Required for PostgreSQL
              libpq-dev \
              # Required for mysqlclient
              default-libmysqlclient-dev \
              # Required for ts
              moreutils \
              rsync \
              zip \
              libgdiplus \
              jq \
              # By default pip is not available in the buildpacks image
              python3-pip-whl \
              python3-pip \
              #.NET Core related pre-requisites
              libc6 \
              libgcc1 \
              libgssapi-krb5-2 \
              libncurses6 \
              liblttng-ust1 \
              libssl-dev \
              libstdc++6 \
              zlib1g \
              libuuid1 \
              libunwind8 \
              sqlite3 \
              libsqlite3-dev \
              software-properties-common \
              tk-dev \
              uuid-dev \
              curl \
              gettext \
              inotify-tools \
          && rm -rf /var/lib/apt/lists/* \
          # This is the folder containing 'links' to benv and build script generator
          && apt-get update \
          && apt-get upgrade -y \
          && add-apt-repository universe \
          && rm -rf /var/lib/apt/lists/*

      # Verify expected build and debug tools are present
      RUN apt-get update \
          && apt-get -y install build-essential cmake cppcheck valgrind clang lldb llvm gdb python3-dev \
          # Install tools and shells not in common script
          && apt-get install -yq vim vim-doc xtail software-properties-common libsecret-1-dev \
          # Install additional tools (useful for 'puppeteer' project)
          && apt-get install -y --no-install-recommends libnss3 libnspr4 libatk-bridge2.0-0 libatk1.0-0 libx11-6 libpangocairo-1.0-0 \
                                                        libx11-xcb1 libcups2 libxcomposite1 libxdamage1 libxfixes3 libpango-1.0-0 libgbm1 libgtk-3-0 \
          # Clean up
          && apt-get autoremove -y && apt-get clean -y \

      # Default to bash shell (other shells available at /usr/bin/fish and /usr/bin/zsh)
      ENV SHELL=/bin/bash \
          DOCKER_BUILDKIT=1

      # Install and setup fish
      RUN apt-get install -yq fish \
          && FISH_PROMPT="function fish_prompt\n    set_color green\n    echo -n (whoami)\n    set_color normal\n    echo -n \":\"\n    set_color blue\n    echo -n (pwd)\n    set_color normal\n    echo -n \"> \"\nend\n" \
          && printf "$FISH_PROMPT" >> /etc/fish/functions/fish_prompt.fish \
          && printf "if type code-insiders > /dev/null 2>&1; and not type code > /dev/null 2>&1\n  alias code=code-insiders\nend" >> /etc/fish/conf.d/code_alias.fish

      # Remove scripts now that we're done with them
      RUN apt-get clean -y

      CMD [ "sleep", "infinity" ]
    - ${{ __temp__.dockerfile_copy_env_cmd }}$
    - ${{ __temp__.dockerfile_copy_script_cmd }}$
  container:
    name: Main Development Environment
    remoteUser: codespace
    containerUser: ${{ .remoteUser }}$
    forwardPorts:
      - ${{ __temp__.port.jupyter }}$
      - ${{ __temp__.port.desktop_lite.web }}$
      - ${{ __temp__.port.desktop_lite.vnc }}$
    portsAttributes:
      '#{{ return str(get("__temp__.port.desktop_lite.web")) }}#':
        label: Desktop Lite (web)
        onAutoForward: openBrowserOnce
        elevateIfNeeded: true
      '#{{ return str(get("__temp__.port.desktop_lite.vnc")) }}#':
        label: Desktop Lite (VNC)
        elevateIfNeeded: true
      '#{{ return str(get("__temp__.port.jupyter")) }}#':
        label: Jupyter
        onAutoForward: openBrowserOnce
        elevateIfNeeded: true
    features:
      # https://github.com/devcontainers/features/tree/main/src/common-utils
      ghcr.io/devcontainers/features/common-utils:2:
        installZsh: true
        configureZshAsDefaultShell: true
        installOhMyZsh: true
        installOhMyZshConfig: true
        upgradePackages: true
        username: ${{ devcontainer_main.container.containerUser }}$
        userUid: "1000"
        userGid: "1000"
      # https://github.com/devcontainers/features/tree/main/src/conda
      ghcr.io/devcontainers/features/conda:1:
        version: latest
        addCondaForge: true
      # https://github.com/devcontainers/features/tree/main/src/desktop-lite
      ghcr.io/devcontainers/features/desktop-lite:1:
        version: latest
        password: noPassword
        webPort: '#{{ return str(get("__temp__.port.desktop_lite.web")) }}#'
        vncPort: '#{{ return str(get("__temp__.port.desktop_lite.vnc")) }}#'
      # https://github.com/devcontainers/features/tree/main/src/docker-outside-of-docker
      ghcr.io/devcontainers/features/docker-outside-of-docker:1:
        # Note: This feature is incompatible with the Docker-in-Docker feature
        # - https://github.com/devcontainers/features/issues/742#issuecomment-1793019485
        version: latest
      # https://github.com/devcontainers/features/tree/main/src/git-lfs
      ghcr.io/devcontainers/features/git-lfs:1:
        version: latest
        autoPull: true
      # https://github.com/devcontainers/features/tree/main/src/git
      ghcr.io/devcontainers/features/git:1:
        version: latest
        ppa: false
      # https://github.com/devcontainers/features/tree/main/src/github-cli
      ghcr.io/devcontainers/features/github-cli:1:
        version: latest
      # https://github.com/devcontainers/features/tree/main/src/node
      ghcr.io/devcontainers/features/node:1:
        version: latest
        nodeGypDependencies: true
        nvmInstallPath: /usr/local/share/nvm
        pnpmVersion: latest
        nvmVersion: latest
        installYarnUsingApt: true
      # https://github.com/devcontainers/features/tree/main/src/oryx
      ghcr.io/devcontainers/features/oryx:1: {}
      # https://github.com/devcontainers/features/tree/main/src/ruby
      ghcr.io/devcontainers/features/ruby:1:
        version: latest
      # https://github.com/devcontainers/features/tree/main/src/rust
      ghcr.io/devcontainers/features/rust:1:
        version: latest
        profile: minimal
      # https://github.com/devcontainers/features/tree/main/src/sshd
      ghcr.io/devcontainers/features/sshd:1:
        version: latest
      # https://github.com/devcontainers-extra/features/tree/main/src/apt-get-packages
      ghcr.io/devcontainers-extra/features/apt-get-packages:1:
        packages: |-
          #{{
            return ",".join([pkg["spec"]["full"] for pkg in get("devcontainer_main.apt", {}).values()])
          }}#
      # Local features
      ./${{ devfeature_user_setup.path }}$: {}
      ./${{ devfeature_conda_setup.path }}$: {}
      ./${{ devfeature_pkg_setup.path }}$:
        packages: >-
          {
            \"${{ __temp__.conda_env_name.app }}$\": {
              \"packages\": [
                {
                  \"id\": \"main\",
                  \"extras\": \"all\"
                },
                {
                  \"id\": \"test\",
                  \"extras\": \"all\"
                }
              ],
              \"python-version\": \"${{ pypkg_main.python.version.minors[0] }}$\",
              \"sources\": \"pip conda apt bash\"
            },
            \"proman\": {
              \"packages\": [
                {
                  \"id\": \"ci\",
                  \"extras\": \"all\"
                }
              ],
              \"python-version\": \"${{ pypkg_ci.python.version.minors[-1] }}$\",
              \"sources\": \"pip conda apt bash\"
            }
          }
    overrideFeatureInstallOrder:
      - ghcr.io/devcontainers/features/common-utils
      - ghcr.io/devcontainers/features/desktop-lite:1
      - ghcr.io/devcontainers/features/git
      - ghcr.io/devcontainers/features/node
      - ghcr.io/devcontainers/features/conda
      - ghcr.io/devcontainers/features/ruby
      - ghcr.io/devcontainers/features/sshd
      - ghcr.io/devcontainers/features/git-lfs
      - ghcr.io/devcontainers/features/github-cli
      - ghcr.io/devcontainers/features/docker-outside-of-docker
      - ghcr.io/devcontainers/features/oryx
      - ./${{ devfeature_user_setup.path }}$
      - ghcr.io/devcontainers-extra/features/apt-get-packages
      - ./${{ devfeature_conda_setup.path }}$
      - ./${{ devfeature_pkg_setup.path }}$
    remoteEnv:
      # https://github.com/devcontainers/features/tree/main/src/docker-outside-of-docker#1-use-the-localworkspacefolder-as-environment-variable-in-your-code
      LOCAL_WORKSPACE_FOLDER: "${localWorkspaceFolder}"
    postCreateCommand:
      pre_commit_install:
        - conda
        - run
        - --name
        - ${{ devcontainer_main.environment.pre_commit.name }}$
        - --live-stream
        - -vv
        - pre-commit
        - install
        - --install-hooks
        - --config
        - ${{ devcontainer_main.environment.pre_commit.file.pre_commit_config.path }}$
    postStartCommand:
      pypackit_install:
        - conda
        - run
        - --name
        - ${{ devcontainer_main.environment.pypackit.name }}$
        - --live-stream
        - -vv
        - pip
        - install
        - --editable
        - ${{ pypkg_ci.path.root }}$
        - --no-deps
    customizations:
      vscode:
        extensions:
          - ms-python.python
          - ms-python.vscode-pylance
          - ms-python.debugpy
          - ms-toolsai.jupyter
          - ms-toolsai.jupyter-keymap
          - ms-toolsai.jupyter-renderers
          - ms-vscode.cpptools
          - ritwickdey.LiveServer
          - VisualStudioExptTeam.vscodeintellicode
          - ms-toolsai.vscode-jupyter-cell-tags
          - ms-toolsai.vscode-jupyter-slideshow
          - twxs.cmake
          - ms-vscode.cmake-tools
          - redhat.java
          - ms-azuretools.vscode-docker
          - dbaeumer.vscode-eslint
          - eamodio.gitlens
          - ms-vscode.cpptools-extension-pack
          - VisualStudioExptTeam.intellicode-api-usage-examples
          - formulahendry.code-runner
          - GitHub.copilot
          - GitHub.copilot-chat
          - GitHub.vscode-pull-request-github
          - ms-vscode-remote.remote-ssh-edit
          - ecmel.vscode-html-css
          - formulahendry.auto-rename-tag
          - redhat.vscode-yaml
          - MS-vsliveshare.vsliveshare
          - xabikos.JavaScriptSnippets
          - ms-vscode.remote-explorer
          - christian-kohler.path-intellisense
          - golang.Go
          - formulahendry.auto-close-tag
          - bmewburn.vscode-intelephense-client
          - streetsidesoftware.code-spell-checker
          - donjayamanne.githistory
          - KevinRose.vsc-python-indent
          - njpwerner.autodocstring
          - wholroyd.jinja
          - jeff-hykin.better-cpp-syntax
          - mechatroner.rainbow-csv
          - techer.open-in-browser
          - mhutchie.git-graph
          - yzhang.markdown-all-in-one
          - Zignd.html-css-class-completion
          - DavidAnson.vscode-markdownlint
          - aaron-bond.better-comments
          - naumovs.color-highlight
          - redhat.vscode-xml
          - tomoki1207.pdf
          - pranaygp.vscode-css-peek
          - shd101wyy.markdown-preview-enhanced
          - ms-vscode.makefile-tools
          - GitHub.codespaces
          - rust-lang.rust-analyzer
          - GitHub.remotehub
          - ms-vscode.remote-repositories
          - GitHub.vscode-github-actions
          - thekalinga.bootstrap4-vscode
          - ziyasal.vscode-open-in-github
          - ZainChen.json
          - kisstkondoros.vscode-gutter-preview
          - tamasfe.even-better-toml
          - shardulm94.trailing-spaces
          - quicktype.quicktype
          - yzane.markdown-pdf
          - bierner.markdown-mermaid
          - GraphQL.vscode-graphql
          - ms-python.pylint
          - bierner.github-markdown-preview
          - jock.svg
          - charliermarsh.ruff
          - ms-python.mypy-type-checker
          - graphql.vscode-graphql-syntax
        settings:
          jupyter.kernels.filter:
            - path: /opt/conda/bin/python
              type: pythonEnvironment
            - path: /opt/conda/envs/app/bin/python
              type: pythonEnvironment
          lldb.executable: /usr/bin/lldb
          python.defaultInterpreterPath: /opt/conda/envs/app/bin/python
          terminal.integrated.scrollback: 1000000
          tasks:
            version: 2.0.0
            tasks:
              - label: Build Paper (Final)
                type: process
                command: inara
                args: [ "-p", "-o", "pdf", "-v", "${file}" ]
                group:
                  kind: build
                  isDefault: true
                presentation:
                  reveal: always
                  echo: true
                  focus: true
                  panel: new
              - label: Build Paper (Draft)
                type: process
                command: inara
                args: [ "-o", "pdf,contextpdf,tex,preprint,docx,html,crossref,cff", "-vv", "${file}" ]
                group:
                  kind: build
                  isDefault: false
                presentation:
                  reveal: always
                  echo: true
                  focus: true
                  panel: new
  environment:
    base:
      conda:
        conda-build:
          description: |
            Tool for building conda packages.
          url:
            docs: https://conda.io/projects/conda-build
            package: https://anaconda.org/conda-forge/conda-build
          notes: |
            For proper functioning, it is strongly recommended to
            install conda-build in the conda base environment.
            See the [conda-build documentation](https://docs.conda.io/projects/conda-build/en/stable/install-conda-build.html)
            for more information.
    pybuild:
      pip:
        build:
          spec:
            version: '>=1.2.2'
          url:
            docs: https://build.pypa.io/
            package: https://pypi.org/project/build/
            source: https://github.com/pypa/build
        twine:
          url:
            docs: https://twine.readthedocs.io/
            package: https://pypi.org/project/twine/
            source: https://github.com/pypa/twine
        readme-renderer:
          spec:
            version: '>=44'
            extras: [ md ]
          url:
            package: https://pypi.org/project/readme-renderer/
            source: https://github.com/pypa/readme_renderer
      variable:
        log_level:
          summary: Log level for the versioningit tool during build.
          description: |
            See the [versioningit documentation](https://versioningit.readthedocs.io/en/stable/configuration.html#log-level-environment-variable)
            for more information.
          key: VERSIONINGIT_LOG_LEVEL
          value: DEBUG
    versioning:
      pip:
        versioning:
          spec: |
            #{{
              spec = get("pypkg_main.dependency.build.versioning.install.pip")
              out = {}
              for k, v in spec.items():
                if k == "spec":
                  out["full"] = v
                elif k not in ("homepage",):
                  out[k] = v
              return out
            }}#
    type_check:
      pip:
        mypy:
          spec:
            version: ==1.15.0
            extras: [ reports ]
          url:
            docs: https://mypy.readthedocs.io/
            package: https://pypi.org/project/mypy/
            source: https://github.com/python/mypy
      data:
        cache_path: ${{ local.cache.path }}$/mypy
        report_path: ${{ local.report.path }}$/mypy
      file:
        mypy_config:
          name: Mypy Configuration
          summary: >-
            Mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html)
            in [pyproject.toml](https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml) format.
          type: toml
          path: .config/mypy.toml
          content:
            tool:
              mypy:
                # Import discovery
                packages: [ '${{ pypkg_main.import_name }}$' ]
                # Configuring warnings
                warn_return_any: true
                # Miscellaneous strictness flags
                strict: true
                # Configuring error messages
                show_error_context: true
                show_column_numbers: true
                show_error_code_links: true
                pretty: true
                color_output: true
                # Incremental mode
                cache_dir: ${{ devcontainer_main.environment.type_check.data.cache_path }}$
                # Advanced options
                show_traceback: true
                raise_exceptions: true
                # Report generation
                any_exprs_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                html_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                linecount_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                linecoverage_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                lineprecision_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                txt_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                xml_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                # Miscellaneous
                verbosity: 2
      task:
        typecheck:
          name: Type Check
          summary: Run type checking with Mypy.
          process:
            - mypy
            - --package ${{ pypkg_main.import_name }}$
            - --package ${{ pypkg_test.import_name }}$
            # https://mypy.readthedocs.io/en/stable/installed_packages.html#using-installed-packages-with-mypy-pep-561
            - --python-executable /opt/conda/envs/${{ __temp__.conda_env_name.app }}$/bin/python
            - --config-file ${{ devcontainer_main.environment.type_check.file.mypy_config.path }}$
            - --install-types
            - --non-interactive
    codecov:
      conda:
        rust:
          notes: |
            Required for the `codecov` package.
      pip:
        codecov-cli:
          spec:
            version: ==10.0.1
          url:
            docs: https://docs.codecov.com/docs/the-codecov-cli
            package: https://pypi.org/project/codecov/
            source: https://github.com/codecov/codecov-cli
      file:
        codecov_config:
          name: Codecov Configuration
          summary: >-
            Codecov [configuration file](https://docs.codecov.com/docs/codecov-yaml)
            in YAML format.
          description: |
            [Codecov](https://about.codecov.io/) is an online platform
            that provides test coverage metrics for your project.
            After [signing up on Codecov](https://docs.codecov.com/docs/quick-start),
            these configurations will automatically control the generation of coverage reports
            and the submission of these reports to Codecov.
            For a full reference, see the
            [Codecov YAML reference](https://docs.codecov.com/docs/codecovyml-reference).
          type: yaml
          path: .github/.codecov.yml
          path_schema:
            description: |
              CodeCov only looks for a `codecov.yml` or `.codecov.yml` file
              either in the root of the repository, or in `.github/` and `dev/` directories.
              (cf. [CodeCov documentation](https://docs.codecov.com/docs/codecov-yaml#can-i-name-the-file-codecovyml)).
            pattern: ^(.github/|dev/)?.?codecov.yml$
          content:
            coverage:
              precision: 2
              round: nearest
              range: "90...100"
              status:
                project:
                  default:
                    target: 100%
                    threshold: 5%
            comment:
              layout: "header, diff, flags, files"
              require_changes: false
              behavior: default
          validator: validate_codecov_yaml
    pylint:
      conda:
        pylint:
          spec:
            version: ==3.3.4
          url:
            docs: https://pylint.readthedocs.io/
            package: https://anaconda.org/conda-forge/pylint
            source: https://github.com/pylint-dev/pylint
        pyenchant:
          description: |
            Spellchecking library for Python.
            This is an optional dependency of `pylint`,
            which is not included in the conda package.
          spec:
            version: ==3.2.2
          url:
            docs: https://pyenchant.github.io/pyenchant/
            package: https://anaconda.org/conda-forge/pyenchant
            source: https://github.com/pyenchant/pyenchant/
        enchant:
          description: |
            Spellchecking library.
            This is the underlying library for `pyenchant`.
          spec:
            version: ==2.8.2
          url:
            docs: https://rrthomas.github.io/enchant/
            package: https://anaconda.org/conda-forge/enchant
            source: https://github.com/rrthomas/enchant/
    pre_commit:
      conda:
        pre-commit:
          description: |
            Framework for managing and maintaining
            multi-language hooks for formatting and linting.
          spec:
            version: ==4.1.0
          url:
            docs: https://pre-commit.com/
            package: https://anaconda.org/conda-forge/pre_commit
            source: https://github.com/pre-commit/pre-commit
      variable:
        cache_dir:
          summary: Directory to store the cache for pre-commit hooks.
          key: PRE_COMMIT_HOME
          value: ${{ local.cache.path }}$/pre-commit
      file:
        pre_commit_config:
          name: Pre-Commit Configuration
          summary: >-
            Pre-Commit [configuration file](https://pre-commit.com/#configuration).
          type: yaml
          path: .config/pre-commit.yaml
          content:
            default_language_version:
              python: python3
            minimum_pre_commit_version: 4.0.0
            repos:
              - repo: https://github.com/pre-commit/pre-commit-hooks
                rev: v5.0.0
                hooks:
                  - id: check-ast
                    # https://github.com/pre-commit/pre-commit-hooks#check-ast
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-case-conflict
                    # https://github.com/pre-commit/pre-commit-hooks#check-case-conflict
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-json
                    # https://github.com/pre-commit/pre-commit-hooks#check-json
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-shebang-scripts-are-executable
                    # https://github.com/pre-commit/pre-commit-hooks#check-shebang-scripts-are-executable
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-symlinks
                    # https://github.com/pre-commit/pre-commit-hooks#check-symlinks
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-toml
                    # https://github.com/pre-commit/pre-commit-hooks#check-toml
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-xml
                    # https://github.com/pre-commit/pre-commit-hooks#check-xml
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: destroyed-symlinks
                    # https://github.com/pre-commit/pre-commit-hooks?tab=readme-ov-file#destroyed-symlinks
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: end-of-file-fixer
                    # https://github.com/pre-commit/pre-commit-hooks#end-of-file-fixer
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: fix-byte-order-marker
                    # https://github.com/pre-commit/pre-commit-hooks?tab=readme-ov-file#fix-byte-order-marker
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: mixed-line-ending
                    # https://github.com/pre-commit/pre-commit-hooks#mixed-line-ending
                    stages: [ pre-commit, manual ]
                    args: [ --fix, auto ]
                    verbose: true
                  - id: no-commit-to-branch
                    # https://github.com/pre-commit/pre-commit-hooks#no-commit-to-branch
                    stages: [ pre-commit ]
                    args:
                      - --branch
                      - '${{ branch.main.name }}$'
                      - --pattern
                      - '${{ branch.release.name }}$.*'
                      - --pattern
                      - '${{ branch.pre.name }}$.*'
                    verbose: true
                  - id: pretty-format-json
                    # https://github.com/pre-commit/pre-commit-hooks?tab=readme-ov-file#pretty-format-json
                    stages: [ pre-commit, manual ]
                    args: [ --autofix, --indent, '3' ]
                    verbose: true
                  - id: trailing-whitespace
                    # https://github.com/pre-commit/pre-commit-hooks#trailing-whitespace
                    stages: [ pre-commit, manual ]
                    args: [ --markdown-linebreak-ext=md ]
                    verbose: true
              - repo: https://github.com/astral-sh/ruff-pre-commit
                rev: v0.11.0
                hooks:
                  - id: ruff
                    stages: [ pre-commit, manual ]
                    args:
                      - --verbose
                      - --config
                      - '${{ devcontainer_main.environment.pre_commit.file.ruff_config.path }}$'
                      - --exit-non-zero-on-fix  # DO NOT CHANGE - Required for RepoDynamics CI
                    types_or: [ python, pyi, jupyter ]
                    verbose: true
                  - id: ruff-format
                    stages: [ pre-commit, manual ]
                    args: [ --config, '${{ devcontainer_main.environment.pre_commit.file.ruff_config.path }}$' ]
                    types_or: [ python, pyi, jupyter ]
                    verbose: true
        pre_commit_config_ci:
          name: Pre-Commit Configuration for CI
          summary: >-
            Pre-Commit [configuration file](https://pre-commit.com/#configuration)
            for use in CI pipeline.
          type: yaml
          path: .config/pre-commit-ci.yaml
          content: |-
            #{{
              local_config = get("devcontainer_main.environment.pre_commit.file.pre_commit_config.content")
              return local_config | {"exclude": r"^\.github/workflows/[^/]+\.(?i:ya?ml)$"}
            }}#
        ruff_config:
          name: Ruff Configuration
          summary: >-
            Ruff [configuration file](https://docs.astral.sh/ruff/settings/)
            in TOML format.
          type: toml
          path: .config/ruff.toml
          content:
            cache-dir: ${{ local.cache.path }}$/ruff
            fix: true
            line-length: 100
            output-format: grouped
            required-version: '>=0.11,<0.12'
            show-fixes: true
            src:
              - '${{ pypkg_main.path.source }}$'
              - '${{ pypkg_test.path.source }}$'
            target-version: >-
              #{{
                major, minor = get("pypkg_main.python.version.minors")[0].split(".")
                return f"py{major}{minor}"
              }}#
            format:
              docstring-code-format: true
            lint:
              allowed-confusables: [ '–' ]
              exclude:
                - .manager/**/*.py
              ignore:
                - PLR1711  # https://docs.astral.sh/ruff/rules/useless-return/
                # Rules conflicting with the formatter (see: https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules)
                - W191
                - E501
                - E111
                - E114
                - E117
                - D206
                - D300
                - Q000
                - Q001
                - Q002
                - Q003
                - COM812
                - COM819
                - ISC001
                - ISC002
              per-file-ignores:
                .devcontainer/script/**:
                  - T201
                  - S603
                  - S607
                .github/**:
                  - T201
                  - S603
                  - S607
                '${{ pypkg_test.path.source }}$/**':
                  - S101
                template/test/src/**:
                  - S101
                '${{ web.path.source }}$/conf.py':
                  - TRY003  # https://docs.astral.sh/ruff/rules/raise-vanilla-args/#raise-vanilla-args-try003
                # https://docs.astral.sh/ruff/rules/#flake8-print-t20
                '${{ pypkg_main.path.import }}$/__main__.py':
                  - T20
                '${{ pypkg_test.path.import }}$/__main__.py':
                  - T20
                '${{ pypkg_test.path.import }}$/__init__.py':
                  - T20
                template/pkg/src/new_pyproject/__main__.py:
                  - T20
                template/test/src/new_pyproject_testsuite/__main__.py:
                  - T20
                template/pkg/src/new_pyproject/__init__.py:
                  - T20
                  - D104
                template/test/src/new_pyproject_testsuite/__init__.py:
                  - T20
                  - D104
                template/.control/hooks/cca.py:
                  - ARG002
              select:
                # https://docs.astral.sh/ruff/rules
                - F      # pyflakes
                - E      # pycodestyle error
                - W      # pycodestyle warning
                - C90    # mccabe
                - I      # isort
                - N      # pep8-naming
                - D      # pydocstyle
                - UP     # pyupgrade
                - YTT    # flake8-2020
                - ANN    # flake8-annotations
                - ASYNC  # flake8-async
                - S      # flake8-bandit
                - BLE    # flake8-blind-except
                - FBT    # flake8-boolean-trap
                - B      # flake8-bugbear
                - A      # flake8-builtins
                - COM    # flake8-commas
                - C4     # flake8-comprehensions
                - DTZ    # flake8-datetimez
                - T10    # flake8-debugger
                - EM     # flake8-errmsg
                - EXE    # flake8-executable
                - FA     # flake8-future-annotations
                - ISC    # flake8-implicit-str-concat
                - ICN    # flake8-import-conventions
                - LOG    # flake8-logging
                - G      # flake8-logging-format
                - PIE    # flake8-pie
                - T20    # flake8-print
                - PYI    # flake8-pyi
                - PT     # flake8-pytest-style
                - Q      # flake8-quotes
                - RSE    # flake8-raise
                - RET    # flake8-return
                - SLF    # flake8-self
                - SLOT   # flake8-slot
                - SIM    # flake8-simplify
                - TID    # flake8-tidy-imports
                - TCH    # flake8-type-checking
                - INT    # flake8-gettext
                - ARG    # flake8-unused-arguments
                - PTH    # flake8-use-pathlib
                - TD     # flake8-todos
                - FIX    # flake8-fixme
                - ERA    # eradicate
                - PD     # pandas-vet
                - PGH    # pygrep-hooks
                - PL     # pylint
                - E      # error
                - R      # refactor
                - W      # warning
                - TRY    # tryceratops
                - FLY    # flynt
                - NPY    # numpy
                - PERF   # perflint
                - FURB   # refurb
                - RUF    # ruff-specific rules
              flake8-annotations:
                allow-star-arg-any: true
                mypy-init-return: true
                suppress-dummy-args: true
                suppress-none-returning: true
              flake8-comprehensions:
                allow-dict-calls-with-keyword-arguments: true
              flake8-type-checking:
                quote-annotations: true
              pydocstyle:
                convention: numpy
              pylint:
                max-args: 10
                max-public-methods: 50
                max-returns: 10
              mccabe:
                max-complexity: 15
    jupyter:
      task:
        jupyterlab:
          name: Open JupyterLab
          script: |
            jupyter-lab / --ContentsManager.allow_hidden=True --IdentityProvider.token=''
      conda:
        jupyterlab:
          description: |
            JupyterLab is a web-based interactive development environment for Jupyter notebooks,
            code, and data.
          url:
            docs: https://jupyterlab.readthedocs.io
            package: https://anaconda.org/conda-forge/jupyterlab
            source: https://github.com/jupyterlab/jupyterlab
        jupyterlab-git:
          description: |
            Git extension for JupyterLab.
          url:
            package: https://anaconda.org/conda-forge/jupyterlab-git
            source: https://github.com/jupyterlab/jupyterlab-git
        jupyterlab-myst:
          description: |
            JupyterLab extension for rendering MyST markdown.
          url:
            docs: https://jupyter-book.github.io/jupyterlab-myst/
            package: https://anaconda.org/conda-forge/jupyterlab-myst
            source: https://github.com/jupyter-book/jupyterlab-myst
        ipywidgets:
          description: |
            Interactive widgets for the Jupyter notebook.
          url:
            docs: https://ipywidgets.readthedocs.io
            package: https://anaconda.org/conda-forge/ipywidgets
            source: https://github.com/jupyter-widgets/ipywidgets
        nb_conda_kernels:
          description: |
            Package for managing conda environment-based kernels inside of Jupyter.
          notes: |
            Each conda environment that has `ipykernel` installed
            will be available as a kernel in Jupyter.
            See also:
            - https://github.com/jupyterlab/jupyterlab/issues/12544#issuecomment-1125754909
            - https://ipython.readthedocs.io/en/stable/install/kernel_install.html#kernels-for-different-environments
            - https://stackoverflow.com/questions/53004311/how-to-add-conda-environment-to-jupyter-lab
          url:
            package: https://anaconda.org/conda-forge/nb_conda_kernels
            source: https://github.com/anaconda/nb_conda_kernels
        qtconsole:
          description: |
            Jupyter QtConsole is a terminal-based console for Jupyter.
          url:
            docs: https://qtconsole.readthedocs.io
            package: https://anaconda.org/conda-forge/qtconsole
            source: https://github.com/jupyter/qtconsole
    anaconda:
      conda:
        anaconda-client:
          description: |
            Client for uploading packages and managing channels in Anaconda.
          spec:
            version: '>=1.13'
          url:
            docs: https://www.anaconda.com/docs/tools/anaconda-org/user-guide/getting-started-with-anaconda-client
            package: https://anaconda.org/conda-forge/anaconda-client
            source: https://github.com/anaconda/anaconda-client
    pypackit:
      task:
        project:
          name: Project Management
          summary: Main project management CLI.
          process: [ proman, $@ ]
      conda: |
        #{{
          py_ver = get("pypkg_ci.python.version.spec")
          out = {
            "python": {
              "spec": {"version": py_ver, "channel": "conda-forge", "full": f"conda-forge::python {py_ver}"},
              "url": {"package": "https://anaconda.org/conda-forge/python"},
            }
          }
          for dep_key, dep in get("pypkg_ci.dependency.core", {}).items():
            install = dep["install"].get("conda")
            if install:
              spec = {k: v for k, v in install.items() if k not in ("selector", "homepage", "spec")}
              spec["full"] = install["spec"]
              out[dep_key] = {"spec": spec}
          return out
        }}#
      pip: |
        #{{
          out = {}
          for dep_key, dep in get("pypkg_ci.dependency.core", {}).items():
            install = dep["install"].get("pip")
            if install:
              spec = {k: v for k, v in install.items() if k not in ("homepage", "spec")}
              spec["full"] = install["spec"]
              out[dep_key] = {"spec": spec}
          return out
        }}#
  task:
    build-oj-paper:
      # https://github.com/openjournals/inara
      name: Build Open-Journals Paper
      description: |
        Build paper using the Open-Journals Inara service.
        For publishing to JOSE or ReScience C (instead of JOSS),
        set the `JOURNAL` environment variable to `jose` or `resciencec`, respectively.
      script: |
        docker exec -it ${{ devcontainer.docker-compose.config.services.openjournals.container_name }}$ \
          inara -o pdf -p -v $1
      notes: |
        This uses the [inara](https://github.com/openjournals/inara/blob/main/Dockerfile) Docker image.
        See the entry [script](https://github.com/openjournals/inara/blob/main/scripts/entrypoint.sh)
        for more details.
#file_pixi_manifest:
#  # https://pixi.sh/latest/reference/pixi_manifest/
#  name: Pixi Manifest
#  summary: |
#    The Pixi manifest file in TOML format.
#  type: toml
#  path: pixi.toml
#  content:
#    project:
#      name: ${{ name }}$
#      version: '#{{ return manager.changelog.current_public.get("version") }}#'
#      authors: |
#        #{{
#          return [
#            f"{author["name"]["full"]}{f" <{author["email"]["id"]}>" if "email" in author else ""}"
#            for author in manager.user.members_with_role_types("Author", active_only=True)
#          ]
#        }}#
#      description: '#{{ return get("title") }}#'
#      license: '#{{ return get("license.expression") }}#'
#      license-file: |
#        #{{
#          license_components = list(get("license.component", {}).values())
#          if not license_components:
#            return
#          return license_components[0]["path"]["text_plain"]
#        }}#
#      readme: '#{{ return get("file_readme.path") }}#'
#      homepage: '#{{ return get("web.url.home") }}#'
#      repository: ${{ repo.url.home }}$
#      documentation: ${{ .homepage }}$
#      platforms: [ "win-64", "linux-64", "osx-64", "osx-arm64" ]
#      channels: [ "conda-forge" ]
#    environments:
#      prod-py312:
#        features: []
#        solve-group: ""
#    feature:
#      app:
#        dependencies:
#  content_setting:
#    filter:
#      no_value:
#        jsonpath: $.project.*
