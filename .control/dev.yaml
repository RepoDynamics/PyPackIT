__temp__:
  container_env_path: /usr/local/share/environments
  container_build_log_path: /var/log/devcontainer-build
  port:
    desktop_lite:
      web: 6080
      vnc: 5901
    jupyter: 8888
  conda_env_name:
    app: ${{ devcontainer_main.var.conda.app_env }}$
    manager: proman
default:
  task_setting:
    local:
      environment:
        process:
          prepend:
            - conda
            - run
            - --cwd
            - '{{ devcontainer.container.workspaceFolder }}'
            - --name
            - '{{ environment.name }}'
            - --live-stream
            - -vv
        script:
          prepend: |
            current_dir=$(pwd)
            cd '{{ devcontainer.container.workspaceFolder }}'
            conda activate '{{ environment.name }}'
          append: |
            conda deactivate
            cd "$current_dir"
      root:
        process:
          prepend:
            - conda
            - run
            - --cwd
            - '{{ devcontainer.container.workspaceFolder }}'
            - --live-stream
            - -vv
            - --name
        script:
          prepend: |
            current_dir=$(pwd)
            cd '{{ devcontainer.container.workspaceFolder }}'
          append: |
            cd "$current_dir"
    global:
      environment:
        process:
          prepend:
            - conda
            - run
            - --name
            - '{{ environment.name }}'
            - --live-stream
            - -vv
        script:
          prepend: |
            conda activate '{{ environment.name }}'
          append: |
            conda deactivate
      root:
        process:
          prepend:
            - conda
            - run
            - --live-stream
            - -vv
            - --name
devfeature_pixi:
  # See:
  # - https://github.com/prefix-dev/pixi-docker
  # - https://pixi.sh/latest/ide_integration/devcontainer/
  feature:
    name: Pixi
    description: Install Pixi in the development container and activate it.
    documentationURL: https://pixi.sh/latest/ide_integration/devcontainer/
    version: 0.40.3
    mounts:
      - type: volume
        source: ${localWorkspaceFolderBasename}-pixi
        target: ${containerWorkspaceFolder}/.pixi
    postCreateCommand: >-
      sudo chown $(whoami) .pixi &&
      echo 'eval "$(pixi completion -s bash)"' >> $HOME/.bashrc &&
      pixi install
    options:
      version:
        type: string
        description: The version of Pixi to install.
        default: ${{ ...version }}$
  install: |
    #!/usr/bin/env bash
    set -e
    curl -L -o /usr/local/bin/pixi -fsSL --compressed "https://github.com/prefix-dev/pixi/releases/download/v${VERSION}/pixi-$(uname -m)-unknown-linux-musl"
    chmod +x /usr/local/bin/pixi
    pixi info
devfeature_pkg_setup:
  feature:
    name: Package Setup
    version: 0.1.0
    description: Install local packages in development mode.
    installsAfter:
      - ghcr.io/devcontainers/features/common-utils
      - ghcr.io/devcontainers/features/conda
    postStartCommand: "/usr/local/share/app_installation/post-start-command.sh"
    options:
      packages:
        type: string
        description: >-
          Packages to install.
          This must be a string representing a JSON object,
          where keys are the name of Conda environments to use for installation.
          Each value is a JSON object with a key "packages",
          and optionally "python-version", and "sources",
          corresponding to the package installation script's input arguments.
          Note that quotes inside the JSON string must be escaped with triple backslashes.
        default: ""
      script_filepath:
        type: string
        description: Absolute path to the installation script file.
        default: /usr/local/share/app_installation/install.py
      metadata_filepath:
        type: string
        description: Absolute path to the project metadata file.
        default: /usr/local/share/app_installation/metadata.json
      log_dirpath:
        type: string
        description: Absolute path to a directory to write log files.
        default: ${{ __temp__.container_build_log_path }}$/pkg_setup
  install: |
    #!/usr/bin/env bash
    set -euxo pipefail

    # Redirect stdout and stderr to a file
    echo "Creating log directory..."
    mkdir -p "$LOG_DIRPATH"
    LOG_FILE="${LOG_DIRPATH}/install.log"
    exec > >(tee -a "$LOG_FILE") 2>&1

    # Create postStartCommand script
    POST_START_SCRIPT_DIRPATH="/usr/local/share/app_installation"
    POST_START_SCRIPT_FILEPATH="${POST_START_SCRIPT_DIRPATH}/post-start-command.sh"
    mkdir -p "$POST_START_SCRIPT_DIRPATH"
    {
      echo '#!/usr/bin/env bash'
      echo 'set -euxo pipefail'
    } > "$POST_START_SCRIPT_FILEPATH"
    chmod +x "$POST_START_SCRIPT_FILEPATH"

    echo "Initializing conda..."
    conda init

    if ! echo "$PACKAGES" | jq empty; then
        echo "Invalid JSON in PACKAGES"
        exit 1
    fi

    for conda_env_name in $(echo "$PACKAGES" | jq -r 'keys[]'); do
        value=$(echo "$PACKAGES" | jq -c --arg k "$conda_env_name" '.[$k]')
        packages=$(echo "$value" | jq -c '.packages')

        # Build the base command
        cmd=(
          python "$SCRIPT_FILEPATH"
            --conda-env-name "$conda_env_name"
            --packages "$packages"
            --filepath "$METADATA_FILEPATH"
            --no-self
        )

        # Optionally add --python-version
        if echo "$value" | jq -e 'has("python-version")' > /dev/null; then
            python_version=$(echo "$value" | jq -r '.["python-version"]')
            cmd+=(--python-version "$python_version")
        fi

        # Optionally add --sources
        if echo "$value" | jq -e 'has("sources")' > /dev/null; then
            sources=$(echo "$value" | jq -r '.sources')
            cmd+=(--sources $sources)
        fi

        # Capture and write command output
        output=$("${cmd[@]}")

        # Append output to the file
        while IFS= read -r line; do
            echo "$line" >> "$POST_START_SCRIPT_FILEPATH"
        done <<< "$output"
    done

    echo "Cleaning up cache..."
    conda clean --all -y
devfeature_user_setup:
  # https://github.com/devcontainers/images/blob/main/src/universal/.devcontainer/local-features/setup-user/
  feature:
    id: setup-user
    name: Setup user configs
    version: "0.1.0"
    containerEnv:
      RUBY_HOME: /usr/local/rvm/rubies/default
      JAVA_ROOT: /home/codespace/java
      NODE_ROOT: /home/codespace/nvm
      PHP_ROOT: /home/codespace/.php
      PYTHON_ROOT: /home/codespace/.python
      RUBY_ROOT: /home/codespace/.ruby
      MAVEN_ROOT: /home/codespace/.maven
      HUGO_ROOT: /home/codespace/.hugo
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"
      NUGET_XMLDOC_MODE: skip
      ORYX_ENV_TYPE: vsonline-present
      PYTHONIOENCODING: UTF-8
      NPM_GLOBAL: /home/codespace/.npm-global
      NVS_HOME: /home/codespace/.nvs
      RVM_PATH: /usr/local/rvm
      RAILS_DEVELOPMENT_HOSTS: .githubpreview.dev,.preview.app.github.dev,.app.github.dev
      GOROOT: /usr/local/go
      JUPYTERLAB_PATH: /home/codespace/.local/bin
      PATH: /home/codespace/.dotnet:/home/codespace/nvm/current/bin:/home/codespace/.php/current/bin:/home/codespace/.python/current/bin:/home/codespace/java/current/bin:/home/codespace/.ruby/current/bin:/home/codespace/.local/bin:${PATH}
    options:
      log_dirpath:
        type: string
        description: Absolute path to a directory to write log files.
        default: ${{ __temp__.container_build_log_path }}$/user_setup
  install: |
    #!/usr/bin/env bash
    set -euxo pipefail

    export DEBIAN_FRONTEND=noninteractive

    # Constants
    LOG_FILE_NAME="install.log"
    SUDOERS_DIR="/etc/sudoers.d"

    # Utility: link tool path only if source exists
    link_if_exists() {
        local src="$1"
        local dest="$2"
        local label="$3"

        if [ -e "$src" ]; then
            mkdir -p "$(dirname "$dest")"
            ln -snf "$src" "$dest"
            echo "✔️ Linked $label"
        else
            echo "⏩ Skipped $label (not found: $src)"
        fi
    }

    get_debian_flavor() {
        local codename=""

        if [ -f /etc/os-release ]; then
            . /etc/os-release
            codename="${VERSION_CODENAME:-}"
        fi

        # Fallback to lsb_release if codename is still empty
        if [ -z "$codename" ] && command -v lsb_release >/dev/null 2>&1; then
            codename="$(lsb_release -c -s)"
        fi

        # Final fallback
        codename="${codename:-unknown}"

        echo "$codename"
    }

    # Redirect stdout and stderr to a file
    echo "Creating log directory..."
    mkdir -p "$LOG_DIRPATH"
    exec > >(tee -a "${LOG_DIRPATH}/${LOG_FILE_NAME}") 2>&1

    # Ensure script is run as root
    if [ "$(id -u)" -ne 0 ]; then
        echo -e 'Script must be run as root. Use sudo, su, or add "USER root" to your Dockerfile before running this script.'
        exit 1
    fi

    # Ensure login shells get the correct path if ENV was used to modify PATH.
    rm -f /etc/profile.d/00-restore-env.sh
    echo "export PATH=${PATH//$(sh -lc 'echo $PATH')/\$PATH}" > /etc/profile.d/00-restore-env.sh
    chmod +x /etc/profile.d/00-restore-env.sh

    # Determine the appropriate non-root user
    USERNAME="${USERNAME:-"${_REMOTE_USER:-"automatic"}"}"
    if [ "${USERNAME}" = "automatic" ]; then
        USERNAME=""
        POSSIBLE_USERS=("vscode" "node" "codespace" "$(awk -v val=1000 -F ":" '$3==val{print $1}' /etc/passwd)")
        for CURRENT_USER in "${POSSIBLE_USERS[@]}"; do
            if id -u ${CURRENT_USER} > /dev/null 2>&1; then
                USERNAME=${CURRENT_USER}
                break
            fi
        done
        if [ "${USERNAME}" = "" ]; then
            USERNAME=root
        fi
    elif [ "${USERNAME}" = "none" ] || ! id -u ${USERNAME} > /dev/null 2>&1; then
        USERNAME=root
    fi

    # Set common variables.
    HOME_DIR="/home/${USERNAME}"
    OPT_DIR="/opt"
    DEBIAN_FLAVOR="$(get_debian_flavor)"

    # Enable the oryx tool to generate manifest-dir which is needed for running the postcreate tool.
    # Oryx expects the tool to be installed at `/opt/oryx` and looks for relevant files in there.
    ORYX_DIR="/opt/oryx"
    mkdir -p "$ORYX_DIR"
    echo "vso-focal" > "$ORYX_DIR/.imagetype"
    echo "DEBIAN|${DEBIAN_FLAVOR}-SCM" | tr '[a-z]' '[A-Z]' > "$ORYX_DIR/.ostype"
    if compgen -G "/usr/local/oryx/*" > /dev/null; then
        ln -snf /usr/local/oryx/* "$ORYX_DIR"
    fi

    # Tool links
    DOTNET_PATH="${HOME_DIR}/.dotnet"
    HUGO_PATH="${HOME_DIR}/.hugo/current"
    JAVA_PATH="${HOME_DIR}/java/current"
    MAVEN_PATH="${HOME_DIR}/.maven/current"
    NODE_PATH="${HOME_DIR}/nvm/current"
    PHP_PATH="${HOME_DIR}/.php/current"
    PYTHON_PATH="${HOME_DIR}/.python/current"
    RUBY_PATH="${HOME_DIR}/.ruby/current"

    link_if_exists "/usr/share/dotnet"                          "$DOTNET_PATH"    ".NET SDK"
    link_if_exists "/usr/local/hugo"                            "$HUGO_PATH"      "Hugo"
    link_if_exists "/usr/local/sdkman/candidates/java"          "$JAVA_PATH"      "Java"  #CHECK
    link_if_exists "/usr/local/sdkman/candidates/maven/current" "$MAVEN_PATH"     "Maven"
    link_if_exists "/usr/local/share/nvm"                       "${HOME_DIR}/nvm" "Node.js" #CHECK
    link_if_exists "/usr/local/php/current"                     "$PHP_PATH"       "PHP"
    link_if_exists "/usr/local/python/current"                  "$PYTHON_PATH"    "Python"
    link_if_exists "/usr/local/python"                          "/opt/python"     "Python root"
    link_if_exists "/usr/local/rvm/rubies/default"              "$RUBY_PATH"      "Ruby"

    # .NET special setup
    # Required due to https://github.com/devcontainers/features/pull/628/files#r1276659825
    if [ -d /usr/share/dotnet ]; then
        DOTNET_DIR="/usr/share/dotnet"
        chown -R "$USERNAME:$USERNAME" "$DOTNET_DIR"
        chmod g+r+w+s "$DOTNET_DIR"
        chmod -R g+r+w "$DOTNET_DIR"

        mkdir -p "$OPT_DIR/dotnet/lts"
        cp -R "$DOTNET_DIR/{dotnet,LICENSE.txt,ThirdPartyNotices.txt}" "$OPT_DIR/dotnet/lts" || true
    fi

    # Fix permissions for home directory.
    chown -R "$USERNAME:$USERNAME" "$HOME_DIR"
    chmod -R g+r+w "$HOME_DIR"
    find "${HOME_DIR}" -type d | xargs -n 1 chmod g+s
    # Fix permissions for opt directory.
    if getent group oryx > /dev/null; then
        echo "✅ Group 'oryx' exists, applying group ownership and permissions"
        chown -R "$USERNAME:oryx" "$OPT_DIR"
        chmod -R g+r+w "$OPT_DIR"
        find "$OPT_DIR" -type d | xargs -n 1 chmod g+s
    else
        echo "⚠️ Group 'oryx' does not exist, skipping group-related permission setup for $OPT_DIR"
    fi

    # Customize secure_path for sudo
    SECURE_PATH="${DOTNET_PATH}:${NODE_PATH}/bin:${PHP_PATH}/bin:${PYTHON_PATH}/bin:${JAVA_PATH}/bin:${RUBY_PATH}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin:/usr/local/share:${HOME_DIR}/.local/bin:${PATH}"
    echo "Defaults secure_path=\"$SECURE_PATH\"" >> "${SUDOERS_DIR}/${USERNAME}"

    echo "✅ Dev container user setup complete!"
devcontainer:
  docker-compose:
    config:
      services:
        openjournals:
          container_name: openjournals
          image: openjournals/inara:latest
          entrypoint: [ "/bin/sh" ]
          command: [ "-c", "tail -f /dev/null" ]  # `sleep` is not available in the base image.
          volumes:
            - |-
              #{{
                docker_compose_path = get("devcontainer.docker-compose.path")
                path_depth = len(docker_compose_path.split("/")) - 1
                path_to_root_from_compose_file = "../" * path_depth if path_depth else "."
                return path_to_root_from_compose_file
              }}#:${{ devcontainer.docker-compose.config.services.openjournals.working_dir }}$
          working_dir: ${{ devcontainer_main.container.workspaceFolder }}$
devcontainer_main:
  var:
    conda:
      name: Miniforge3
      version: 24.11.3-2
      dir: /opt/conda
      conda_script: ${{ .dir }}$/etc/profile.d/conda.sh
      mamba_script: ${{ .dir }}$/etc/profile.d/mamba.sh
      app_env: app
      activate: ${{ .app_env }}$
    bash:
      global_bashrc: /etc/bash.bashrc
    zsh:
      global_config_dir: /etc/zsh
      oh_my_zsh_install_dir: ${{ ..user.home }}$/.oh-my-zsh
    git:
      version: "2.49.0"
      prefix: /usr/local/git
    user:
      name: '#{{ return f"{slugify(get("name"))}-dev" }}#'
      group: ${{ .name }}$
      home: /home/${{ .name }}$
      shell: /bin/zsh
      gid: 1000
      uid: 1000
    share_dir: /usr/local/share/#{{ return slugify(get("name")) }}#-container
    log_dir: /var/log/#{{ return slugify(get("name")) }}#-container
    apt_env_dir: ${{ .share_dir }}$/apt-env
    script_dir: ${{ .share_dir }}$/script
    apt_install_script: ${{ .script_dir }}$/_helper/apt-install.sh
  service:
    privileged: true  # Required to use Docker in Docker.
  dockerfile:
    - title: Base Image
      summary: Starting point for the devcontainer.
      instructions:
        - FROM: ubuntu:noble
      description: |
        We use a bare [Ubuntu image](https://hub.docker.com/_/ubuntu)
        for maximum control over the environment.
        The Noble (22.04) release is used,
        which corresponds to the `ubuntu-latest`
        [GitHub Actions runner](https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories)
        as of April 2025.
        For other options, See:
        - [Devcontainer images](https://github.com/devcontainers/images)
          and their corresponding [templates](https://github.com/devcontainers/templates).
        - [Buildpack-deps images](https://github.com/docker-library/buildpack-deps/).
    - title: Arguments and Environment Variables
      summary: Main build arguments and environment variables.
      instructions:
        - ENV: |
            LANG=C.UTF-8
            LC_ALL=C.UTF-8
            PYTHONIOENCODING=UTF-8
            TZ=UTC
        - USER: root
      description: |
        Only include those that affect the build processes
        and do not change frequently.
        Other environment variables can be set
        directly before where its needed
        (or at the end if only needed for the final image)
        to avoid early cache invalidation.
    - title: System Package Installation Script
      summary: Set up the system package installation script.
      instructions:
        - ARG:
            SYSPKG_INSTALL_SCRIPT: "${{ devcontainer_main.var.share_dir }}$/${{ devcontainer_main.file.apt_install_script.path }}$"
        - COPY: |
            ["${{ devcontainer_main.file.apt_install_script.path }}$", "$APT_INSTALL_SCRIPT"]
        - RUN: |
            chmod +x "$APT_INSTALL_SCRIPT"
      description: |
        This step copies the system package installation script
        to the container and makes it executable.
        It is used in later steps to install packages
        from the system package manager.
    - title: APT Packages (Required)
      summary: Installation of required APT packages.
      instructions: '#{{ return hook.docker_apt("main", "required") }}#'
    - title: APT Packages (Essential)
      summary: Installation of essential APT packages.
      instructions: '#{{ return hook.docker_apt("main", "essential") }}#'
    - title: Git Installation
      description: |
        We install [git](https://git-scm.com/doc)
        directly from its [GitHub repository](https://github.com/git/git)
        to get and up-to-date version.
      instructions:
        - ARG: |
            GIT_INSTALL_SCRIPT="${{ devcontainer_main.var.share_dir }}$/${{ devcontainer_main.file.git_install_script.path }}$"
        - COPY: |
            ["${{ devcontainer_main.file.git_install_script.path }}$", "$GIT_INSTALL_SCRIPT"]
        - ENV: |
            PATH=${{ devcontainer_main.var.git.prefix }}$/bin:$PATH
        - RUN: |
            chmod +x "$GIT_INSTALL_SCRIPT";
            "$GIT_INSTALL_SCRIPT"
                --version "${{ devcontainer_main.var.git.version }}$"
                --prefix "${{ devcontainer_main.var.git.prefix }}$"
                --logfile "${{ devcontainer_main.var.log_dir }}$/git_install.log"
                --debug
    - title: User Setup
      summary: Setup user.
      instructions:
        - ARG: |
            USERNAME=${{ devcontainer_main.var.user.name }}$
            USER_HOME=${{ devcontainer_main.var.user.home }}$
            USER_GID=${{ devcontainer_main.var.user.gid }}$
            USER_UID=${{ devcontainer_main.var.user.uid }}$
        - RUN: |
            # Create a new user with the specified UID and GID with sudo access.
            # - https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/common-utils/main.sh#L427-L443
            # - https://code.visualstudio.com/remote/advancedcontainers/add-nonroot-user#_change-the-uidgid-of-an-existing-container-user
            set -eux;
            groupadd --gid $USER_GID $USERNAME;
            useradd
                --create-home
                --home-dir "$USER_HOME"
                --gid $USER_GID
                --shell /bin/bash
                --uid $USER_UID
                $USERNAME;
            # Grant user passwordless sudo access to act as any user.
            echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" | tee /etc/sudoers.d/$USERNAME > /dev/null;
            chmod 0440 /etc/sudoers.d/$USERNAME;
    - title: TeX Live Installation
      summary: Installation of TeX Live.
      instructions:
        - ARG: |
            TEXLIVE_INSTALL_SCRIPT="${{ devcontainer_main.var.share_dir }}$/${{ devcontainer_main.file.texlive_install_script.path }}$"
            TEXLIVE_INSTALL_PROFILE="${{ devcontainer_main.var.share_dir }}$/${{ devcontainer_main.file.texlive_install_profile.path }}$"
        - COPY: |
            ["${{ devcontainer_main.file.texlive_install_script.path }}$", "$TEXLIVE_INSTALL_SCRIPT"]
        - COPY: |
            ["${{ devcontainer_main.file.texlive_install_profile.path }}$", "$TEXLIVE_INSTALL_PROFILE"]
        - RUN: |
            chmod +x "$TEXLIVE_INSTALL_SCRIPT";
            "$TEXLIVE_INSTALL_SCRIPT"
                --profile "$TEXLIVE_INSTALL_PROFILE"
                --logfile "${{ devcontainer_main.var.log_dir }}$/texlive_install.log"
                --debug
    - title: MiniForge Installation
      instructions:
        - ENV: |
            CONDA_DIR=${{ devcontainer_main.var.conda.dir }}$
            PATH=$CONDA_DIR/bin:$PATH
        - ARG: |
            MINIFORGE_INSTALL_SCRIPT="${{ devcontainer_main.var.share_dir }}$/${{ devcontainer_main.file.conda_install_script.path }}$"
        - COPY: |
            ["${{ devcontainer_main.file.conda_install_script.path }}$", "$MINIFORGE_INSTALL_SCRIPT"]
        - RUN: |
            chmod +x "$MINIFORGE_INSTALL_SCRIPT";
            "$MINIFORGE_INSTALL_SCRIPT"
                --name "${{ devcontainer_main.var.conda.name }}$"
                --version "${{ devcontainer_main.var.conda.version }}$"
                --conda-dir "$CONDA_DIR"
                --group "${{ devcontainer_main.var.user.group }}$"
                --user "${{ devcontainer_main.var.user.name }}$"
                --logfile "${{ devcontainer_main.var.log_dir }}$/miniforge_install.log"
                --debug
    - title: APT Packages (Recommended)
      summary: Installation of recommended APT packages.
      instructions: '#{{ return hook.docker_apt("main", "recommended") }}#'
    - title: Conda Environment Installation
      instructions:
        - ARG: |
            CONDA_ENVS_INSTALL_SCRIPT="${{ devcontainer_main.var.share_dir }}$/${{ devcontainer_main.file.conda_env_install_script.path }}$"
            CONDA_ENVS_DIR="${{ devcontainer_main.var.share_dir }}$/${{ devcontainer_main.path.conda.envs }}$"
        - COPY: |
            ["${{ devcontainer_main.file.conda_env_install_script.path }}$", "$CONDA_ENVS_INSTALL_SCRIPT"]
        - COPY: |
            ["${{ devcontainer_main.path.conda.envs }}$/", "$CONDA_ENVS_DIR"]
        - RUN: |
            chmod +x "$CONDA_ENVS_INSTALL_SCRIPT";
            "$CONDA_ENVS_INSTALL_SCRIPT"
                --envs "$CONDA_ENVS_DIR"
                --logfile "${{ devcontainer_main.var.log_dir }}$/conda_envs_install.log"
                --debug
    - title: Copy Files
      instructions:
        - COPY: ${{ control.path.pkg_install_script }}$ ${{ devfeature_pkg_setup.feature.options.script_filepath.default }}$
        - COPY: .github/.repodynamics/metadata.json ${{ devfeature_pkg_setup.feature.options.metadata_filepath.default }}$
    - title: Post-Installation
      summary: Run post-installation tasks.
      instructions:
        - RUN: |
            # Delete default ubuntu user.
            # - Ref: https://github.com/devcontainers/images/blob/main/src/base-ubuntu/.devcontainer/Dockerfile
            if id "ubuntu" &>/dev/null; then
                echo "Deleting user 'ubuntu'" && userdel -f -r ubuntu || echo "Failed to delete ubuntu user.";
            else
                echo "User 'ubuntu' does not exist.";
            fi
    - title: Oh-My-Zsh Installation
      instructions:
        - ARG: |
            OH_MY_ZSH_INSTALL_DIR=${{ devcontainer_main.var.zsh.oh_my_zsh_install_dir }}$
        - RUN: |
            set -eux;
            # Remove write permissions for group and others
            # (only user can write to the directory).
            umask g-w,o-w;
            mkdir -p "$OH_MY_ZSH_INSTALL_DIR";
            git clone
                --depth=1
                -c core.eol=lf
                -c core.autocrlf=false
                -c fsck.zeroPaddedFilemode=ignore
                -c fetch.fsck.zeroPaddedFilemode=ignore
                -c receive.fsck.zeroPaddedFilemode=ignore
                "https://github.com/ohmyzsh/ohmyzsh"
                "$OH_MY_ZSH_INSTALL_DIR" 2>&1;
            # Shrink git while still enabling updates
            cd "$OH_MY_ZSH_INSTALL_DIR";
            git repack -a -d -f --depth=1 --window=1;
    - title: APT Packages (Optional)
      summary: Installation of recommended APT packages.
      instructions: '#{{ return hook.docker_apt("main", "optional") }}#'
    - title: Finalization
      instructions:
        - ARG: |
            USER_SHELL=${{ devcontainer_main.var.user.shell }}$
        - RUN: |
            # Ensure that login shells get the correct path if the user updated the PATH using ENV.
            # - https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/common-utils/main.sh#L343-L346
            rm -f /etc/profile.d/00-restore-env.sh
            echo "export PATH=${PATH//$(sh -lc 'echo $PATH')/\$PATH}" > /etc/profile.d/00-restore-env.sh
            chmod +x /etc/profile.d/00-restore-env.sh

            # Give user ownership of the entire home directory.
            chown --recursive "$USERNAME:$USERNAME" "$HOME_DIR";

            # Give the group (g) read and write (r+w) permissions on the entire home directory.
            chmod --recursive g+r+w "$HOME_DIR";

            # Set the group ID (g+s) on all directories in the home directory
            # so that new files and directories created in the home directory inherit the group ID.
            find "${HOME_DIR}" -type d | xargs -n 1 chmod g+s;

            # Set user's default shell.
            # Fix `chsh`` always asking for a password on alpine linux
            # - Ref: https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/common-utils/main.sh#L520-L528
            # - Ref: https://askubuntu.com/questions/812420/chsh-always-asking-a-password-and-get-pam-authentication-failure.
            if [ ! -f "/etc/pam.d/chsh" ] || ! grep -Eq '^auth(.*)pam_rootok\.so$' /etc/pam.d/chsh; then
                echo "auth sufficient pam_rootok.so" >> /etc/pam.d/chsh;
            elif [[ -n "$(awk '/^auth(.*)pam_rootok\.so$/ && !/^auth[[:blank:]]+sufficient[[:blank:]]+pam_rootok\.so$/' /etc/pam.d/chsh)" ]]; then
                awk '/^auth(.*)pam_rootok\.so$/ { $2 = "sufficient" } { print }' /etc/pam.d/chsh > /tmp/chsh.tmp && mv /tmp/chsh.tmp /etc/pam.d/chsh;
            fi;
            chsh --shell "$USER_SHELL" "$USERNAME";
        - ENV: |
            BASH_ENV=${{ devcontainer_main.volume.bashenv.path }}$
    - title: Entry
      instructions:
        - CMD: |
            [ "sleep", "infinity" ]
  container:
    name: Main Development Environment
    workspaceFolder: /#{{ return slugify(get("name")) }}#
    containerUser: ${{ devcontainer_main.var.user.name }}$
    remoteUser: ${{ .containerUser }}$
    forwardPorts:
      - ${{ __temp__.port.jupyter }}$
      - ${{ __temp__.port.desktop_lite.web }}$
      - ${{ __temp__.port.desktop_lite.vnc }}$
    portsAttributes:
      '#{{ return str(get("__temp__.port.desktop_lite.web")) }}#':
        label: Desktop Lite (web)
        onAutoForward: openBrowserOnce
        elevateIfNeeded: true
      '#{{ return str(get("__temp__.port.desktop_lite.vnc")) }}#':
        label: Desktop Lite (VNC)
        elevateIfNeeded: true
      '#{{ return str(get("__temp__.port.jupyter")) }}#':
        label: Jupyter
        onAutoForward: openBrowserOnce
        elevateIfNeeded: true
    features:
      # https://github.com/devcontainers/features/tree/main/src/common-utils
      ghcr.io/devcontainers/features/common-utils:2:
        installZsh: true
        configureZshAsDefaultShell: true
        installOhMyZsh: true
        installOhMyZshConfig: true
        upgradePackages: true
        username: ${{ devcontainer_main.container.containerUser }}$
        userUid: "1000"
        userGid: "1000"
      # https://github.com/devcontainers/features/tree/main/src/desktop-lite
      ghcr.io/devcontainers/features/desktop-lite:1:
        version: latest
        password: noPassword
        webPort: '#{{ return str(get("__temp__.port.desktop_lite.web")) }}#'
        vncPort: '#{{ return str(get("__temp__.port.desktop_lite.vnc")) }}#'
      # https://github.com/devcontainers/features/tree/main/src/docker-outside-of-docker
      ghcr.io/devcontainers/features/docker-outside-of-docker:1:
        # Note: This feature is incompatible with the Docker-in-Docker feature
        # - https://github.com/devcontainers/features/issues/742#issuecomment-1793019485
        version: latest
      # https://github.com/devcontainers/features/tree/main/src/git-lfs
      ghcr.io/devcontainers/features/git-lfs:1:
        version: latest
        autoPull: true
      # https://github.com/devcontainers/features/tree/main/src/github-cli
      ghcr.io/devcontainers/features/github-cli:1:
        version: latest
      # https://github.com/devcontainers/features/tree/main/src/node
      ghcr.io/devcontainers/features/node:1:
        version: latest
        nodeGypDependencies: true
        nvmInstallPath: /usr/local/share/nvm
        pnpmVersion: latest
        nvmVersion: latest
        installYarnUsingApt: true
      # https://github.com/devcontainers/features/tree/main/src/oryx
      ghcr.io/devcontainers/features/oryx:1: {}
      # https://github.com/devcontainers/features/tree/main/src/ruby
      ghcr.io/devcontainers/features/ruby:1:
        version: latest
      # https://github.com/devcontainers/features/tree/main/src/rust
      ghcr.io/devcontainers/features/rust:1:
        version: latest
        profile: minimal
      # https://github.com/devcontainers/features/tree/main/src/sshd
      ghcr.io/devcontainers/features/sshd:1:
        version: latest
      # Local features
      ./${{ devfeature_user_setup.path }}$: {}
      ./${{ devfeature_pkg_setup.path }}$:
        packages: >-
          {
            \"${{ __temp__.conda_env_name.app }}$\": {
              \"packages\": [
                {
                  \"id\": \"main\",
                  \"extras\": \"all\"
                },
                {
                  \"id\": \"test\",
                  \"extras\": \"all\"
                }
              ],
              \"python-version\": \"${{ pypkg_main.python.version.minors[0] }}$\",
              \"sources\": \"pip conda apt bash\"
            },
            \"${{ devcontainer_main.environment.website.name }}$\": {
              \"packages\": [
                {
                  \"id\": \"ci\",
                  \"extras\": \"all\"
                }
              ],
              \"python-version\": \"${{ pypkg_ci.python.version.minors[-1] }}$\",
              \"sources\": \"pip conda apt bash\"
            }
          }
    overrideFeatureInstallOrder:
      - ghcr.io/devcontainers/features/common-utils
      - ghcr.io/devcontainers/features/desktop-lite:1
      - ghcr.io/devcontainers/features/node
      - ghcr.io/devcontainers/features/ruby
      - ghcr.io/devcontainers/features/sshd
      - ghcr.io/devcontainers/features/git-lfs
      - ghcr.io/devcontainers/features/github-cli
      - ghcr.io/devcontainers/features/docker-outside-of-docker
      - ghcr.io/devcontainers/features/oryx
      - ./${{ devfeature_user_setup.path }}$
      - ghcr.io/devcontainers-extra/features/apt-get-packages
      - ./${{ devfeature_pkg_setup.path }}$
    remoteEnv:
      # https://github.com/devcontainers/features/tree/main/src/docker-outside-of-docker#1-use-the-localworkspacefolder-as-environment-variable-in-your-code
      LOCAL_WORKSPACE_FOLDER: "${localWorkspaceFolder}"
    postCreateCommand:
      install_devcontainers_cli: [npm, install, -g, '@devcontainers/cli']
      pre_commit_install:
        - conda
        - run
        - --name
        - ${{ devcontainer_main.environment.pre_commit.name }}$
        - --live-stream
        - -vv
        - pre-commit
        - install
        - --install-hooks
        - --config
        - ${{ devcontainer_main.environment.pre_commit.file.pre_commit_config.path }}$
      activate_conda_env: >-
        echo 'conda activate ${{ __temp__.conda_env_name.app }}$' | tee -a ~/.bashrc ~/.bash_profile ~/.zshrc ~/.zprofile
    customizations:
      vscode:
        extensions:
          - ms-python.python
          - ms-python.vscode-pylance
          - ms-python.debugpy
          - ms-toolsai.jupyter
          - ms-toolsai.jupyter-keymap
          - ms-toolsai.jupyter-renderers
          - ms-vscode.cpptools
          - ritwickdey.LiveServer
          - VisualStudioExptTeam.vscodeintellicode
          - ms-toolsai.vscode-jupyter-cell-tags
          - ms-toolsai.vscode-jupyter-slideshow
          - twxs.cmake
          - ms-vscode.cmake-tools
          - redhat.java
          - ms-azuretools.vscode-docker
          - dbaeumer.vscode-eslint
          - eamodio.gitlens
          - ms-vscode.cpptools-extension-pack
          - VisualStudioExptTeam.intellicode-api-usage-examples
          - formulahendry.code-runner
          - GitHub.copilot
          - GitHub.copilot-chat
          - GitHub.vscode-pull-request-github
          - ms-vscode-remote.remote-ssh-edit
          - ecmel.vscode-html-css
          - formulahendry.auto-rename-tag
          - redhat.vscode-yaml
          - MS-vsliveshare.vsliveshare
          - xabikos.JavaScriptSnippets
          - ms-vscode.remote-explorer
          - christian-kohler.path-intellisense
          - golang.Go
          - formulahendry.auto-close-tag
          - bmewburn.vscode-intelephense-client
          - streetsidesoftware.code-spell-checker
          - donjayamanne.githistory
          - KevinRose.vsc-python-indent
          - njpwerner.autodocstring
          - wholroyd.jinja
          - jeff-hykin.better-cpp-syntax
          - mechatroner.rainbow-csv
          - techer.open-in-browser
          - mhutchie.git-graph
          - yzhang.markdown-all-in-one
          - Zignd.html-css-class-completion
          - DavidAnson.vscode-markdownlint
          - aaron-bond.better-comments
          - naumovs.color-highlight
          - redhat.vscode-xml
          - tomoki1207.pdf
          - pranaygp.vscode-css-peek
          - shd101wyy.markdown-preview-enhanced
          - ms-vscode.makefile-tools
          - GitHub.codespaces
          - rust-lang.rust-analyzer
          - GitHub.remotehub
          - ms-vscode.remote-repositories
          - GitHub.vscode-github-actions
          - thekalinga.bootstrap4-vscode
          - ziyasal.vscode-open-in-github
          - ZainChen.json
          - kisstkondoros.vscode-gutter-preview
          - tamasfe.even-better-toml
          - shardulm94.trailing-spaces
          - quicktype.quicktype
          - yzane.markdown-pdf
          - bierner.markdown-mermaid
          - GraphQL.vscode-graphql
          - ms-python.pylint
          - bierner.github-markdown-preview
          - jock.svg
          - charliermarsh.ruff
          - ms-python.mypy-type-checker
          - graphql.vscode-graphql-syntax
          - James-Yu.latex-workshop
          - ExecutableBookProject.myst-highlight
        settings:
          github.copilot.chat.codeGeneration.instructions:
            - text: >-
                This dev container includes an up-to-date version of Git
                pre-installed and available on the `PATH`.
            - text: >-
                This dev container includes the conda and mamba package managers
                pre-installed and available on the `PATH`.
                Additional packages installed using Conda/Mamba will be downloaded
                from conda-forge or another repository configured by the user.
                A user can install different versions of Python
                than the one in this dev container by running a command like:
                `conda install python=3.13`
          jupyter.kernels.filter:
            - path: /opt/conda/bin/python
              type: pythonEnvironment
            - path: /opt/conda/envs/${{ __temp__.conda_env_name.app }}$/bin/python
              type: pythonEnvironment
          lldb.executable: /usr/bin/lldb
          python.defaultInterpreterPath: /opt/conda/envs/${{ __temp__.conda_env_name.app }}$/bin/python
          terminal.integrated.fontFamily: MesloLGS NF
          # The MesloLGS font is downloaded in the zsh installation script.
          # This is the recommended font for the Powerlevel10k Zsh theme.
          # Without it, the terminal icons may not render correctly.
          # - https://github.com/romkatv/powerlevel10k?tab=readme-ov-file#fonts
          # - https://github.com/romkatv/powerlevel10k/issues/671#issuecomment-621031981
          terminal.integrated.fontLigatures.enabled: true
          terminal.integrated.scrollback: 1000000
          tasks:
            version: 2.0.0
            tasks:
              - label: Build Paper (Final)
                type: process
                command: inara
                args: [ "-p", "-o", "pdf", "-v", "${file}" ]
                group:
                  kind: build
                  isDefault: true
                presentation:
                  reveal: always
                  echo: true
                  focus: true
                  panel: new
              - label: Build Paper (Draft)
                type: process
                command: inara
                args: [ "-o", "pdf,contextpdf,tex,preprint,docx,html,crossref,cff", "-vv", "${file}" ]
                group:
                  kind: build
                  isDefault: false
                presentation:
                  reveal: always
                  echo: true
                  focus: true
                  panel: new
  apt:
    apt-utils:
      summary: APT utilities for package management.
      group: required
      description: |
        Provides internal APT tools used by frontends like apt-get and
        aptitude. It enables progress reporting and other features.
        Recommended for interactive or scripted environments.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man8/apt-get.8.html
        package: https://packages.ubuntu.com/noble/apt-utils
        source: https://salsa.debian.org/apt-team/apt
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    autoconf:
      summary: Tool for generating configure scripts for building software.
      group: recommended
      description: |
        Autoconf is a tool for producing shell scripts that automatically
        configure software source code packages to adapt to many kinds of
        Unix-like systems. It is essential for building software from
        source that uses the GNU build system.
      url:
        docs: https://www.gnu.org/software/autoconf/manual/autoconf.html
        source: https://git.savannah.gnu.org/git/autoconf.git
    automake:
      summary: Tool for automatically generating Makefile.in files.
      group: recommended
      description: |
        Automake is a tool for automatically generating Makefile.in files
        compliant with the GNU Coding Standards. It is used in conjunction
        with Autoconf to create portable and configurable build systems.
      url:
        docs: https://www.gnu.org/software/automake/manual/automake.html
        source: https://git.savannah.gnu.org/git/automake.git
    bash-completion:
      summary: Programmable completion for the Bash shell.
      group: recommended
      description: |
        Adds intelligent tab-completion for Bash commands and arguments.
        Useful for interactive shell users.
      url:
        docs: https://github.com/scop/bash-completion
        package: https://packages.ubuntu.com/noble/bash-completion
        source: https://salsa.debian.org/debian/bash-completion
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    build-essential:
      summary: Meta-package for essential compilation tools on Ubuntu.
      group: required
      dependents: [ git ]
      description: |
        The 'build-essential' package is a meta-package that installs a
        collection of packages necessary for compiling software on Ubuntu.
        It includes the GNU Compiler Collection (gcc and g++), make, and
        other tools required for building Debian packages and compiling
        software from source. This package simplifies the setup of a
        development environment by ensuring all essential compilation tools
        are installed.
      url:
        docs: https://itsfoss.com/build-essential-ubuntu/
    bzip2:
      summary: High-quality data compressor.
      group: required
      description: |
        bzip2 is a freely available, patent-free, high-quality data
        compressor. It compresses files using the Burrows-Wheeler block
        sorting text compression algorithm and Huffman coding.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/bzip2.1.html
        source: https://sourceware.org/git/bzip2.git
    ca-certificates:
      summary: Common CA certificates for HTTPS and TLS validation.
      group: required
      description: |
        This package installs a set of trusted Certificate Authority (CA)
        certificates used by SSL/TLS applications to verify the authenticity
        of remote servers. It is essential for secure HTTPS communication,
        ensuring that tools like curl and wget can establish trusted
        connections. Without it, many secure operations would fail due to
        untrusted certificates.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/man8/update-ca-certificates.8.html
    clang:
      summary: C, C++, and Objective-C compiler based on LLVM.
      group: essential
      description: |
        Clang is a compiler for C, C++, and Objective-C languages,
        offering fast compilation and expressive diagnostics. It is part
        of the LLVM project and is designed to be highly compatible with
        GCC. Clang is essential for developers who require a modern,
        standards-compliant compiler with excellent tooling support.
      url:
        docs: https://clang.llvm.org/docs/
        package: https://packages.ubuntu.com/noble/clang
        source: https://github.com/llvm/llvm-project
    cmake:
      summary: Cross-platform build system generator.
      group: essential
      description: |
        CMake is a tool that manages the build process in an operating
        system and compiler-independent manner. It uses configuration
        files to generate native build environments, such as Makefiles
        or Visual Studio project files. CMake is essential for building
        complex software projects, especially those that are cross-platform.
      url:
        docs: https://cmake.org/documentation/
        package: https://packages.ubuntu.com/noble/cmake
        source: https://gitlab.kitware.com/cmake/cmake
    cppcheck:
      summary: Static analysis tool for C/C++ code.
      group: recommended
      description: |
        Cppcheck is a static analysis tool that detects bugs and
        stylistic issues in C/C++ code. It focuses on finding undefined
        behavior and dangerous coding constructs. Cppcheck is recommended
        for developers aiming to improve code quality and maintainability.
      url:
        docs: https://cppcheck.sourceforge.io/manual.pdf
        package: https://packages.ubuntu.com/noble/cppcheck
        source: https://github.com/danmar/cppcheck
    curl:
      summary: Command-line tool for transferring data with URL syntax.
      group: required
      description: |
        curl is a versatile tool for transferring data from or to a server,
        supporting various protocols including HTTP, HTTPS, FTP, and more.
        It's widely used in scripts and applications for downloading files,
        interacting with APIs, and testing endpoints. In a development
        environment, it's indispensable for tasks like fetching dependencies
        or testing web services.
      url:
        docs: https://curl.se/docs/
        source: https://github.com/curl/curl
    default-jre:
      summary: Standard Java Runtime Environment (OpenJDK 21).
      group: essential
      dependents: [ tex ]
      description: |
        This package serves as a metapackage that depends on the
        recommended Java Runtime Environment for Ubuntu, which is
        OpenJDK 21 in Noble. It's useful for running Java applications
        and is commonly required for Java-based development tools.
      url:
        docs: https://ubuntu.com/tutorials/install-jre
    default-libmysqlclient-dev:
      summary: MySQL database development files.
      group: recommended
      description: |
        This package provides the development files for the MySQL client
        library. It is used for compiling software that interacts with
        MySQL databases.
      url:
        docs: https://dev.mysql.com/doc/
        source: https://salsa.debian.org/mariadb-team/mysql-defaults
    dialog:
      summary: Display user-friendly dialog boxes from shell scripts.
      group: recommended
      description: |
        The 'dialog' package allows shell scripts to present
        interactive dialog boxes, such as menus, input boxes, and
        message boxes, in a terminal interface. It is useful for
        creating user-friendly command-line interfaces. While not
        essential, it is recommended for scripts that require user
        interaction.
      url:
        docs: https://invisible-island.net/dialog/dialog.html
        package: https://packages.ubuntu.com/noble/dialog
        source: https://salsa.debian.org/debian/dialog
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    dirmngr:
      summary: Network certificate management service for GnuPG.
      group: essential
      description: |
        Handles network operations for GnuPG, such as retrieving
        certificates and CRLs. Required for managing keys and verifying
        signatures from keyservers.
      url:
        docs: https://gnupg.org/documentation/manuals/gnupg/
        package: https://packages.ubuntu.com/noble/dirmngr
        source: https://dev.gnupg.org/source/dirmngr/
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    dpkg-dev:
      summary: Debian package development tools.
      group: essential
      description: |
        The dpkg-dev package contains the tools necessary to unpack,
        build, and upload Debian source packages. It includes programs
        like dpkg-source and dpkg-buildpackage.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/dpkg-buildpackage.1.html
        source: https://salsa.debian.org/dpkg-team/dpkg
    equivs:
      summary: Tool for creating custom Debian packages to manage dependencies.
      group: required
      dependents: [ tex ]
      description: |
        The 'equivs' package provides utilities to create minimal Debian
        packages, often containing only dependency information. This is
        particularly useful for creating metapackages that declare
        dependencies on other packages, facilitating the installation of
        custom package sets. It can also be employed to satisfy
        dependencies for packages not available in the repositories or
        to override existing package dependencies.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/equivs-build.1.html
        package: https://packages.ubuntu.com/noble/equivs
        source: https://salsa.debian.org/perl-team/modules/packages/equivs.git
      notes: |
        This is required for the TeX Live installation in the Dockerfile.
    file:
      summary: Determines file type using magic numbers.
      group: essential
      description: |
        The file command tests each argument in an attempt to classify it.
        It uses a magic number database to identify file types.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/file.1.html
        source: https://github.com/file/file
    fish:
      summary: User-friendly interactive Unix shell.
      group: optional
      description: |
        Fish (Friendly Interactive SHell) is a modern command-line shell
        focused on user experience and interactivity. It offers features
        like autosuggestions, syntax highlighting, and advanced tab
        completion out of the box. Unlike traditional shells, fish is not
        POSIX-compliant, which may affect compatibility with some scripts.
        It is optional and primarily used by users seeking an enhanced
        interactive shell experience.
      url:
        docs: https://fishshell.com/docs/current/
        source: https://github.com/fish-shell/fish-shell
      post_install: |
        # Setup Fish
        # - https://github.com/devcontainers/images/blob/0f13a9b8a31b9c81be78abfc404cc00748e946bb/src/universal/.devcontainer/Dockerfile#L85-L88
        FISH_PROMPT="function fish_prompt\n    set_color green\n    echo -n (whoami)\n    set_color normal\n    echo -n \":\"\n    set_color blue\n    echo -n (pwd)\n    set_color normal\n    echo -n \"> \"\nend\n";
        printf "$FISH_PROMPT" >> /etc/fish/functions/fish_prompt.fish;
        printf "if type code-insiders > /dev/null 2>&1; and not type code > /dev/null 2>&1\n  alias code=code-insiders\nend" >> /etc/fish/conf.d/code_alias.fish;
    fontconfig:
      summary: Font configuration and customization library.
      group: essential
      dependents: [ tex ]
      description: |
        Fontconfig is a library designed to provide system-wide font
        configuration, customization, and application access. It is
        essential for applications that require font discovery and
        configuration, especially in graphical environments.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man5/fonts-conf.5.html
    fonts-freefont-otf:
      summary: Free high-quality OpenType fonts covering the UCS character set.
      group: optional
      description: |
        The 'fonts-freefont-otf' package provides the GNU FreeFont
        collection, which includes FreeSerif, FreeSans, and FreeMono
        OpenType fonts. These fonts offer extensive coverage of the
        Unicode character set, supporting various scripts and symbols.
        While valuable for applications requiring broad Unicode support,
        this package is optional and primarily used in contexts where
        comprehensive font coverage is necessary.
      url:
        docs: https://www.gnu.org/software/freefont/
        package: https://packages.ubuntu.com/noble/fonts-freefont-otf
        source: https://savannah.gnu.org/projects/freefont/
      notes: |
        Included in the [Sphinx Docker image](https://github.com/sphinx-doc/sphinx-docker-images/blob/master/latexpdf/Dockerfile).
    g++:
      summary: GNU C++ compiler.
      group: required
      description: |
        g++ is the GNU C++ compiler, part of the GNU Compiler Collection
        (GCC). It is used to compile C++ programs.
      url:
        docs: https://gcc.gnu.org/onlinedocs/gcc/
        source: https://gcc.gnu.org/git.html
    gcc:
      summary: GNU C compiler.
      group: required
      description: |
        gcc is the GNU C compiler, part of the GNU Compiler Collection
        (GCC). It is used to compile C programs.
      url:
        docs: https://gcc.gnu.org/onlinedocs/gcc/
        source: https://gcc.gnu.org/git.html
    gdb:
      summary: GNU Debugger for debugging applications.
      group: essential
      description: |
        GDB is the GNU Project debugger, allowing developers to see what
        is happening inside a program while it executes or what it was
        doing at the moment it crashed. It supports various programming
        languages, including C, C++, and Fortran. GDB is essential for
        debugging applications and analyzing program behavior.
      url:
        docs: https://sourceware.org/gdb/documentation/
        package: https://packages.ubuntu.com/noble/gdb
        source: https://sourceware.org/git/binutils-gdb.git
    gettext:
      summary: GNU Internationalization utilities.
      group: essential
      dependents: [ git ]
      description: |
        gettext provides a set of tools and libraries for internationalizing
        and localizing software. It enables programs to be translated into
        different languages, facilitating global software distribution.
        This package is essential for developing applications that support
        multiple languages and locales.
      url:
        docs: https://www.gnu.org/software/gettext/manual/
        package: https://packages.ubuntu.com/noble/gettext
        source: https://git.savannah.gnu.org/git/gettext.git
    ghostscript:
      summary: Interpreter for PostScript and PDF formats.
      group: recommended
      dependents: [ tex ]
      description: |
        Ghostscript is a versatile processor for PostScript and PDF files,
        enabling rendering, conversion, and printing tasks. It serves as a
        backend for applications like ghostview and is capable of displaying
        documents in X11 environments. Additionally, it can render files for
        printing on non-PostScript printers, supporting various printer models.
        While not essential for all development environments, it's recommended
        for projects involving document processing or printing functionalities.
      url:
        docs: https://www.ghostscript.com/doc/current/
        package: https://packages.ubuntu.com/noble/ghostscript
        source: https://github.com/ArtifexSoftware/ghostpdl
      notes: |
        Required for eps conversion (see [Island of Tex Dockerfile](https://gitlab.com/islandoftex/images/texlive/-/blob/72240db12e00510972aeea19cd0a08edc22c4152/Dockerfile.base#L26)).
    gnupg:
      summary: GNU Privacy Guard - encryption and signing tool.
      group: required
      description: |
        GnuPG is a complete and free implementation of the OpenPGP standard,
        allowing for encryption and signing of data and communications.
        It's crucial for verifying the integrity of downloaded packages
        and repositories, especially when adding third-party sources
        or installing software from external sources.
      url:
        docs: https://gnupg.org/documentation/index.html
    gnuplot-nox:
      summary: Command-line driven interactive plotting program.
      group: recommended
      dependents: [ tex ]
      description: |
        gnuplot-nox is a terminal-based variant of the gnuplot utility,
        designed for environments without an X server. It enables the
        creation of 2D and 3D plots, supporting various output formats
        such as PostScript, PDF, PNG, and SVG. This version excludes
        graphical interfaces like X11 or Qt, making it suitable for
        headless systems or automated workflows. It's particularly
        beneficial in development environments where graphical output
        isn't required, and plotting needs to be integrated into scripts
        or pipelines.
      url:
        docs: https://gnuplot.info/documentation.html
        package: https://packages.ubuntu.com/noble/gnuplot-nox
        source: https://launchpad.net/ubuntu/noble/+source/gnuplot
      notes: |
        Required for 'gnuplot' backend of 'pgfplots' in TeX (see [Island of Tex Dockerfile](https://gitlab.com/islandoftex/images/texlive/-/blob/72240db12e00510972aeea19cd0a08edc22c4152/Dockerfile.base#L32)).
    gpg:
      summary: OpenPGP encryption and signing tool.
      group: required
      dependents: [ tex ]
      description: |
        GnuPG (GPG) is a complete and free implementation of the OpenPGP
        standard, providing encryption and signing services for data and
        communications. It features comprehensive key management and
        supports modern encryption algorithms. GPG is essential for secure
        communications, verifying software signatures, and managing
        cryptographic keys in development environments.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/gpg.1.html
        source: https://github.com/gpg/gnupg
    gpg-agent:
      summary: Daemon for managing private keys and passphrase caching.
      group: required
      dependents: [ tex ]
      description: |
        gpg-agent is a background process that manages private keys and
        caches passphrases for GnuPG. It operates independently of any
        protocol and is used as a backend for gpg and other utilities. The
        agent is automatically started on demand by GnuPG components,
        eliminating the need for manual initiation. It also supports SSH
        authentication, allowing it to act as an SSH agent.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/gpg-agent.1.html
        source: https://github.com/gpg/gnupg
    graphviz:
      summary: Graph visualization software.
      group: recommended
      description: |
        Graphviz is a powerful tool for creating visual
        representations of abstract graphs and networks. It
        automatically generates diagrams from textual descriptions
        using the DOT language. This is particularly useful for
        developers and researchers who need to visualize data
        structures, workflows, or relationships. While not essential
        for all development environments, it is recommended for
        those requiring graphical representations of complex
        systems.
      url:
        docs: https://graphviz.org/documentation/
        package: https://packages.ubuntu.com/noble/graphviz
        source: https://gitlab.com/graphviz/graphviz
      notes: |
        Included in the [Sphinx Docker image](https://github.com/sphinx-doc/sphinx-docker-images/blob/master/latexpdf/Dockerfile).
    htop:
      summary: Interactive process viewer for Unix systems.
      group: recommended
      description: |
        htop is an interactive process viewer that provides a
        real-time, colorized display of system processes. It
        allows users to scroll through the process list
        vertically and horizontally, and to perform actions
        such as killing or renicing processes without entering
        their PIDs. While not essential, it is recommended for
        users who require a more user-friendly alternative to
        the traditional 'top' command.
      url:
        docs: https://htop.dev/
        package: https://packages.ubuntu.com/noble/htop
        source: https://github.com/htop-dev/htop
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    imagemagick:
      summary: Image manipulation tools.
      group: recommended
      description: |
        ImageMagick is a software suite to create, edit, compose, or
        convert bitmap images. It can read and write images in a variety
        of formats.
      url:
        docs: https://imagemagick.org/script/resources.php
        package: https://packages.ubuntu.com/noble/imagemagick
        source: https://github.com/ImageMagick/ImageMagick
      notes: |
        Included in the [Sphinx Docker image](https://github.com/sphinx-doc/sphinx-docker-images/blob/master/latexpdf/Dockerfile).
    init-system-helpers:
      summary: Tools for managing compatibility across init systems.
      group: essential
      description: |
        Provides key scripts (`service`, `invoke-rc.d`, etc.) used by
        Debian-based systems to manage services and maintain
        compatibility across different init systems (systemd, SysV,
        etc.). Essential for correct package installation and service
        handling during boot and runtime.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man8/service.8.html
        package: https://packages.ubuntu.com/noble/init-system-helpers
        source: https://salsa.debian.org/debian/init-system-helpers
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    inotify-tools:
      summary: Command-line utilities for inotify.
      group: recommended
      description: |
        inotify-tools provides command-line programs for using inotify,
        a Linux kernel subsystem that monitors file system events. Tools
        like inotifywait and inotifywatch allow scripts and applications
        to respond to file changes in real-time. This package is recommended
        for automating tasks that depend on file system events.
      url:
        docs: https://github.com/inotify-tools/inotify-tools
        package: https://packages.ubuntu.com/noble/inotify-tools
        source: https://github.com/inotify-tools/inotify-tools
    iproute2:
      summary: Networking and traffic control utilities.
      group: required
      description: |
        Provides tools like 'ip' and 'tc' for configuring network
        interfaces and managing routing. Essential for network setup and
        diagnostics.
      url:
        docs: https://man7.org/linux/man-pages/man8/ip.8.html
        package: https://packages.ubuntu.com/noble/iproute2
        source: https://git.kernel.org/pub/scm/network/iproute2/iproute2.git
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    jq:
      summary: Command-line JSON processor.
      group: required
      description: |
        jq is a lightweight and flexible command-line tool for processing
        JSON data. It allows for parsing, filtering, mapping, and
        transforming structured JSON input, making it invaluable for
        developers and system administrators working with APIs, logs, or
        configuration files. jq's powerful query language enables complex
        data manipulations directly from the command line. It is essential
        in environments where JSON data handling is a routine task.
      url:
        docs: https://stedolan.github.io/jq/manual/
        package: https://packages.ubuntu.com/noble/jq
        source: https://github.com/stedolan/jq
    less:
      summary: Terminal pager for viewing text one screen at a time.
      group: essential
      description: |
        The 'less' command is a terminal pager that allows users to
        view the contents of text files one screen at a time. Unlike
        traditional text editors, 'less' does not load the entire file
        into memory, making it efficient for viewing large files. It
        supports both forward and backward navigation, search
        functionality, and various display options. 'less' is commonly
        used in conjunction with other commands to paginate output,
        making it an essential tool for command-line environments.
      url:
        docs: https://man7.org/linux/man-pages/man1/less.1.html
        package: https://packages.ubuntu.com/noble/less
        source: https://github.com/gwsw/less
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libatk-bridge2.0-0:
      summary: AT-SPI 2 toolkit bridge.
      group: recommended
      description: |
        libatk-bridge2.0-0 provides a bridge between ATK (Accessibility Toolkit)
        and the Assistive Technology Service Provider Interface (AT-SPI).
        It enables accessibility tools to interact with applications using the ATK framework.
        This package is required for accessibility support in GTK applications.
      url:
        docs: https://wiki.gnome.org/Accessibility
        package: https://packages.ubuntu.com/noble/libatk-bridge2.0-0
        source: https://gitlab.gnome.org/GNOME/at-spi2-atk
    libatk1.0-0:
      summary: ATK accessibility toolkit.
      group: recommended
      description: |
        libatk1.0-0 provides the ATK (Accessibility Toolkit) library,
        which offers a set of interfaces for accessibility.
        It allows assistive technologies to interact with applications.
        This package is required for applications that support accessibility features.
      url:
        docs: https://developer.gnome.org/atk/
        package: https://packages.ubuntu.com/noble/libatk1.0-0
        source: https://gitlab.gnome.org/GNOME/atk
    libbz2-dev:
      summary: Development files for the bzip2 compression library.
      group: essential
      description: |
        This package provides the headers and static libraries for the
        bzip2 compression library, which implements the Burrows-Wheeler
        block-sorting text compression algorithm. It's essential for
        compiling software that uses bzip2 compression, commonly found in
        source archives and data processing tools.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man3/bzlib.3.html
        package: https://packages.ubuntu.com/noble/libbz2-dev
        source: https://sourceware.org/git/bzip2.git
    libc6:
      summary: GNU C Library Shared libraries.
      group: required
      description: |
        The 'libc6' package provides the standard C library, a core
        component of the GNU system and the GNU/Linux systems. It defines
        the system calls and other basic functions necessary for building
        and running C programs. This package is fundamental to the
        operation of the system and is required for the execution of
        virtually all programs.
      url:
        docs: https://www.gnu.org/software/libc/manual/
        source: https://sourceware.org/git/glibc.git
    libc6-dev:
      summary: Development files for the GNU C Library.
      group: required
      description: |
        This package contains the headers and object files necessary for
        compiling and linking programs that use the standard C library.
        It's a fundamental component for building C programs and is
        required for most development environments.
      url:
        docs: https://www.gnu.org/software/libc/manual/
        source: https://sourceware.org/git/glibc.git
    libcups2:
      summary: Common UNIX Printing System library.
      group: recommended
      description: |
        libcups2 provides the core printing functionality for Unix-like
        systems, enabling applications to print documents via the CUPS
        printing system. While not essential for most development
        environments, it is recommended for applications that require
        printing capabilities.
      url:
        docs: https://www.cups.org/doc/
        package: https://packages.ubuntu.com/noble/libcups2
        source: https://github.com/OpenPrinting/cups
    libcurl4-openssl-dev:
      summary: Development files for libcurl with OpenSSL support.
      group: essential
      dependents: [ git ]
      description: |
        This package provides the development files for libcurl compiled
        with OpenSSL support. libcurl is a client-side URL transfer
        library supporting various protocols, including HTTP, HTTPS, FTP,
        and more. It's widely used in applications that require data
        transfer capabilities.
      url:
        docs: https://curl.se/libcurl/
        package: https://packages.ubuntu.com/noble/libcurl4-openssl-dev
        source: https://github.com/curl/curl
    libcurl4t64:
      summary: OpenSSL-based client-side URL transfer library for Ubuntu Noble.
      group: required
      dependents: [ tex ]
      description: |
        libcurl4t64 is the OpenSSL-flavored variant of libcurl provided in
        Ubuntu 24.04 (Noble). It supports a wide array of protocols,
        including HTTP, HTTPS, FTP, FTPS, SCP, SFTP, LDAP, and more. This
        package is part of the transition to the t64 ABI, ensuring
        compatibility with 64-bit time_t, which is crucial for applications
        that handle dates beyond 2038. It replaces the older libcurl4
        package and is essential for network-enabled applications,
        development tools, and build processes that rely on libcurl for
        data transfer capabilities.
      url:
        docs: https://curl.se/libcurl/
        source: https://github.com/curl/curl
    libdb-dev:
      summary: Development files for the Berkeley DB library.
      group: optional
      description: |
        This package provides the headers and static libraries for the
        Berkeley DB library, a high-performance embedded database library.
        It's used in applications that require a lightweight database
        engine. Its inclusion depends on specific project requirements.
      url:
        docs: https://www.oracle.com/database/technologies/related/berkeleydb.html
        source: https://github.com/berkeleydb/libdb
    libdigest-perl-md5-perl:
      summary: Pure Perl implementation of the MD5 algorithm.
      group: recommended
      dependents: [ tex ]
      description: |
        This package provides a Perl-only implementation of the MD5
        hashing algorithm. It serves as a fallback when the faster
        Digest::MD5 module, which relies on compiled C code, is
        unavailable. It's primarily useful in environments lacking a
        C compiler or where installing compiled modules is not feasible.
      url:
        docs: https://metacpan.org/pod/Digest::Perl::MD5
        package: https://packages.ubuntu.com/noble/libdigest-perl-md5-perl
        source: https://github.com/mschilli/digest-perl-md5
    libevent-dev:
      summary: Development files for the libevent library.
      group: recommended
      description: |
        This package provides the headers and static libraries for
        libevent, an asynchronous event notification library.
        It's useful for developing networked applications
        that require high performance and scalability.
      url:
        docs: https://libevent.org/
        source: https://github.com/libevent/libevent
    libexpat1-dev:
      summary: Development files for the Expat XML parser library.
      group: required
      dependents: [ git ]
      description: |
        The 'libexpat1-dev' package provides the header files and
        development libraries for Expat, a fast, stream-oriented XML
        parser written in C. It enables developers to build
        applications that parse XML documents efficiently by
        registering handlers that are called when the parser
        encounters specific structures in the XML. This package is
        essential for compiling software that depends on Expat for
        XML parsing functionality.
      url:
        docs: https://libexpat.github.io/
        package: https://packages.ubuntu.com/noble/libexpat1-dev
        source: https://launchpad.net/ubuntu/noble/+source/expat
    libffi-dev:
      summary: Development files for the Foreign Function Interface library.
      group: essential
      description: |
        This package provides the headers and static libraries for libffi,
        which allows code written in one language to call code written in
        another language. It's commonly used in dynamic language
        interpreters and is essential for building such environments.
      url:
        docs: https://sourceware.org/libffi/
        source: https://github.com/libffi/libffi
    libfile-homedir-perl:
      summary: Perl module for locating user directories across platforms.
      group: essential
      dependents: [ tex ]
      description: |
        This package provides the File::HomeDir Perl module, which offers
        a cross-platform method to locate user directories such as home,
        desktop, and documents. It's useful for Perl applications that
        need to interact with user-specific directories in a
        platform-independent manner.
      url:
        docs: https://metacpan.org/pod/File::HomeDir
        source: https://salsa.debian.org/perl-team/modules/packages/libfile-homedir-perl.git
      notes: |
        Required for `latexindent` (see [Island of Tex Dockerfile](https://gitlab.com/islandoftex/images/texlive/-/blob/72240db12e00510972aeea19cd0a08edc22c4152/Dockerfile.base#L24))
    libgbm1:
      summary: Generic Buffer Management API.
      group: recommended
      description: |
        libgbm1 provides an abstraction for graphics buffer management,
        facilitating efficient rendering operations. It is recommended
        for applications that perform off-screen rendering or require
        direct rendering capabilities.
      url:
        docs: https://docs.mesa3d.org/gbm.html
        package: https://packages.ubuntu.com/noble/libgbm1
        source: https://gitlab.freedesktop.org/mesa/mesa
    libgcc1:
      summary: GCC support library.
      group: required
      description: |
        The 'libgcc1' package contains GCC's internal support library,
        which provides low-level routines used by the compiler. These
        routines are necessary for the proper functioning of programs
        compiled with GCC, especially for exception handling and other
        runtime support. This package is essential for the execution of
        programs compiled with GCC.
      url:
        docs: https://gcc.gnu.org/onlinedocs/
        source: https://gcc.gnu.org/git/gcc.git
    libgdbm6t64:
      summary: GNU dbm database library with 64-bit time_t support.
      group: required
      description: |
        The 'libgdbm6t64' package provides the GNU dbm (GDBM) database
        library, compiled with 64-bit time_t support to accommodate the
        time_t transition in Ubuntu 24.04 (Noble Numbat). This library
        offers a simple database engine for storing key-value pairs,
        commonly used by various applications and programming languages
        for persistent storage. The 't64' variant ensures compatibility
        with systems and applications that utilize 64-bit time
        representations, making it a required component in the Ubuntu
        Noble environment.
      url:
        docs: https://www.gnu.org.ua/software/gdbm/manual/
        package: https://packages.ubuntu.com/noble/libgdbm6t64
        source: https://git.savannah.gnu.org/git/gdbm.git
      notes: |
        Recommended by `zsh` and included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libgdbm-dev:
      summary: Development files for the GNU dbm database library.
      group: optional
      description: |
        This package provides the headers and static libraries for the GNU
        dbm (gdbm) database library, which offers a simple database engine
        using extendible hashing. It's used in applications that require
        simple key-value storage.
      url:
        docs: https://www.gnu.org/software/gdbm/
        source: https://git.savannah.gnu.org/git/gdbm.git
    libgdiplus:
      summary: Open-source implementation of the GDI+ API for Unix-like systems.
      group: recommended
      description: |
        libgdiplus is a Mono library that provides a GDI+-compatible API on
        non-Windows operating systems. It enables applications developed
        with .NET's System.Drawing namespace to function on Unix-like
        systems by leveraging the Cairo graphics library for rendering.
        This package is particularly useful for cross-platform .NET
        applications that require graphical capabilities. While not
        essential for all development environments, it is recommended for
        projects involving Mono or cross-platform graphical applications.
      url:
        docs: https://www.mono-project.com/docs/gui/libgdiplus/
        source: https://github.com/mono/libgdiplus
      notes: |
        Included in the dev container [universal image](https://github.com/devcontainers/images/blob/main/src/universal/.devcontainer/Dockerfile).
    libgetopt-long-descriptive-perl:
      summary: Perl module for command-line option parsing with usage text.
      group: essential
      dependents: [ tex ]
      description: |
        This Perl module provides a wrapper for Getopt::Long, allowing
        for easy definition of options and automatic generation of usage
        messages. It's useful for Perl scripts that require complex
        command-line option parsing with descriptive help text.
      url:
        docs: https://metacpan.org/pod/Getopt::Long::Descriptive
        source: https://github.com/deepin-community/libgetopt-long-descriptive-perl
    libglib2.0-dev:
      summary: Development files for the GLib library.
      group: essential
      description: |
        This package provides the headers and static libraries for GLib,
        a low-level core library that forms the basis for projects such
        as GTK+ and GNOME. It provides data structure handling, portability
        wrappers, and interfaces for such runtime functionality as an event
        loop, threads, dynamic loading, and an object system.
      url:
        docs: https://developer.gnome.org/glib/
        source: https://gitlab.gnome.org/GNOME/glib
    libglut3.12:
      summary: OpenGL Utility Toolkit for rendering graphical interfaces.
      group: recommended
      dependents: [ tex ]
      post_install: |
        LIBDIR="$(find /usr/lib -maxdepth 1 -type d -name '*-linux-*' | grep -v '/config-' | head -n1)";
        ln -sf "${LIBDIR}/libglut.so.3.12" "${LIBDIR}/libglut.so.3";
      description: |
        libglut3.12 provides the OpenGL Utility Toolkit (GLUT) library,
        facilitating the development of OpenGL applications by handling
        windowing, input, and other tasks. In Ubuntu 24.04 (Noble), this
        package replaces the older freeglut3, offering version 3.4.0.
        Notably, it installs shared libraries like libglut.so.3.12 and
        libglut.so.3.12.0, but omits the legacy symlink libglut.so.3,
        which some applications may expect. To address this, users can
        manually create the symlink or install the libglut-dev package,
        which provides the necessary development files and symlinks.
      url:
        docs: https://freeglut.sourceforge.net
      notes: |
        Required for `asymptote` in TeX (see [Island of Tex Dockerfile](https://gitlab.com/islandoftex/images/texlive/-/blob/72240db12e00510972aeea19cd0a08edc22c4152/Dockerfile.base#L34)).
        The post processing creates a symlink to `libglut.so.3`,
        which other packages may expect. This is a workaround for the
        missing symlink in the libglut3.12 package (cf.
        [Island of Tex Dockerfile](https://gitlab.com/islandoftex/images/texlive/-/blob/72240db12e00510972aeea19cd0a08edc22c4152/Dockerfile.base#L39-42)
        and [ask-ubuntu](https://askubuntu.com/questions/1526992/is-there-a-reason-24-04-lts-noble-numbat-does-not-provide-libglut-so-3)
        ).
    libgmp-dev:
      summary: Development files for the GNU Multiple Precision Arithmetic Library.
      group: recommended
      description: |
        This package provides the headers and static libraries for GMP,
        a library for arbitrary-precision arithmetic, operating on signed
        integers, rational numbers, and floating-point numbers. It's used
        in applications that require high-precision arithmetic operations.
      url:
        docs: https://gmplib.org/manual/
        source: https://gmplib.org/repo/gmp/
    libgssapi-krb5-2:
      summary: MIT Kerberos runtime libraries - GSSAPI support.
      group: essential
      description: |
        The 'libgssapi-krb5-2' package provides the GSSAPI (Generic
        Security Services Application Program Interface) support library
        for the MIT Kerberos implementation. It is used by applications
        that require Kerberos authentication, such as SSH and other secure
        communication tools. This package is essential for environments
        that utilize Kerberos for authentication.
      url:
        docs: https://web.mit.edu/kerberos/krb5-1.20/doc/
        source: https://github.com/krb5/krb5
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libgtk-3-0:
      summary: GTK+ graphical user interface library.
      group: recommended
      description: |
        libgtk-3-0 is the GTK+ 3 GUI toolkit used for creating graphical
        user interfaces. It is recommended for applications that require
        a graphical interface but is not essential for headless or
        command-line environments.
      url:
        docs: https://docs.gtk.org/gtk3/
        package: https://packages.ubuntu.com/noble/libgtk-3-0
        source: https://gitlab.gnome.org/GNOME/gtk
    libicu:
      summary: International Components for Unicode library.
      group: required
      spec:
        name: libicu[0-9][0-9]
      description: |
        The 'libicu72' package provides the International Components
        for Unicode (ICU) libraries, which offer robust and full-featured
        Unicode services. These services include character set conversions,
        collation, date/time formatting, and more. It is essential for
        applications that require comprehensive Unicode support, such as
        internationalized software and platforms like .NET and R.
      url:
        docs: https://icu.unicode.org/
        package: https://packages.ubuntu.com/noble/libicu72
        source: https://github.com/unicode-org/icu
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libjpeg-dev:
      summary: Development files for the JPEG image compression library.
      group: essential
      description: |
        This package provides the headers and static libraries for the
        JPEG image compression library. It's essential for developing
        applications that handle JPEG image encoding and decoding.
      url:
        docs: https://libjpeg.sourceforge.io/
        source: https://github.com/libjpeg-turbo/libjpeg-turbo
    libkrb5-3:
      summary: MIT Kerberos runtime libraries.
      group: required
      description: |
        The 'libkrb5-3' package provides the core runtime libraries for
        the MIT Kerberos 5 authentication system. It is essential for
        applications and services that require secure authentication
        mechanisms, such as SSH, NFS, and various enterprise-level
        services. In Ubuntu Noble, it ensures compatibility with the
        64-bit time_t transition, making it a required component for
        systems and applications that depend on Kerberos functionality.
      url:
        docs: https://web.mit.edu/kerberos/krb5-1.20/
        package: https://packages.ubuntu.com/noble/libkrb5-3
        source: https://gitlab.com/ubuntu/krb5
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libkrb5-dev:
      summary: Development files for MIT Kerberos authentication system.
      group: recommended
      description: |
        This package provides the headers and static libraries for the MIT
        implementation of Kerberos, a network authentication protocol. It's
        recommended for developing applications that require secure
        authentication mechanisms.
      url:
        docs: https://web.mit.edu/kerberos/krb5-1.20/
        source: https://github.com/krb5/krb5
    liblzma-dev:
      summary: Development files for the LZMA compression library.
      group: essential
      description: |
        This package provides the headers and static libraries for the
        LZMA compression library, used for high-ratio data compression.
        It's essential for developing applications that handle .xz
        compressed files.
      url:
        docs: https://tukaani.org/xz/
    liblttng-ust:
      summary: LTTng Userspace Tracer library.
      group: optional
      spec:
        name: liblttng-ust[0-9]
      description: |
        The 'liblttng-ust1' package provides the LTTng Userspace Tracer
        library, enabling low-overhead tracing of user-space applications.
        It allows developers to instrument applications for performance
        analysis and debugging by emitting tracepoints. While not essential
        for all development environments, it is recommended for those
        requiring detailed tracing capabilities.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man3/lttng-ust.3.html
        package: https://packages.ubuntu.com/noble/liblttng-ust1
        source: https://git.lttng.org/?p=lttng-ust.git
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libmagickcore-dev:
      summary: Development files for ImageMagick's core libraries.
      group: recommended
      description: |
        This package provides the headers and static libraries for
        ImageMagick's core functionalities, such as image processing and
        manipulation. It's recommended for developing applications that
        require direct access to ImageMagick's core features.
      url:
        docs: https://imagemagick.org/script/resources.php
        source: https://github.com/ImageMagick/ImageMagick
    libmagickwand-dev:
      summary: Development files for ImageMagick's MagickWand API.
      group: recommended
      description: |
        This package provides the headers and static libraries for
        ImageMagick's MagickWand API, a C API for image processing. It's
        recommended for developing applications that utilize ImageMagick's
        functionalities through the MagickWand interface.
      url:
        docs: https://imagemagick.org/script/magick-wand.php
        source: https://github.com/ImageMagick/ImageMagick
    libmaxminddb-dev:
      summary: Development files for the MaxMind DB library.
      group: optional
      description: |
        This package provides the headers and static libraries for the
        MaxMind DB library, used for IP geolocation. It's optional and
        primarily used in applications that require geolocation features.
      url:
        docs: https://dev.maxmind.com/geoip/docs/
        source: https://github.com/maxmind/libmaxminddb
    libncurses5-dev:
      summary: Development files for the ncurses library (version 5).
      group: essential
      description: |
        This package provides the headers and static libraries for the
        ncurses library version 5, used for text-based user interfaces in
        a terminal. It's essential for developing terminal-based
        applications.
      url:
        docs: https://invisible-island.net/ncurses/
        source: https://invisible-island.net/datafiles/release/ncurses.tar.gz
    libncurses6:
      summary: Shared libraries for terminal handling.
      group: essential
      dependents: [ tex ]
      description: |
        This package contains the shared libraries necessary for programs
        that use the ncurses library to manage terminal interfaces. It
        provides a terminal-independent method of updating character
        screens with reasonable optimization. It's essential for running
        applications that rely on terminal-based user interfaces.
      url:
        docs: https://invisible-island.net/ncurses/
        source: https://invisible-island.net/datafiles/release/ncurses.tar.gz
    libncursesw6:
      summary: Terminal handling library with wide character support.
      group: required
      description: |
        The 'libncursesw6' package provides the ncurses library
        routines, offering a terminal-independent method of updating
        character screens with reasonable optimization. This version
        includes support for wide characters, enabling applications to
        handle internationalized text and Unicode characters. It is
        essential for programs that require advanced terminal handling
        capabilities, such as text editors, interface tools, and
        console-based applications.
      url:
        docs: https://invisible-island.net/ncurses/man/ncurses.3x.html
        package: https://packages.ubuntu.com/noble/libncursesw6
        source: https://invisible-island.net/ncurses/
      notes: |
        Recommended by `zsh` and included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libncursesw5-dev:
      summary: Development files for the wide-character ncurses library.
      group: essential
      description: |
        This package provides the headers and static libraries for the
        wide-character version of the ncurses library, supporting
        internationalization. It's essential for developing terminal-based
        applications that require wide-character support.
      url:
        docs: https://invisible-island.net/ncurses/
        source: https://invisible-island.net/datafiles/release/ncurses.tar.gz
    libnspr4:
      summary: Netscape Portable Runtime library.
      group: recommended
      description: |
        libnspr4 provides a platform-neutral API
        for system-level and libc-like functions.
        It is used by the Network Security Services (NSS) libraries
        and other applications.
        This package is required for applications that depend on NSPR for portability.
      url:
        docs: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSPR
        package: https://packages.ubuntu.com/noble/libnspr4
        source: https://hg.mozilla.org/projects/nspr
    libnss3:
      summary: Network Security Services library.
      group: recommended
      description: |
        libnss3 provides a set of libraries designed
        to support cross-platform development
        of security-enabled client and server applications.
        It supports SSL, TLS, and other security standards.
        This package is required for applications that perform secure network communications.
      url:
        docs: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS
        package: https://packages.ubuntu.com/noble/libnss3
        source: https://hg.mozilla.org/projects/nss
    libpango-1.0-0:
      summary: Layout and rendering of internationalized text.
      group: recommended
      description: |
        libpango-1.0-0 provides facilities for layout and rendering of
        text, with an emphasis on internationalization. It is recommended
        for applications that need to display text in multiple languages
        and scripts.
      url:
        docs: https://developer.gnome.org/pango/
        package: https://packages.ubuntu.com/noble/libpango-1.0-0
        source: https://gitlab.gnome.org/GNOME/pango
    libpangocairo-1.0-0:
      summary: Pango library with Cairo backend.
      group: recommended
      description: |
        libpangocairo-1.0-0 provides the Pango library with a Cairo backend,
        enabling high-quality text rendering.
        It is used for laying out and rendering text in various scripts and languages.
        This package is required for applications that need advanced text layout and rendering.
      url:
        docs: https://developer.gnome.org/pango/
        package: https://packages.ubuntu.com/noble/libpangocairo-1.0-0
        source: https://gitlab.gnome.org/GNOME/pango
    libpcre2-8-0:
      summary: PCRE2 regular expression library (8-bit)
      group: required
      description: |
        The 'libpcre2-8-0' package provides the 8-bit runtime library
        for PCRE2 (Perl Compatible Regular Expressions, version 2),
        which offers functions to support regular expressions with
        syntax and semantics similar to Perl 5. This library is
        essential for applications that require pattern matching
        capabilities, such as text processing tools and programming
        languages. In Ubuntu Noble (24.04), 'libpcre2-8-0' is the
        preferred library over the older 'pcre3' library.
      url:
        docs: https://pcre.org/current/doc/html/
        package: https://packages.ubuntu.com/noble/libpcre2-8-0
        source: https://launchpad.net/ubuntu/+source/pcre2
      notes: |
        Recommended by `zsh` and included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libpcre2-dev:
      summary: Development files for PCRE2 – Perl-compatible regular expressions.
      group: required
      dependents: [ git ]
      description: |
        The 'libpcre2-dev' package provides the development files for
        PCRE2 (Perl Compatible Regular Expressions, version 2), a
        library of functions that implement regular expression pattern
        matching using the same syntax and semantics as Perl 5. This
        package includes header files, static libraries, and
        documentation necessary for compiling applications that use
        PCRE2. It is essential for developers who need to build
        software with advanced regular expression capabilities.
      url:
        docs: https://pcre.org/current/doc/html/
        package: https://packages.ubuntu.com/noble/libpcre2-dev
        source: https://launchpad.net/ubuntu/noble/+source/pcre2
    libpcre2-posix3:
      summary: PCRE2 POSIX-compatible regular expression runtime library.
      group: essential
      dependents: [ git ]
      description: |
        The 'libpcre2-posix3' package provides a POSIX-compatible API
        for the PCRE2 (Perl Compatible Regular Expressions) library.
        It allows applications to utilize regular expressions with
        syntax and semantics similar to Perl 5, through a POSIX-style
        interface. This package is particularly useful for software
        that relies on POSIX regex functions but benefits from the
        enhanced capabilities of PCRE2. It is recommended for
        applications requiring POSIX-compatible regular expression
        support.
      url:
        docs: https://pcre.org/current/doc/html/
        package: https://packages.ubuntu.com/noble/libpcre2-posix3
        source: https://github.com/PhilipHazel/pcre2
      notes: |
        Included in the [`git`](https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/git/install.sh#L257C24-L257C39) feature.
    libpng-dev:
      summary: Development files for the PNG image format library.
      group: essential
      description: |
        This package provides the headers and static libraries for the
        libpng library, used for handling PNG image files. It's essential
        for developing applications that read or write PNG images.
      url:
        docs: http://www.libpng.org/pub/png/libpng.html
        source: https://github.com/glennrp/libpng
    libpq-dev:
      summary: Development files for PostgreSQL client library.
      group: essential
      description: |
        This package provides the headers and static libraries for the
        PostgreSQL client library, used for connecting to PostgreSQL
        databases. It's essential for developing applications that
        interact with PostgreSQL.
      url:
        docs: https://www.postgresql.org/docs/current/libpq.html
        source: https://git.postgresql.org/gitweb/?p=postgresql.git
    libreadline-dev:
      summary: Development files for the GNU readline and history libraries.
      group: essential
      description: |
        This package provides the headers and static libraries for the GNU
        readline and history libraries, which facilitate command-line editing
        and history capabilities. It's essential for developing interactive
        command-line applications that require consistent user interfaces.
      url:
        docs: https://tiswww.case.edu/php/chet/readline/readline.html
        source: https://git.savannah.gnu.org/git/readline.git
    libsecret-1-dev:
      summary: Development files for libsecret, GNOME's secret storage library.
      group: essential
      description: |
        This package provides headers and development files for libsecret,
        which implements the Secret Service API for storing and retrieving
        sensitive data like passwords. It's commonly used in applications
        that integrate with GNOME Keyring or other compatible key storage.
        Essential for building secure apps that handle credentials.
      url:
        docs: https://developer.gnome.org/libsecret/
        package: https://packages.ubuntu.com/noble/libsecret-1-dev
        source: https://gitlab.gnome.org/GNOME/libsecret
    libsm6:
      summary: X11 Session Management library.
      group: essential
      dependents: [ tex ]
      description: |
        libsm6 provides the main interface to the X11 Session Management
        library, enabling applications to manage sessions and interact
        with session managers to save and restore their state. It is
        essential for GUI applications that require session management
        capabilities, particularly in X11 environments. Additionally,
        it is a common dependency for graphical libraries such as OpenCV,
        making it important in development environments involving GUI
        applications or image processing.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man3/SM.3.html
        package: https://packages.ubuntu.com/noble/libsm6
        source: https://gitlab.freedesktop.org/xorg/lib/libsm
      notes: |
        Required for `metafont` (see [Island of Tex Dockerfile](https://gitlab.com/islandoftex/images/texlive/-/blob/72240db12e00510972aeea19cd0a08edc22c4152/Dockerfile.base#L28)).
    libsqlite3-dev:
      summary: Development files for the SQLite 3 database engine.
      group: essential
      description: |
        This package provides the headers and static libraries for SQLite 3,
        a lightweight, disk-based database engine. It's essential for
        developing applications that require embedded database functionality
        without the overhead of a separate server process.
      url:
        docs: https://www.sqlite.org/docs.html
        source: https://www.sqlite.org/src
    libssl3t64:
      summary: OpenSSL 3.0 shared libraries with 64-bit time_t support.
      group: required
      description: |
        The 'libssl3t64' package provides the shared libraries for OpenSSL 3.0,
        compiled with 64-bit time_t support. This ensures compatibility with
        systems and applications that use 64-bit time representations, aligning
        with the time_t transition in Ubuntu Noble (24.04). It is essential for
        applications that require secure communication over the Internet using
        SSL and TLS protocols, and that are built against the 64-bit time_t ABI.
      url:
        docs: https://www.openssl.org/docs/
        package: https://packages.ubuntu.com/noble/libssl3t64
        source: https://launchpad.net/ubuntu/+source/openssl
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libssl-dev:
      summary: Development files for the OpenSSL library.
      group: essential
      dependents: [ git ]
      description: |
        This package provides the headers and static libraries for OpenSSL,
        implementing the SSL and TLS protocols. It's essential for developing
        applications that require secure communication over networks.
      url:
        docs: https://www.openssl.org/docs/
        source: https://github.com/openssl/openssl
    libstdc++6:
      summary: GNU Standard C++ Library v3.
      group: required
      description: |
        The 'libstdc++6' package provides the standard C++ library, which
        includes the runtime components required to run C++ applications
        compiled with GCC. This package is fundamental for the execution
        of C++ programs and is required in any environment that runs such
        applications.
      url:
        docs: https://gcc.gnu.org/onlinedocs/libstdc++/
        source: https://gcc.gnu.org/git/gcc.git
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libtirpc3t64:
      summary: Transport Independent RPC library (t64 variant).
      group: required
      description: |
        The 'libtirpc3t64' package provides the Transport Independent
        Remote Procedure Call (TI-RPC) library, which is a replacement
        for the traditional SunRPC library. It offers support for both
        IPv4 and IPv6 and is essential for applications that rely on
        RPC mechanisms, such as NFS and certain network services. The
        't64' variant ensures compatibility with the 64-bit time_t
        transition in Ubuntu Noble, making it a required component for
        systems and applications that depend on RPC functionality.
      url:
        docs: https://man7.org/linux/man-pages/man3/tirpc.3.html
        package: https://packages.ubuntu.com/noble/libtirpc3t64
        source: https://github.com/libtirpc/libtirpc
    libtool:
      summary: Generic library support script.
      group: essential
      description: |
        Libtool is a generic library support script that abstracts the
        complexity of using shared libraries across different platforms.
        It's essential for developing portable software that builds shared
        libraries.
      url:
        docs: https://www.gnu.org/software/libtool/manual/
        source: https://git.savannah.gnu.org/git/libtool.git
    libunicode-linebreak-perl:
      summary: Perl module implementing the Unicode Line Breaking Algorithm.
      group: recommended
      dependents: [ tex ]
      description: |
        This package provides the Unicode::LineBreak Perl module, which
        implements the Unicode Line Breaking Algorithm as described in
        UAX #14. It's used in text processing applications that require
        proper line breaking of Unicode text.
      url:
        docs: https://metacpan.org/pod/Unicode::LineBreak
        package: https://packages.ubuntu.com/noble/libunicode-linebreak-perl
        source: https://salsa.debian.org/perl-team/modules/packages/libunicode-linebreak-perl.git
      notes: |
        Required for `latexindent` (see [Island of Tex Dockerfile](https://gitlab.com/islandoftex/images/texlive/-/blob/72240db12e00510972aeea19cd0a08edc22c4152/Dockerfile.base#L24))
    libunwind8:
      summary: Library for stack unwinding.
      group: essential
      description: |
        The 'libunwind8' package provides a portable and efficient C
        programming interface to determine the call-chain of a program.
        It is used for stack unwinding, which is essential for exception
        handling, debugging, and profiling. This package is essential for
        applications that require backtrace capabilities.
      url:
        docs: https://www.nongnu.org/libunwind/
        package: https://packages.ubuntu.com/noble/libunwind8
        source: https://github.com/libunwind/libunwind
    libuuid1:
      summary: Universally Unique Identifier library.
      group: essential
      description: |
        The 'libuuid1' package provides a library for generating and
        parsing UUIDs (Universally Unique Identifiers). It is used by
        various applications and libraries to uniquely identify
        information without significant central coordination. This package
        is essential for systems and applications that require UUID
        generation and handling.
      url:
        docs: https://man7.org/linux/man-pages/man3/uuid.3.html
        package: https://packages.ubuntu.com/noble/libuuid1
        source: https://github.com/util-linux/util-linux
    libwebp-dev:
      summary: Development files for the WebP image format library.
      group: recommended
      description: |
        This package provides the headers and static libraries for libwebp,
        a library for encoding and decoding images in the WebP format. It's
        recommended for developing applications that handle modern image
        formats with efficient compression.
      url:
        docs: https://developers.google.com/speed/webp/docs/
        package: https://packages.ubuntu.com/noble/libwebp-dev
        source: https://chromium.googlesource.com/webm/libwebp
    libx11-6:
      summary: X11 client-side library.
      group: recommended
      description: |
        libx11-6 provides the X11 client-side library,
        which allows applications to communicate with the X Window System.
        It is a fundamental component for graphical applications on Unix-like systems.
        This package is required for any application that uses the X11 windowing system.
      url:
        docs: https://www.x.org/releases/X11R7.7/doc/libX11/libX11/libX11.html
        package: https://packages.ubuntu.com/noble/libx11-6
        source: https://gitlab.freedesktop.org/xorg/lib/libx11
    libx11-xcb1:
      summary: Xlib/XCB interface library.
      group: recommended
      description: |
        libx11-xcb1 allows applications to use both Xlib and XCB
        interfaces, facilitating better performance and integration.
        It is recommended for applications that interact with the X
        Window System but is not essential for all environments.
      url:
        docs: https://www.x.org/releases/X11R7.7/doc/libX11/libX11/libX11.html
        package: https://packages.ubuntu.com/noble/libx11-xcb1
        source: https://gitlab.freedesktop.org/xorg/lib/libX11
    libxcomposite1:
      summary: X11 Composite extension library.
      group: optional
      description: |
        libxcomposite1 provides support for the X11 Composite extension,
        allowing for advanced graphical effects like transparency and
        off-screen rendering. It is optional and primarily used by
        compositing window managers and applications requiring such
        effects.
      url:
        docs: https://www.x.org/releases/X11R7.7/doc/libXcomposite/libXcomposite.txt
        package: https://packages.ubuntu.com/noble/libxcomposite1
        source: https://gitlab.freedesktop.org/xorg/lib/libXcomposite
    libxdamage1:
      summary: X11 Damage extension library.
      group: optional
      description: |
        libxdamage1 provides support for the X11 Damage extension,
        which allows applications to track changes to drawable areas.
        It is optional and mainly used by compositing window managers
        and applications that need to monitor screen updates.
      url:
        docs: https://www.x.org/releases/X11R7.7/doc/libXdamage/libXdamage.txt
        package: https://packages.ubuntu.com/noble/libxdamage1
        source: https://gitlab.freedesktop.org/xorg/lib/libXdamage
    libxfixes3:
      summary: X11 Fixes extension library.
      group: optional
      description: |
        libxfixes3 provides support for the X11 Fixes extension,
        offering enhancements and bug fixes to the core X11 protocol.
        It is optional and used by applications that require these
        specific extensions for improved functionality.
      url:
        docs: https://www.x.org/releases/X11R7.7/doc/libXfixes/libXfixes.txt
        package: https://packages.ubuntu.com/noble/libxfixes3
        source: https://gitlab.freedesktop.org/xorg/lib/libXfixes
    libxml2-dev:
      summary: Development files for the GNOME XML library.
      group: essential
      description: |
        This package provides the headers and static libraries for libxml2,
        the GNOME XML library. It's essential for developing applications
        that parse and manipulate XML documents.
      url:
        docs: http://xmlsoft.org/html/index.html
        source: https://gitlab.gnome.org/GNOME/libxml2
    libxslt-dev:
      summary: Development files for the XSLT 1.0 processing library.
      group: recommended
      description: |
        This package provides the headers and static libraries for libxslt,
        a library for transforming XML documents into other formats using
        XSLT. It's recommended for developing applications that require XML
        transformations.
      url:
        docs: http://xmlsoft.org/XSLT/
        package: https://packages.ubuntu.com/noble/libxslt1-dev
        source: https://gitlab.gnome.org/GNOME/libxslt
    libyaml-dev:
      summary: Development files for the YAML 1.1 parser and emitter library.
      group: recommended
      description: |
        This package provides the headers and static libraries for libyaml,
        a C library for parsing and emitting YAML. It's recommended for
        developing applications that utilize YAML for configuration or data
        serialization.
      url:
        docs: https://pyyaml.org/wiki/LibYAML
        source: https://github.com/yaml/libyaml
    libyaml-tiny-perl:
      summary: Perl module for reading and writing YAML files with minimal dependencies.
      group: recommended
      description: |
        This package provides the YAML::Tiny Perl module, a lightweight
        YAML reader and writer implemented in pure Perl. It's suitable for
        applications that require basic YAML functionality without the
        overhead of heavier YAML parsers. It's particularly useful in
        environments where minimizing dependencies is important.
      url:
        docs: https://metacpan.org/pod/YAML::Tiny
        package: https://packages.ubuntu.com/noble/libyaml-tiny-perl
        source: https://salsa.debian.org/perl-team/modules/packages/libyaml-tiny-perl.git
      notes: |
        Required for `latexindent` (see [Island of Tex Dockerfile](https://gitlab.com/islandoftex/images/texlive/-/blob/72240db12e00510972aeea19cd0a08edc22c4152/Dockerfile.base#L24))
    lldb:
      summary: Next-generation debugger from the LLVM project.
      group: recommended
      description: |
        LLDB is a modern debugger that is part of the LLVM project. It is
        designed to be highly modular and supports debugging of C, C++, and
        Objective-C programs. LLDB is recommended for developers who use
        Clang and LLVM toolchains.
      url:
        docs: https://lldb.llvm.org/
        package: https://packages.ubuntu.com/noble/lldb
        source: https://github.com/llvm/llvm-project
    llvm:
      summary: Collection of modular and reusable compiler and toolchain technologies.
      group: essential
      description: |
        LLVM is a collection of modular and reusable compiler and toolchain
        technologies. It is used to develop compiler front ends and back
        ends. LLVM is essential for projects that require custom compiler
        development or advanced code analysis tools.
      url:
        docs: https://llvm.org/docs/
        package: https://packages.ubuntu.com/noble/llvm
        source: https://github.com/llvm/llvm-project
    locales:
      summary: GNU C Library locale data and generation tools.
      group: essential
      description: |
        The 'locales' package provides the infrastructure for
        managing language and regional settings on Ubuntu systems.
        It includes utilities like 'locale' and 'locale-gen' to
        display and generate locale data, respectively. These
        settings influence various aspects of system behavior,
        such as language, character encoding, and formatting of
        dates and numbers. This package is essential for
        configuring and supporting internationalization in
        applications and the system environment.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man7/locale.7.html
        package: https://packages.ubuntu.com/noble/locales
        source: https://salsa.debian.org/glibc-team/glibc
      post_install: |
        # Ensure at least the en_US.UTF-8 UTF-8 locale is available = common need for both applications and things like the agnoster ZSH theme.
        # - https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/common-utils/main.sh#L145C5-L150C7
        if ! grep -o -E '^\s*en_US.UTF-8\s+UTF-8' /etc/locale.gen > /dev/null; then
            echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen;
            locale-gen;
        fi
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    lsb-release:
      summary: Linux Standard Base version reporting utility.
      group: essential
      description: |
        The 'lsb-release' package provides the 'lsb_release' command,
        which outputs distribution-specific information. In Ubuntu
        Noble, it offers a minimal implementation that retrieves data
        from '/etc/os-release'. It is recommended for scripts and
        tools that need to identify the distribution.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/lsb_release.1.html
        package: https://packages.ubuntu.com/noble/lsb-release
        source: https://launchpad.net/ubuntu/+source/lsb-release-minimal
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    lsof:
      summary: List open files.
      group: recommended
      description: |
        Lists information about files opened by processes. Useful for
        debugging and monitoring, but not essential for all environments.
      url:
        docs: https://man7.org/linux/man-pages/man8/lsof.8.html
        package: https://packages.ubuntu.com/noble/lsof
        source: https://github.com/lsof-org/lsof
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    make:
      summary: Utility for directing compilation.
      group: required
      description: |
        Make is a build automation tool that automatically builds executable
        programs and libraries from source code by reading files called
        Makefiles. It's required for compiling software from source.
      url:
        docs: https://www.gnu.org/software/make/manual/
        source: https://git.savannah.gnu.org/git/make.git
    man-db:
      summary: On-disk database and utilities for Unix manual pages.
      group: essential
      description: |
        Installs and manages the manual page database and utilities
        such as `man`. It allows users to read documentation about
        installed commands, libraries, and APIs. It is essential for
        accessing reference material in CLI environments.
      url:
        docs: https://man7.org/linux/man-pages/man1/man.1.html
        package: https://packages.ubuntu.com/noble/man-db
        source: https://salsa.debian.org/man-db-team/man-db
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    manpages:
      summary: Unix manual pages for user-level commands.
      group: recommended
      description: |
        Provides a large collection of manual pages describing standard
        user commands, file formats, and tools. Recommended for user and
        developer reference, but not strictly necessary to run software.
      url:
        docs: https://man7.org/linux/man-pages/
        package: https://packages.ubuntu.com/noble/manpages
        source: https://salsa.debian.org/manpages-team/manpages
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    manpages-dev:
      summary: Developer-oriented manpages for C programming and system APIs.
      group: recommended
      description: |
        Contains man pages for C library functions, system calls,
        headers, and development tools. Recommended for programmers and
        developers working on C/C++ or system-level code who want to
        look up function definitions and usage.
      url:
        docs: https://man7.org/linux/man-pages/
        package: https://packages.ubuntu.com/noble/manpages-dev
        source: https://salsa.debian.org/manpages-team/manpages-dev
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    mercurial:
      summary: Scalable distributed version control system.
      group: required
      description: |
        A distributed version control system like Git.
        Mercurial is needed for building certain packages
        from source code.
      url:
        docs: https://www.mercurial-scm.org/guide
    moreutils:
      summary: Collection of additional Unix utilities complementing core tools.
      group: recommended
      description: |
        The 'moreutils' package offers a suite of command-line utilities
        that extend the functionality of standard Unix tools.
        It is required for TypeScript, and includes
        programs like 'chronic', 'combine', 'errno', 'ifdata', 'ifne',
        'isutf8', 'lckdo', 'mispipe', 'parallel', 'pee', 'sponge', 'ts',
        'vidir', 'vipe', and 'zrun'. These tools are designed to handle
        specific tasks more efficiently or provide functionality not
        available in the traditional core utilities. For instance, 'sponge'
        allows for safe in-place editing of files, and 'parallel' enables
        the execution of jobs in parallel. While not essential for all
        environments, 'moreutils' is recommended for users seeking enhanced
        command-line capabilities.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/moreutils.1.html
        package: https://packages.ubuntu.com/noble/moreutils
        source: https://launchpad.net/ubuntu/noble/+source/moreutils
    nano:
      summary: Small, friendly text editor inspired by Pico.
      group: essential
      description: |
        GNU nano is a user-friendly, terminal-based text editor
        designed as a free replacement for Pico. It offers features
        like syntax highlighting, undo/redo, line numbering, and
        search-and-replace with regex support. Its simplicity makes
        it ideal for editing configuration files and writing scripts,
        making it an essential tool for system administrators and
        developers working in command-line environments.
      url:
        docs: https://www.nano-editor.org/docs.php
        package: https://packages.ubuntu.com/noble/nano
        source: https://git.savannah.gnu.org/git/nano.git
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    ncdu:
      summary: Interactive disk usage analyzer with ncurses interface.
      group: recommended
      description: |
        ncdu (NCurses Disk Usage) is a terminal-based disk usage
        analyzer that provides a fast and user-friendly interface
        for exploring directory sizes. It allows users to navigate
        through directories, sort by size, and delete files or
        directories directly from the interface. This tool is
        particularly useful for identifying large files and
        directories that consume significant disk space. While not
        essential for all environments, it is recommended for users
        who need an efficient way to manage disk usage.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/ncdu.1.html
        package: https://packages.ubuntu.com/noble/ncdu
        source: https://g.blicky.net/ncdu.git/
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    netbase:
      summary: Basic TCP/IP networking configuration.
      group: required
      description: |
        netbase provides essential networking configuration files such as
        /etc/services, /etc/protocols, and /etc/rpc. These files are
        fundamental for the proper operation of network services and are
        required by various networking tools and daemons to function
        correctly.
    openssh-client:
      summary: Secure shell client for encrypted network connections.
      group: required
      description: |
        The OpenSSH client provides secure encrypted communications
        between hosts over an insecure network.
        It is commonly used for remote login and command execution.
        In development containers, it facilitates secure access
        to remote servers, code repositories, and other network resources.
      url:
        docs: https://www.openssh.com/manual.html
    patch:
      summary: Apply a diff file to an original.
      group: essential
      description: |
        Patch is a utility that applies changes to files based on differences
        described in a diff file. It's essential for applying updates or
        modifications to source code during development.
      url:
        docs: https://www.gnu.org/software/diffutils/manual/
        source: https://savannah.gnu.org/git/?group=diffutils
    perl:
      summary: Highly capable, feature-rich programming language.
      group: essential
      dependents: [ tex ]
      description: |
        Perl is a versatile programming language known for its text
        processing capabilities. It supports multiple programming
        paradigms and is widely used for system administration, web
        development, and more. It's essential for many scripts and
        tools in Unix-like environments.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/perl.1.html
    procps:
      summary: Utilities for monitoring and managing system processes.
      group: essential
      description: |
        The procps package includes command-line utilities such as ps,
        top, vmstat, and others for monitoring and managing system
        processes. These tools are vital for observing system performance,
        diagnosing issues, and managing processes within development
        environments.
      url:
        source: https://gitlab.com/procps-ng/procps
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    psmisc:
      summary: Utilities for managing processes on Unix systems.
      group: recommended
      description: |
        The 'psmisc' package provides a set of utilities for
        managing processes, including 'killall', 'fuser',
        'pstree', and 'peekfd'. These tools assist in
        identifying and controlling processes and their
        resource usage. It is recommended for users who need
        additional tools beyond the basic process management
        commands.
      url:
        docs: https://man7.org/linux/man-pages/man1/killall.1.html
        package: https://packages.ubuntu.com/noble/psmisc
        source: https://gitlab.com/psmisc/psmisc
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    python-is-python3:
      summary: Symlink /usr/bin/python to Python 3 interpreter.
      group: required
      dependents: [ tex ]
      description: |
        This package creates a symbolic link from /usr/bin/python to the
        default Python 3 interpreter. It ensures compatibility with scripts
        and tools that invoke 'python' expecting Python 3, aligning with
        modern conventions and reducing ambiguity in environments where
        both Python 2 and Python 3 may be present.
    python3:
      summary: Default Python 3 interpreter package for Ubuntu Noble.
      group: required
      dependents: [ tex ]
      description: |
        This package provides the default Python 3 interpreter for Ubuntu
        24.04 LTS (Noble Numbat), currently Python 3.12. It includes the
        standard interpreter and essential components, serving as the
        foundation for Python 3 development and execution in the system.
      url:
        docs: https://docs.python.org/3/
    python3-dev:
      summary: Header files and static libraries for Python 3 development.
      group: essential
      description: |
        The 'python3-dev' package provides the header files and static
        libraries necessary for building Python 3 modules and extensions.
        It is essential for developing Python C extensions and embedding
        Python in C applications.
      url:
        docs: https://docs.python.org/3/extending/
        package: https://packages.ubuntu.com/noble/python3-dev
        source: https://github.com/python/cpython
    python3-pip:
      summary: Python package installer for Python 3.
      group: essential
      description: |
        python3-pip is the standard package manager for Python 3,
        enabling the installation and management of Python packages
        from the Python Package Index (PyPI) and other indexes. It
        provides the 'pip3' command-line tool, which allows users to
        install, upgrade, and remove Python packages. This package is
        essential for Python development environments, facilitating
        the integration of third-party libraries and tools necessary
        for various projects.
      url:
        docs: https://pip.pypa.io/en/stable/
        package: https://packages.ubuntu.com/noble/python3-pip
        source: https://github.com/pypa/pip
    python3-pip-whl:
      summary: Wheel archive of the pip installer for Python.
      group: required
      description: |
        The 'python-pip-whl' package provides the pip installer for Python
        in the form of a wheel (.whl) archive. This package is used during
        the bootstrapping process of pip in Python environments, allowing
        for the installation of pip without requiring an existing pip
        installation. It is essential for setting up Python package
        management in environments where pip is not yet available.
      url:
        docs: https://pip.pypa.io/en/stable/
        package: https://packages.ubuntu.com/noble/python-pip-whl
        source: https://github.com/pypa/pip
    python3-pygments:
      summary: Syntax highlighting package written in Python 3.
      group: recommended
      dependents: [ tex ]
      description: |
        Pygments is a generic syntax highlighter suitable for use in code
        hosting, documentation, and other applications requiring code
        formatting. This package provides the Python 3 version of Pygments,
        supporting a wide range of programming languages and markup formats.
      url:
        docs: https://pygments.org/docs/
        package: https://packages.ubuntu.com/noble/python3-pygments
        source: https://github.com/pygments/pygments
    rsync:
      summary: Fast, versatile tool for local and remote file synchronization.
      group: required
      dependents: [ tex ]
      description: |
        rsync is a powerful utility for efficiently transferring and
        synchronizing files across local and remote systems. It employs a
        delta-transfer algorithm that minimizes data transfer by only
        sending differences between source and destination files.
        rsync supports various features, including compression, recursion,
        symbolic link preservation, and SSH-based encrypted transfers.
        It is widely used for backups, mirroring, and as an enhanced
        alternative to traditional copy commands. Given its capabilities
        and common usage in development and deployment workflows,
        rsync is considered essential in many environments.
      url:
        docs: https://rsync.samba.org/documentation.html
        source: https://github.com/WayneD/rsync
    software-properties-common:
      summary: Manage software repositories and PPAs.
      group: required
      description: |
        The 'software-properties-common' package provides an abstraction
        of the used apt repositories. It allows you to easily manage your
        distribution and independent software vendor software sources. It
        includes the 'add-apt-repository' command-line tool. This package
        is essential for adding and managing PPAs and other software
        sources.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/add-apt-repository.1.html
        package: https://packages.ubuntu.com/noble/software-properties-common
        source: https://git.launchpad.net/software-properties
      post_install: |
        add-apt-repository universe;
    sq:
      summary: Secure messaging and encryption tool.
      group: required
      description: |
        A command-line tool for secure messaging and encryption,
        providing functionalities for key management and encrypted
        communication.
      url:
        source: https://github.com/sqproject/sq
    sqlite3:
      summary: Command-line interface for SQLite 3.
      group: essential
      description: |
        The 'sqlite3' package provides a command-line interface for
        interacting with SQLite 3 databases. It allows users to create,
        modify, and query SQLite databases directly from the terminal.
        This package is essential for developers and administrators who
        need to manage SQLite databases.
      url:
        docs: https://www.sqlite.org/docs.html
        package: https://packages.ubuntu.com/noble/sqlite3
        source: https://www.sqlite.org/src
    strace:
      summary: Diagnostic tool for tracing system calls.
      group: recommended
      description: |
        strace is used to monitor and debug interactions between programs
        and the Linux kernel by tracing system calls and signals. It's a
        vital tool for diagnosing runtime issues, especially in debugging,
        security auditing, and reverse engineering. Recommended for
        developers and sysadmins.
      url:
        docs: https://man7.org/linux/man-pages/man1/strace.1.html
        package: https://packages.ubuntu.com/noble/strace
        source: https://github.com/strace/strace
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    sudo:
      summary: Execute commands with elevated privileges.
      group: required
      description: |
        The 'sudo' package provides the 'sudo' command, allowing
        authorized users to execute commands with the security
        privileges of another user, typically the superuser. It is
        essential for performing administrative tasks without logging
        in as the root user, thereby enhancing system security and
        auditability. In Ubuntu, the root account is disabled by
        default, making 'sudo' indispensable for system management.
      url:
        docs: https://man7.org/linux/man-pages/man8/sudo.8.html
        package: https://packages.ubuntu.com/noble/sudo
        source: https://launchpad.net/ubuntu/+source/sudo
    swig:
      summary: Tool for generating scripting language interfaces to C/C++ code.
      group: required
      description: |
        SWIG (Simplified Wrapper and Interface Generator) is a tool that
        connects programs written in C and C++ with various high-level
        programming languages, including Python, Perl, Ruby, and others.
        It automates the generation of the necessary wrapper code,
        facilitating the integration of C/C++ code into scripting languages.
        In Ubuntu 24.04 (Noble), the 'swig' package provides version 4.0,
        which includes improved features and broader language support
        compared to previous versions. This package is required for
        installing projects that require interfacing C/C++ code with scripting languages.
      url:
        docs: https://www.swig.org/Doc4.0/
        package: https://packages.ubuntu.com/noble/swig
        source: https://github.com/swig/swig
    tar:
      summary: GNU tar – archiving utility for combining multiple files into a single archive.
      group: essential
      dependents: [ git ]
      description: |
        GNU tar is a standard Unix utility used to create, maintain, modify, and extract files from archives. It supports various compression methods, including gzip, bzip2, and xz, facilitating efficient storage and distribution of files. Commonly used for backups and software packaging, tar is an essential tool in Unix-like environments.
      url:
        docs: https://man7.org/linux/man-pages/man1/tar.1.html
        package: https://packages.ubuntu.com/noble/tar
        source: https://launchpad.net/ubuntu/+source/tar
    tk-dev:
      summary: Development files for the Tk GUI toolkit.
      group: essential
      description: |
        tk-dev provides the header files and libraries necessary for
        developing applications using the Tk GUI toolkit, which is often
        used with the Tcl scripting language. It is essential for building
        graphical applications that utilize Tk for their user interface.
      url:
        docs: https://www.tcl.tk/doc/
        package: https://packages.ubuntu.com/noble/tk-dev
        source: https://core.tcl-lang.org/tk
    tree:
      summary: Display directories and files in a tree-like format.
      group: recommended
      description: |
        The 'tree' command provides a recursive, depth-indented listing
        of files and directories, visualizing the structure in a
        tree-like format. It is particularly useful for understanding
        complex directory hierarchies and for documentation purposes.
        While not essential for all environments, it is recommended for
        users who need to visualize directory structures effectively.
      url:
        docs: https://man7.org/linux/man-pages/man1/tree.1.html
        package: https://packages.ubuntu.com/noble/tree
        source: https://gitlab.com/OldManProgrammer/unix-tree
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    tzdata:
      summary: Time zone and daylight-saving time data.
      group: required
      description: |
        tzdata provides the time zone and daylight-saving time data used by
        the system to correctly handle time conversions and representations.
        It's essential for applications that rely on accurate timekeeping,
        ensuring consistency across different regions and systems.
    unixodbc-dev:
      summary: Development files for the unixODBC ODBC driver manager.
      group: essential
      description: |
        Provides the headers and static libraries
        necessary for developing applications that utilize the unixODBC
        driver manager. It is required for Microsoft SQL Server,
        and includes files like 'sql.h' and 'sqlext.h',
        enabling compilation of programs that interface with various
        databases through the ODBC API. This package is essential for
        building software that requires database connectivity via ODBC,
        ensuring compatibility across different database systems.
      url:
        docs: https://www.unixodbc.org/doc/
        package: https://packages.ubuntu.com/noble/unixodbc-dev
        source: https://github.com/lurcher/unixODBC
    unzip:
      summary: De-archiver for .zip files.
      group: required
      description: |
        Unzip is a utility for extracting files from .zip archives. It's
        essential for handling compressed files, especially when dealing with
        source code or resources distributed in .zip format.
      url:
        docs: https://infozip.sourceforge.net/UnZip.html
        package: https://packages.ubuntu.com/noble/unzip
        source: https://github.com/Info-ZIP/UnZip
    uuid-dev:
      summary: Development files for UUID generation library.
      group: essential
      description: |
        uuid-dev provides the headers and static libraries for developing
        applications that generate and manipulate Universally Unique
        Identifiers (UUIDs). It is essential for building software that
        requires unique identifiers, such as database keys or session tokens.
      url:
        docs: https://man7.org/linux/man-pages/man3/uuid.3.html
        package: https://packages.ubuntu.com/noble/uuid-dev
        source: https://github.com/util-linux/util-linux
    valgrind:
      summary: Instrumentation framework for building dynamic analysis tools.
      group: recommended
      description: |
        Valgrind is a programming tool for memory debugging, memory leak
        detection, and profiling. It helps to detect memory management and
        threading bugs, making it recommended for developers who need to
        ensure the correctness and performance of their applications.
      url:
        docs: https://valgrind.org/docs/manual/manual.html
        package: https://packages.ubuntu.com/noble/valgrind
        source: https://sourceware.org/git/valgrind.git
    vim:
      summary: Vi IMproved – enhanced vi text editor.
      group: essential
      description: |
        Vim is a highly configurable text editor built to make creating
        and changing any kind of text very efficient. It is an improved
        version of the Unix editor vi and is widely used by developers for
        editing source code. It is essential in CLI-based development
        environments.
      url:
        docs: https://vimhelp.org/
        package: https://packages.ubuntu.com/noble/vim
        source: https://github.com/vim/vim
    wget:
      summary: Non-interactive network downloader.
      group: required
      description: |
        A command-line utility for downloading files from the web,
        supporting HTTP, HTTPS, and FTP protocols. It's particularly useful
        for automated scripts and tasks that require fetching resources
        without user interaction, making it a staple in many development
        and deployment workflows.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/wget.1.html
        source: https://www.gnu.org/software/wget/
    xtail:
      summary: Monitor multiple files like `tail -f`, even if they are rotated.
      group: recommended
      description: |
        xtail allows users to watch the growth of multiple files at once,
        much like `tail -f`, but with support for files that get rotated
        (like logs). It's recommended for monitoring log files and useful
        in debugging and operations environments.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/xtail.1.html
        package: https://packages.ubuntu.com/noble/xtail
        source: https://github.com/pbrady/xtail
    xz-utils:
      summary: Utilities for .xz compression.
      group: essential
      description: |
        XZ Utils provide tools for compressing and decompressing files using
        the .xz format, which utilizes the LZMA2 compression algorithm. It's
        essential for handling .xz compressed files, commonly used in source
        distributions.
      url:
        docs: https://tukaani.org/xz/
        source: https://git.tukaani.org/?p=xz.git
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    zip:
      summary: Command-line utility for creating ZIP archives.
      group: essential
      description: |
        The 'zip' package provides the 'zip' command-line utility, which
        allows users to compress files and directories into ZIP archive
        files. It supports various features, including recursive directory
        compression, exclusion patterns, and encryption. The utility is
        widely used for packaging files for distribution, backup, and
        efficient storage. Its compatibility with other ZIP tools across
        different operating systems makes it a versatile choice for file
        compression needs in development and production environments.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/zip.1.html
        package: https://packages.ubuntu.com/noble/zip
        source: https://launchpad.net/ubuntu/noble/+source/zip
    zlib1g:
      summary: Compression library implementing the deflate algorithm.
      group: required
      description: |
        The 'zlib1g' package provides the zlib compression library, which
        implements the deflate compression algorithm used in gzip and
        other compression tools. It is widely used by applications for
        data compression and decompression. This package is required for
        the operation of many software packages that handle compressed
        data.
      url:
        docs: https://zlib.net/manual.html
        package: https://packages.ubuntu.com/noble/zlib1g
        source: https://github.com/madler/zlib
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    zlib1g-dev:
      summary: Development files for the zlib compression library.
      group: essential
      dependents: [ git ]
      description: |
        This package provides the headers and static libraries for zlib, a
        compression library implementing the deflate algorithm. It's
        essential for developing applications that require data compression.
      url:
        docs: https://zlib.net/manual.html
        source: https://github.com/madler/zlib
    zsh:
      summary: Z Shell – advanced interactive shell.
      group: recommended
      description: |
        Zsh is a powerful and highly customizable Unix shell that
        incorporates features from bash, ksh, and tcsh. It offers
        advanced features like improved tab completion, spell
        correction, and theming support. While not essential for
        system operation, it is a popular alternative for users
        seeking enhanced interactive shell experiences.
      url:
        docs: https://zsh.sourceforge.io/Doc/
        package: https://packages.ubuntu.com/noble/zsh
        source: https://sourceforge.net/p/zsh/code/ci/master/tree/
  environment:
    base:
      conda:
        conda-build:
          description: |
            Tool for building conda packages.
          url:
            docs: https://conda.io/projects/conda-build
            package: https://anaconda.org/conda-forge/conda-build
          notes: |
            For proper functioning, it is strongly recommended to
            install conda-build in the conda base environment.
            See the [conda-build documentation](https://docs.conda.io/projects/conda-build/en/stable/install-conda-build.html)
            for more information.
    pybuild:
      pip:
        build:
          spec:
            version: '>=1.2.2'
          url:
            docs: https://build.pypa.io/
            package: https://pypi.org/project/build/
            source: https://github.com/pypa/build
        twine:
          url:
            docs: https://twine.readthedocs.io/
            package: https://pypi.org/project/twine/
            source: https://github.com/pypa/twine
        readme-renderer:
          spec:
            version: '>=44'
            extras: [ md ]
          url:
            package: https://pypi.org/project/readme-renderer/
            source: https://github.com/pypa/readme_renderer
      variable:
        log_level:
          summary: Log level for the versioningit tool during build.
          description: |
            See the [versioningit documentation](https://versioningit.readthedocs.io/en/stable/configuration.html#log-level-environment-variable)
            for more information.
          key: VERSIONINGIT_LOG_LEVEL
          value: DEBUG
    versioning:
      pip:
        versioning:
          spec: |
            #{{
              spec = get("pypkg_main.dependency.build.versioning.install.pip")
              out = {}
              for k, v in spec.items():
                if k == "spec":
                  out["full"] = v
                elif k not in ("homepage",):
                  out[k] = v
              return out
            }}#
    type_check:
      pip:
        mypy:
          spec:
            version: ==1.15.0
            extras: [ reports ]
          url:
            docs: https://mypy.readthedocs.io/
            package: https://pypi.org/project/mypy/
            source: https://github.com/python/mypy
      data:
        cache_path: ${{ local.cache.path }}$/mypy
        report_path: ${{ local.report.path }}$/mypy
      file:
        mypy_config:
          name: Mypy Configuration
          summary: >-
            Mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html)
            in [pyproject.toml](https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml) format.
          type: toml
          path: .config/mypy.toml
          content:
            tool:
              mypy:
                # Import discovery
                packages: [ '${{ pypkg_main.import_name }}$' ]
                # Configuring warnings
                warn_return_any: true
                # Miscellaneous strictness flags
                strict: true
                # Configuring error messages
                show_error_context: true
                show_column_numbers: true
                show_error_code_links: true
                pretty: true
                color_output: true
                # Incremental mode
                cache_dir: ${{ devcontainer_main.environment.type_check.data.cache_path }}$
                # Advanced options
                show_traceback: true
                raise_exceptions: true
                # Report generation
                any_exprs_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                html_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                linecount_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                linecoverage_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                lineprecision_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                txt_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                xml_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                # Miscellaneous
                verbosity: 2
      task:
        typecheck:
          name: Type Check
          summary: Run type checking with Mypy.
          process:
            - mypy
            - --package ${{ pypkg_main.import_name }}$
            - --package ${{ pypkg_test.import_name }}$
            # https://mypy.readthedocs.io/en/stable/installed_packages.html#using-installed-packages-with-mypy-pep-561
            - --python-executable /opt/conda/envs/${{ __temp__.conda_env_name.app }}$/bin/python
            - --config-file ${{ devcontainer_main.environment.type_check.file.mypy_config.path }}$
            - --install-types
            - --non-interactive
    codecov:
      conda:
        rust:
          notes: |
            Required for the `codecov` package.
      pip:
        codecov-cli:
          spec:
            version: ==10.0.1
          url:
            docs: https://docs.codecov.com/docs/the-codecov-cli
            package: https://pypi.org/project/codecov/
            source: https://github.com/codecov/codecov-cli
      file:
        codecov_config:
          name: Codecov Configuration
          summary: >-
            Codecov [configuration file](https://docs.codecov.com/docs/codecov-yaml)
            in YAML format.
          description: |
            [Codecov](https://about.codecov.io/) is an online platform
            that provides test coverage metrics for your project.
            After [signing up on Codecov](https://docs.codecov.com/docs/quick-start),
            these configurations will automatically control the generation of coverage reports
            and the submission of these reports to Codecov.
            For a full reference, see the
            [Codecov YAML reference](https://docs.codecov.com/docs/codecovyml-reference).
          type: yaml
          path: .github/.codecov.yml
          path_schema:
            description: |
              CodeCov only looks for a `codecov.yml` or `.codecov.yml` file
              either in the root of the repository, or in `.github/` and `dev/` directories.
              (cf. [CodeCov documentation](https://docs.codecov.com/docs/codecov-yaml#can-i-name-the-file-codecovyml)).
            pattern: ^(.github/|dev/)?.?codecov.yml$
          content:
            coverage:
              precision: 2
              round: nearest
              range: "90...100"
              status:
                project:
                  default:
                    target: 100%
                    threshold: 5%
            comment:
              layout: "header, diff, flags, files"
              require_changes: false
              behavior: default
          validator: validate_codecov_yaml
    pylint:
      conda:
        pylint:
          spec:
            version: ==3.3.4
          url:
            docs: https://pylint.readthedocs.io/
            package: https://anaconda.org/conda-forge/pylint
            source: https://github.com/pylint-dev/pylint
        pyenchant:
          description: |
            Spellchecking library for Python.
            This is an optional dependency of `pylint`,
            which is not included in the conda package.
          spec:
            version: ==3.2.2
          url:
            docs: https://pyenchant.github.io/pyenchant/
            package: https://anaconda.org/conda-forge/pyenchant
            source: https://github.com/pyenchant/pyenchant/
        enchant:
          description: |
            Spellchecking library.
            This is the underlying library for `pyenchant`.
          spec:
            version: ==2.8.2
          url:
            docs: https://rrthomas.github.io/enchant/
            package: https://anaconda.org/conda-forge/enchant
            source: https://github.com/rrthomas/enchant/
    pre_commit:
      conda:
        pre-commit:
          description: |
            Framework for managing and maintaining
            multi-language hooks for formatting and linting.
          spec:
            version: ==4.1.0
          url:
            docs: https://pre-commit.com/
            package: https://anaconda.org/conda-forge/pre_commit
            source: https://github.com/pre-commit/pre-commit
      variable:
        cache_dir:
          summary: Directory to store the cache for pre-commit hooks.
          key: PRE_COMMIT_HOME
          value: ${{ local.cache.path }}$/pre-commit
      file:
        pre_commit_config:
          name: Pre-Commit Configuration
          summary: >-
            Pre-Commit [configuration file](https://pre-commit.com/#configuration).
          type: yaml
          path: .config/pre-commit.yaml
          content:
            default_language_version:
              python: python3
            minimum_pre_commit_version: 4.0.0
            repos:
              - repo: https://github.com/pre-commit/pre-commit-hooks
                rev: v5.0.0
                hooks:
                  - id: check-ast
                    # https://github.com/pre-commit/pre-commit-hooks#check-ast
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-case-conflict
                    # https://github.com/pre-commit/pre-commit-hooks#check-case-conflict
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-json
                    # https://github.com/pre-commit/pre-commit-hooks#check-json
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-shebang-scripts-are-executable
                    # https://github.com/pre-commit/pre-commit-hooks#check-shebang-scripts-are-executable
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-symlinks
                    # https://github.com/pre-commit/pre-commit-hooks#check-symlinks
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-toml
                    # https://github.com/pre-commit/pre-commit-hooks#check-toml
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-xml
                    # https://github.com/pre-commit/pre-commit-hooks#check-xml
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: destroyed-symlinks
                    # https://github.com/pre-commit/pre-commit-hooks?tab=readme-ov-file#destroyed-symlinks
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: end-of-file-fixer
                    # https://github.com/pre-commit/pre-commit-hooks#end-of-file-fixer
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: fix-byte-order-marker
                    # https://github.com/pre-commit/pre-commit-hooks?tab=readme-ov-file#fix-byte-order-marker
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: mixed-line-ending
                    # https://github.com/pre-commit/pre-commit-hooks#mixed-line-ending
                    stages: [ pre-commit, manual ]
                    args: [ --fix, auto ]
                    verbose: true
                  - id: no-commit-to-branch
                    # https://github.com/pre-commit/pre-commit-hooks#no-commit-to-branch
                    stages: [ pre-commit ]
                    args:
                      - --branch
                      - '${{ branch.main.name }}$'
                      - --pattern
                      - '${{ branch.release.name }}$.*'
                      - --pattern
                      - '${{ branch.pre.name }}$.*'
                    verbose: true
                  - id: pretty-format-json
                    # https://github.com/pre-commit/pre-commit-hooks?tab=readme-ov-file#pretty-format-json
                    stages: [ pre-commit, manual ]
                    args: [ --autofix, --indent, '3' ]
                    verbose: true
                  - id: trailing-whitespace
                    # https://github.com/pre-commit/pre-commit-hooks#trailing-whitespace
                    stages: [ pre-commit, manual ]
                    args: [ --markdown-linebreak-ext=md ]
                    verbose: true
              - repo: https://github.com/astral-sh/ruff-pre-commit
                rev: v0.11.0
                hooks:
                  - id: ruff
                    stages: [ pre-commit, manual ]
                    args:
                      - --verbose
                      - --config
                      - '${{ devcontainer_main.environment.pre_commit.file.ruff_config.path }}$'
                      - --exit-non-zero-on-fix  # DO NOT CHANGE - Required for RepoDynamics CI
                    types_or: [ python, pyi, jupyter ]
                    verbose: true
                  - id: ruff-format
                    stages: [ pre-commit, manual ]
                    args: [ --config, '${{ devcontainer_main.environment.pre_commit.file.ruff_config.path }}$' ]
                    types_or: [ python, pyi, jupyter ]
                    verbose: true
        pre_commit_config_ci:
          name: Pre-Commit Configuration for CI
          summary: >-
            Pre-Commit [configuration file](https://pre-commit.com/#configuration)
            for use in CI pipeline.
          type: yaml
          path: .config/pre-commit-ci.yaml
          content: |-
            #{{
              local_config = get("devcontainer_main.environment.pre_commit.file.pre_commit_config.content")
              return local_config | {"exclude": r"^\.github/workflows/[^/]+\.(?i:ya?ml)$"}
            }}#
        ruff_config:
          name: Ruff Configuration
          summary: >-
            Ruff [configuration file](https://docs.astral.sh/ruff/settings/)
            in TOML format.
          type: toml
          path: .config/ruff.toml
          content:
            cache-dir: ${{ local.cache.path }}$/ruff
            fix: true
            line-length: 100
            output-format: grouped
            required-version: '>=0.11,<0.12'
            show-fixes: true
            src:
              - '${{ pypkg_main.path.source }}$'
              - '${{ pypkg_test.path.source }}$'
            target-version: >-
              #{{
                major, minor = get("pypkg_main.python.version.minors")[0].split(".")
                return f"py{major}{minor}"
              }}#
            format:
              docstring-code-format: true
            lint:
              allowed-confusables: [ '–' ]
              exclude:
                - .manager/**/*.py
              ignore:
                - PLR1711  # https://docs.astral.sh/ruff/rules/useless-return/
                # Rules conflicting with the formatter (see: https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules)
                - W191
                - E501
                - E111
                - E114
                - E117
                - D206
                - D300
                - Q000
                - Q001
                - Q002
                - Q003
                - COM812
                - COM819
                - ISC001
                - ISC002
              per-file-ignores:
                .devcontainer/script/**:
                  - T201
                  - S603
                  - S607
                .github/**:
                  - T201
                  - S603
                  - S607
                '${{ pypkg_test.path.source }}$/**':
                  - S101
                template/test/src/**:
                  - S101
                '${{ web.path.source }}$/conf.py':
                  - TRY003  # https://docs.astral.sh/ruff/rules/raise-vanilla-args/#raise-vanilla-args-try003
                # https://docs.astral.sh/ruff/rules/#flake8-print-t20
                '${{ pypkg_main.path.import }}$/__main__.py':
                  - T20
                '${{ pypkg_test.path.import }}$/__main__.py':
                  - T20
                '${{ pypkg_test.path.import }}$/__init__.py':
                  - T20
                template/pkg/src/new_pyproject/__main__.py:
                  - T20
                template/test/src/new_pyproject_testsuite/__main__.py:
                  - T20
                template/pkg/src/new_pyproject/__init__.py:
                  - T20
                  - D104
                template/test/src/new_pyproject_testsuite/__init__.py:
                  - T20
                  - D104
                template/.control/hooks/cca.py:
                  - ARG002
              select:
                # https://docs.astral.sh/ruff/rules
                - F      # pyflakes
                - E      # pycodestyle error
                - W      # pycodestyle warning
                - C90    # mccabe
                - I      # isort
                - N      # pep8-naming
                - D      # pydocstyle
                - UP     # pyupgrade
                - YTT    # flake8-2020
                - ANN    # flake8-annotations
                - ASYNC  # flake8-async
                - S      # flake8-bandit
                - BLE    # flake8-blind-except
                - FBT    # flake8-boolean-trap
                - B      # flake8-bugbear
                - A      # flake8-builtins
                - COM    # flake8-commas
                - C4     # flake8-comprehensions
                - DTZ    # flake8-datetimez
                - T10    # flake8-debugger
                - EM     # flake8-errmsg
                - EXE    # flake8-executable
                - FA     # flake8-future-annotations
                - ISC    # flake8-implicit-str-concat
                - ICN    # flake8-import-conventions
                - LOG    # flake8-logging
                - G      # flake8-logging-format
                - PIE    # flake8-pie
                - T20    # flake8-print
                - PYI    # flake8-pyi
                - PT     # flake8-pytest-style
                - Q      # flake8-quotes
                - RSE    # flake8-raise
                - RET    # flake8-return
                - SLF    # flake8-self
                - SLOT   # flake8-slot
                - SIM    # flake8-simplify
                - TID    # flake8-tidy-imports
                - TCH    # flake8-type-checking
                - INT    # flake8-gettext
                - ARG    # flake8-unused-arguments
                - PTH    # flake8-use-pathlib
                - TD     # flake8-todos
                - FIX    # flake8-fixme
                - ERA    # eradicate
                - PD     # pandas-vet
                - PGH    # pygrep-hooks
                - PL     # pylint
                - E      # error
                - R      # refactor
                - W      # warning
                - TRY    # tryceratops
                - FLY    # flynt
                - NPY    # numpy
                - PERF   # perflint
                - FURB   # refurb
                - RUF    # ruff-specific rules
              flake8-annotations:
                allow-star-arg-any: true
                mypy-init-return: true
                suppress-dummy-args: true
                suppress-none-returning: true
              flake8-comprehensions:
                allow-dict-calls-with-keyword-arguments: true
              flake8-type-checking:
                quote-annotations: true
              pydocstyle:
                convention: numpy
              pylint:
                max-args: 10
                max-public-methods: 50
                max-returns: 10
              mccabe:
                max-complexity: 15
    jupyter:
      task:
        jupyterlab:
          name: Open JupyterLab
          script: |
            jupyter-lab / --ContentsManager.allow_hidden=True --IdentityProvider.token=''
      conda:
        jupyterlab:
          description: |
            JupyterLab is a web-based interactive development environment for Jupyter notebooks,
            code, and data.
          url:
            docs: https://jupyterlab.readthedocs.io
            package: https://anaconda.org/conda-forge/jupyterlab
            source: https://github.com/jupyterlab/jupyterlab
        jupyterlab-git:
          description: |
            Git extension for JupyterLab.
          url:
            package: https://anaconda.org/conda-forge/jupyterlab-git
            source: https://github.com/jupyterlab/jupyterlab-git
        jupyterlab-myst:
          description: |
            JupyterLab extension for rendering MyST markdown.
          url:
            docs: https://jupyter-book.github.io/jupyterlab-myst/
            package: https://anaconda.org/conda-forge/jupyterlab-myst
            source: https://github.com/jupyter-book/jupyterlab-myst
        ipywidgets:
          description: |
            Interactive widgets for the Jupyter notebook.
          url:
            docs: https://ipywidgets.readthedocs.io
            package: https://anaconda.org/conda-forge/ipywidgets
            source: https://github.com/jupyter-widgets/ipywidgets
        nb_conda_kernels:
          description: |
            Package for managing conda environment-based kernels inside of Jupyter.
          notes: |
            Each conda environment that has `ipykernel` installed
            will be available as a kernel in Jupyter.
            See also:
            - https://github.com/jupyterlab/jupyterlab/issues/12544#issuecomment-1125754909
            - https://ipython.readthedocs.io/en/stable/install/kernel_install.html#kernels-for-different-environments
            - https://stackoverflow.com/questions/53004311/how-to-add-conda-environment-to-jupyter-lab
          url:
            package: https://anaconda.org/conda-forge/nb_conda_kernels
            source: https://github.com/anaconda/nb_conda_kernels
        qtconsole:
          description: |
            Jupyter QtConsole is a terminal-based console for Jupyter.
          url:
            docs: https://qtconsole.readthedocs.io
            package: https://anaconda.org/conda-forge/qtconsole
            source: https://github.com/jupyter/qtconsole
    anaconda:
      conda:
        anaconda-client:
          description: |
            Client for uploading packages and managing channels in Anaconda.
          spec:
            version: '>=1.13'
          url:
            docs: https://www.anaconda.com/docs/tools/anaconda-org/user-guide/getting-started-with-anaconda-client
            package: https://anaconda.org/conda-forge/anaconda-client
            source: https://github.com/anaconda/anaconda-client
    website:
      conda:
        sphinx:
          spec:
            version: ==8.1.3
          url:
            docs: https://www.sphinx-doc.org/
            package: https://anaconda.org/conda-forge/sphinx
            source: https://github.com/sphinx-doc/sphinx
          data:
            sphinx_config:
              project: ${{ name }}$
              author: ${{ team.owner.name.full }}$
              project_copyright: ${{ copyright }}$
              needs_sphinx: '8.1'
              today_fmt: '%b %d, %Y'
              numfig: true
              numfig_secnum_depth: 3
              pygment_style: default
              show_authors: true
              exclude_patterns:
                - "Thumbs.db"
                - ".DS_Store"
                - ".ipynb_checkpoints"
                - "README.md"
              trim_footnote_reference_space: true
              math_eqref_format: Eq. {number}
              math_number_all: true
              math_numfig: true
              math_numsep: .
              nitpicky: true
              maximum_signature_line_length: 80
              root_doc: index
              templates_path:
                - _templates  # Ref: https://www.sphinx-doc.org/en/master/development/templating.html
              show_warning_types: true
              html_title: ${{ name }}$
              html_short_title: ${{ name }}$
              html_baseurl: ${{ web.url.base }}$
              html_favicon: ${{ web.file.icon.rel_path }}$
              html_sidebars:
                "${{ web.page.blog.path }}$/**":
                  - ablog/postcard.html
                  - ablog/recentposts.html
                  - ablog/tagcloud.html
                  - ablog/categories.html
                  - ablog/archives.html
                  - ablog/authors.html
              html_static_path:
                - _static
                # Due to an issue with the PyData Sphinx Theme,
                #    the logo files used in the navbar must be explicitly
                #    added to the root of static path, since PyData always looks there,
                #    regardless of the set path.
                #    Refs:
                #    - https://github.com/pydata/pydata-sphinx-theme/issues/1325
                #    - https://github.com/pydata/pydata-sphinx-theme/issues/1328
                #    - https://github.com/pydata/pydata-sphinx-theme/issues/1385
                - '${{ web.file.logo_simple_light.rel_path }}$'
                - '${{ web.file.logo_simple_dark.rel_path }}$'
              html_css_files:
                - https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css
              html_js_files:
                - https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js
              html_secnumber_suffix: ". "
              html_extra_path: [ ]
              html_use_opensearch: ${{ web.url.base }}$
              html_show_sphinx: false
              html_math_renderer: mathjax
              html_context:
                # Used by the Giscus template to extract page title
                pp_title_sep: ${{ devcontainer_main.environment.website.conda.sphinx.data.sphinx_config.html_secnumber_suffix }}$
              html_last_updated_fmt: '%b %d, %Y'
              numfig_format:
                code-block: Code %s
                figure: Figure %s
                section: Section
                table: Table %s
              language: en
              latex_engine: lualatex
              latex_elements:
                papersize: a4paper
                pointsize: 11pt
                figure_align: htbp
                fontpkg: |
                  \setmainfont{DejaVu Serif}
                  \setsansfont{DejaVu Sans}
                  \setmonofont{DejaVu Sans Mono}
                preamble: |
                  \usepackage[titles]{tocloft}
                  \usepackage{fontspec}
                  \cftsetpnumwidth {1.25cm}\cftsetrmarg{1.5cm}
                  \setlength{\cftchapnumwidth}{0.75cm}
                  \setlength{\cftsecindent}{\cftchapnumwidth}
                  \setlength{\cftsecnumwidth}{1.25cm}
                fncychap: '\usepackage[Bjornstrup]{fncychap}'
                printindex: '\footnotesize\raggedright\printindex'
              latex_theme: manual
              latex_show_urls: footnote
              latex_show_pagerefs: true
              latex_logo: ${{ web.file.logo_full_raster.rel_path }}$
              python_display_short_literal_types: true
              python_maximum_signature_line_length: 80
              # ----- Builtin Extensions ------
              # https://www.sphinx-doc.org/en/master/usage/extensions/index.html#built-in-extensions
              extensions:
                - sphinx.ext.duration
                - sphinx.ext.graphviz
                - sphinx.ext.inheritance_diagram
                # Add links to external documentation:
                # Also required for the ABlog extension.
                # - https://ablog.readthedocs.io/en/stable/index.html#getting-started
                - sphinx.ext.intersphinx
                # Add external links to source code:
                # For configuration see `linkcode_resolve` function in `conf.py`.
                - sphinx.ext.linkcode
              # Config for sphinx.ext.intersphinx:
              # - https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html
              intersphinx_mapping:
                # When `intersphinx_registry` (see `env` key) is used,
                # you can specify keys without values;
                # these will be automatically filled in by the registry.
                python: [ 'https://docs.python.org/3/', null ]
                numpy: null
                scipy: null
                matplotlib: null
        pydata-sphinx-theme:
          spec:
            version: ==0.16.1
          url:
            docs: https://pydata-sphinx-theme.readthedocs.io/
            package: https://anaconda.org/conda-forge/pydata-sphinx-theme
            source: https://github.com/pydata/pydata-sphinx-theme
          data:
            sphinx_config:
              html_theme: pydata_sphinx_theme
              html_theme_options:
                # ---- Section Layout ----
                # https://pydata-sphinx-theme.readthedocs.io/en/stable/user_guide/layout.html#references
                # -- Header --
                navbar_start: [ navbar-logo ]  # header left
                navbar_center: [ navbar-nav ]  # header center
                navbar_persistent: [ search-button, theme-switcher, user_login_button ]  # header right persistent
                navbar_end: [ navbar-icon-links ]  # header right
                navbar_align: left  # alignment of `navbar_center`: {"left", "right", "content"}
                # -- Article Header --
                article_header_start: [ breadcrumbs ]  # article header left
                article_header_end: [ ]  # article header right
                # -- Article Footer --
                article_footer_items: [ ]  # article footer
                # -- Primary Sidebar (left) --
                primary_sidebar_end: [ ]  # left sidebar bottom
                # -- Secondary Sidebar (right) --
                secondary_sidebar_items:
                  - page-toc
                  - last-updated
                  - edit-this-page
                # -- Content Footer --
                content_footer_items: [ user_login_dialog ]
                # -- Footer --
                footer_start: [ footer_badges ]  # footer left
                footer_center: [ ]  # footer center
                footer_end: [ quicklinks ]  # footer right
                # ---- General ----
                show_prev_next: True
                show_nav_level: 1
                navigation_depth: 5
                show_toc_level: 5
                header_links_before_dropdown: 7
                icon_links:
                  - name: Source Repository
                    icon: fa-brands fa-github
                    url: ${{ repo.url.home }}$
                  - name: Issues
                    icon: fa-regular fa-circle-dot
                    url: ${{ repo.url.issues.home }}$
                  - name: Pull Requests
                    icon: fa-solid fa-code-pull-request
                    url: ${{ repo.url.pulls.home }}$
                  - name: Discussions
                    icon: fa-solid fa-comments
                    url: ${{ repo.url.discussions.home }}$
                  - name: License
                    icon: fa-solid fa-copyright
                    url: ${{ web.page.license.url }}$
                icon_links_label: External links
                use_edit_page_button: true
                announcement: ${{ web.announcement.url }}$
                search_bar_text: Search ${{ name }}$
                back_to_top_button: true
                logo:
                  image_light: _static/simple_light.svg
                  image_dark: _static/simple_dark.svg
                  alt_text: ${{ name }}$
                pygments_light_style: default  # Code highlighting color themes. See: https://pygments.org/styles/
                pygments_dark_style: monokai   # https://pydata-sphinx-theme.readthedocs.io/en/stable/user_guide/styling.html#configure-pygments-theme
                sidebarwidth: 270
                sidebar_includehidden: True
                # ---- Analytics ----
                analytics:
                  google_analytics_id: G-0X66W6TGL2
              html_context:
                github_user: ${{ repo.owner }}$
                github_repo: ${{ repo.name }}$
                github_version: ${{ repo.default_branch }}$
                doc_path: ${{ web.path.source }}$
                default_mode: auto  # Default theme mode: {'light', 'dark', 'auto'}
        # ---- Third-Party Sphinx Extensions ----
        # Resources:
        # - https://www.sphinx-doc.org/en/master/usage/extensions/index.html#third-party-extensions
        myst-nb:
          description: Adding MyST Markdown and Jupyter support to Sphinx.
          spec:
            version: ==1.2.0
          url:
            docs: https://myst-parser.readthedocs.io/
            package: https://anaconda.org/conda-forge/myst-nb
            source: https://github.com/executablebooks/MyST-Parser
          notes: |
            MyST-NB is built on top of [MyST-Parser](https://myst-parser.readthedocs.io/)
            and exposes all of its functionalities. It also includes support for Jupyter Notebooks.
            When using MyST-NB, MyST-Parser must not be included separately.
          data:
            sphinx_config:
              extensions: [ myst_nb ]
              # ---- MyST Parser Configurations ----
              # Ref: https://myst-parser.readthedocs.io/en/latest/configuration.html
              myst_enable_extensions: # https://myst-parser.readthedocs.io/en/latest/syntax/optional.html
                - amsmath
                - attrs_inline
                - attrs_block
                - colon_fence
                - deflist
                - dollarmath
                - fieldlist
                - html_admonition
                - html_image
                - linkify
                - replacements
                - smartquotes
                - substitution
                - tasklist
              myst_links_external_new_tab: true
              myst_heading_anchors: 6
              myst_fence_as_directive: [ mermaid ]  # https://github.com/mgaitan/sphinxcontrib-mermaid?tab=readme-ov-file#markdown-support
              myst_linkify_fuzzy_links: false
        sphinx-design:
          description: Adding responsive web components, such as grids, cards, tabs, etc.
          spec:
            version: ==0.6.1
          url:
            docs: https://sphinx-design.readthedocs.io/
            package: https://anaconda.org/conda-forge/sphinx-design
            source: https://github.com/executablebooks/sphinx-design
          data:
            sphinx_config:
              extensions: [ sphinx_design ]
              sd_fontawesome_latex: true
        sphinx-external-toc:
          description: Adding external table of contents to Sphinx.
          spec:
            version: ==1.0.1
          url:
            docs: https://sphinx-external-toc.readthedocs.io
            package: https://anaconda.org/conda-forge/sphinx-external-toc
            source: https://github.com/executablebooks/sphinx-external-toc
          data:
            sphinx_config:
              extensions: [ sphinx_external_toc ]
              suppress_warnings: [ etoc.toctree ]
              external_toc_path: ${{ file_web_toc.data.rel_path }}$
              external_toc_exclude_missing: false
        ablog:
          description: Adding a news blog to the website.
          spec:
            version: ==0.11.12
          url:
            docs: https://ablog.readthedocs.io/
            package: https://anaconda.org/conda-forge/ablog
            source: https://github.com/sunpy/ablog
          data:
            sphinx_config:
              # https://ablog.readthedocs.io/en/stable/manual/ablog-configuration-options.html
              extensions: [ ablog, sphinx.ext.intersphinx ]
              blog_baseurl: ${{ web.url.base }}$
              blog_default_author: owner
              blog_feed_archives: true
              blog_path: ${{ web.page.blog.path }}$/list
              blog_post_pattern:
                - ${{ web.page.blog.path }}$/post/*.md
              post_show_prev_next: false
              blog_title: ${{ name }}$ News
              fontawesome_included: true
              post_always_section: true
              post_auto_image: 1
              blog_authors: |
                #{{
                  web_url = get("web.url.home")
                  blog_authors = {}
                  for person_id, person in get("team").items():
                      if "website" in person:
                          url = person["website"]
                      else:
                          for contact_type in ("github", "twitter", "linkedin", "researchgate", "orcid", "email"):
                              if contact_type in person:
                                  url = person[contact_type]["url"]
                                  break
                          else:
                              url = web_url
                      blog_authors[person_id] = [person["name"]["full"], url]
                  return blog_authors
                }}#
        sphinx-copybutton:
          description: Adding a copy button to code blocks.
          spec:
            version: ==0.5.2
          url:
            docs: https://sphinx-copybutton.readthedocs.io/
            package: https://anaconda.org/conda-forge/sphinx-copybutton
            source: https://github.com/executablebooks/sphinx-copybutton
          data:
            sphinx_config:
              extensions: [ sphinx_copybutton ]
        sphinxext-opengraph:
          description: |
            Generating [Open Graph](https://ogp.me/) metadata for each page.
          spec:
            version: ==0.9.1
          url:
            docs: https://sphinxext-opengraph.readthedocs.io/
            package: https://anaconda.org/conda-forge/sphinxext-opengraph
            source: https://github.com/wpilibsuite/sphinxext-opengraph/
          data:
            sphinx_config:
              extensions: [ sphinxext.opengraph ]
              ogp_site_url: ${{ web.url.base }}$
              ogp_use_first_image: true
              ogp_enable_meta_description: true
              ogp_social_cards:
                image: _static/simple_light.svg
                line_color: ${{ theme.color.primary.light }}$
        sphinxcontrib-bibtex:
          description: Adding BibTeX-style citations.
          spec:
            version: ==2.6.3
          url:
            docs: https://sphinxcontrib-bibtex.readthedocs.io/
            package: https://anaconda.org/conda-forge/sphinxcontrib-bibtex
            source: https://github.com/mcmtroffaes/sphinxcontrib-bibtex
          data:
            sphinx_config:
              extensions: [ sphinxcontrib.bibtex ]
              bibtex_bibfiles: [ refs.bib ]
              bibtex_default_style: plain
              bibtex_reference_style: label
        sphinx-togglebutton:
          description: Adding toggle buttons to admonitions and other content.
          spec:
            version: ==0.3.2
          url:
            docs: https://sphinx-togglebutton.readthedocs.io/
            package: https://anaconda.org/conda-forge/sphinx-togglebutton
            source: https://github.com/executablebooks/sphinx-togglebutton
          data:
            sphinx_config:
              extensions: [ sphinx_togglebutton ]
              # https://sphinx-togglebutton.readthedocs.io/en/latest/use.html#change-the-button-hint-text
              togglebutton_hint: show details
              togglebutton_hint_hide: hide details
        sphinxcontrib-mermaid:
          description: Adding Mermaid diagrams and charts.
          spec:
            version: ==1.0.0
          url:
            docs: https://sphinxcontrib-mermaid-demo.readthedocs.io/en/stable/
            package: https://anaconda.org/conda-forge/sphinxcontrib-mermaid
            source: https://github.com/mgaitan/sphinxcontrib-mermaid
          data:
            sphinx_config:
              extensions: [ sphinxcontrib.mermaid ]
        sphinx-thebe:
          description: Make code cells interactive in Sphinx.
          spec:
            version: ==0.3.1
          url:
            docs: https://sphinx-thebe.readthedocs.io
            package: https://anaconda.org/conda-forge/sphinx-thebe
            source: https://github.com/executablebooks/sphinx-thebe
          data:
            sphinx_config:
              extensions: [ sphinx_thebe ]
        # ---- Non-extension Dependencies ----
        myst-parser:
          description: Adding MyST Markdown functionalities to Sphinx.
          notes: |
            This is added as a dependency and not an extension
            because the MyST-NB extension (a superset of MyST-Parser) is used as an extension,
            which already includes MyST-Parser.
            However, here we specifically include MyST-Parser to ensure the correct version is installed.
          spec:
            version: ==4.0.1
          url:
            docs: https://myst-parser.readthedocs.io/
            package: https://anaconda.org/conda-forge/myst-parser
            source: https://github.com/executablebooks/MyST-Parser
        linkify-it-py:
          description: |
            Linkify extension for MyST Markdown to automatically convert URLs to hyperlinks.
          spec:
            version: ==2.0.3
          url:
            docs: https://myst-parser.readthedocs.io/en/latest/syntax/optional.html#linkify
            package: https://anaconda.org/conda-forge/linkify-it-py
        librsvg:
          description: |
            Library for rendering SVG files and using them
            in PDF (via LaTeX) builds done by latexmk.
          spec:
            version: ==2.58.4
          url:
            docs: https://wiki.gnome.org/Projects/LibRsvg
            package: https://anaconda.org/conda-forge/librsvg
            source: https://gitlab.gnome.org/GNOME/librsvg
        libffi:
          description: |
            Library for handling Foreign Function Interface (FFI) calls.
            This is a dependency of `CairoSVG`, which is used by `sphinxcontrib-svg2pdfconverter`.
          spec:
            version: ==3.4.6
          url:
            docs: https://sourceware.org/libffi/
            package: https://anaconda.org/conda-forge/libffi
            source: https://github.com/libffi/libffi
        cairo:
          description: |
            Library for rendering 2D graphics.
            This is a dependency of `CairoSVG`, which is used by `sphinxcontrib-svg2pdfconverter`.
          spec:
            version: ==1.18.2
          url:
            docs: https://cairographics.org/
            package: https://anaconda.org/conda-forge/cairo
            source: https://gitlab.freedesktop.org/cairo/cairo
        intersphinx-registry:
          description: |
            Registry of intersphinx mappings for external documentation.
          url:
            package: https://anaconda.org/conda-forge/intersphinx-registry
            source: https://github.com/Quansight-labs/intersphinx_registry
      pip:
        # ---- Third-Party Sphinx Extensions ----
        sphinx-last-updated-by-git:
          description: Adding page-specific last-updated dates to each page.
          spec:
            version: ==0.3.8
          url:
            docs: https://sphinx-last-updated-by-git.readthedocs.io/
            package: https://pypi.org/project/sphinx-last-updated-by-git/
            source: https://github.com/mgeier/sphinx-last-updated-by-git
          data:
            sphinx_config:
              extensions: [ sphinx_last_updated_by_git ]
        sphinxcontrib-svg2pdfconverter:
          description: Converting SVG images to PNG for LaTeX.
          spec:
            version: ==1.2.3
            extras: [ CairoSVG ]
          url:
            package: https://pypi.org/project/sphinxcontrib-svg2pdfconverter/
            source: https://github.com/missinglinkelectronics/sphinxcontrib-svg2pdfconverter
          data:
            sphinx_config:
              extensions: [ sphinxcontrib.rsvgconverter ]
          notes: |
            This doesn't work on `latex_logo`;
            see [nbsphinx](https://nbsphinx.readthedocs.io/en/latest/markdown-cells.html).
        sphinx-tippy:
          description: Adding rich hover tooltips to content.
          spec:
            version: ==0.4.3
          url:
            docs: https://sphinx-tippy.readthedocs.io
            package: https://pypi.org/project/sphinx_tippy/
            source: https://github.com/sphinx-extensions2/sphinx-tippy
          data:
            sphinx_config:
              extensions: [ sphinx_tippy ]
              tippy_props:
                placement: auto-start  # https://atomiks.github.io/tippyjs/v6/all-props/#placement
                maxWidth: 500  # https://atomiks.github.io/tippyjs/v6/all-props/#maxwidth
                theme: material  # https://atomiks.github.io/tippyjs/v6/all-props/#theme
                interactive: true  # https://atomiks.github.io/tippyjs/v6/all-props/#interactive
                delay: [ 200, 500 ]  # https://atomiks.github.io/tippyjs/v6/all-props/#delay
                duration: [ 200, 100 ]  # https://atomiks.github.io/tippyjs/v6/all-props/#duration
        sphinx-notfound-page:
          description: Handling relative links in the custom 404 page.
          spec:
            version: ==1.1.0
          url:
            docs: https://sphinx-notfound-page.readthedocs.io/
            package: https://pypi.org/project/sphinx-notfound-page/
            source: https://github.com/readthedocs/sphinx-notfound-page
          data:
            sphinx_config:
              extensions: [ notfound.extension ]
              notfound_urls_prefix: /${{ repo.name }}$/
        jsonschema-autodoc:
          url:
            package: https://pypi.org/project/jsonschema-autodoc/
          data:
            sphinx_config:
              extensions: [ jsonschema_autodoc.sphinx ]
        # ---- Non-extension Dependencies ----
        sphinx-autobuild:
          description: Automatically rebuilding the documentation when changes are made.
          spec:
            version: ==2024.10.03
          url:
            package: https://pypi.org/project/sphinx-autobuild/
            source: https://github.com/sphinx-doc/sphinx-autobuild
        pygments-git:
          description: |
            Pygments lexer for Git files and outputs.
          spec:
            version: ==1.8.0
          url:
            package: https://pypi.org/project/pygments-git/
            source: https://github.com/adamchainz/pygments-git
      task:
        build:
          name: Build Website
          description: Build the website using Sphinx.
          process: [ bash, '${{ file_script_web_build.path }}$' ]
        live:
          name: Live Website Preview
          description: |
            Start a live preview server for the website.
            This will automatically rebuild the website when changes are made.
          process: [ bash, '${{ file_script_web_livehtml.path }}$' ]
  task:
    project_manager:
      name: Project Management
      summary: Main project management CLI.
      alias: project
      process:
        - ${{ __temp__.conda_env_name.manager }}$
        - proman
        - $@
    build-oj-paper:
      # https://github.com/openjournals/inara
      name: Build Open-Journals Paper
      description: |
        Build paper using the Open-Journals Inara service.
        For publishing to JOSE or ReScience C (instead of JOSS),
        set the `JOURNAL` environment variable to `jose` or `resciencec`, respectively.
      script: |
        docker exec -it ${{ devcontainer.docker-compose.config.services.openjournals.container_name }}$ \
          inara -o pdf -p -v $1
      notes: |
        This uses the [inara](https://github.com/openjournals/inara/blob/main/Dockerfile) Docker image.
        See the entry [script](https://github.com/openjournals/inara/blob/main/scripts/entrypoint.sh)
        for more details.
  volume:
    globalrc:
      name: Global Shell Configuration
      path: /etc/globalrc
      content: |
        # Set $USER to current user if not already set.
        # - Ref: https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/common-utils/scripts/rc_snippet.sh#L1
        if [ -z "${USER}" ]; then export USER=$(whoami); fi

        # Ensure that "$HOME/.local/bin" is in $PATH
        # - Ref: https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/common-utils/scripts/rc_snippet.sh#L2
        if [[ "${PATH}" != *"$HOME/.local/bin"* ]]; then export PATH="${PATH}:$HOME/.local/bin"; fi

        # Source conda and mamba activation scripts.
        . "${{ devcontainer_main.var.conda.conda_script }}$"
        . "${{ devcontainer_main.var.conda.mamba_script }}$"

        # Activate conda environment.
        mamba activate ${{ devcontainer_main.var.conda.activate }}$

        # Set the default git editor if not already set
        # - Ref: https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/common-utils/scripts/rc_snippet.sh#L16-L25
        if [ -z "$(git config --get core.editor)" ] && [ -z "${GIT_EDITOR}" ]; then
            if  [ "${TERM_PROGRAM}" = "vscode" ]; then
                if [[ -n $(command -v code-insiders) &&  -z $(command -v code) ]]; then
                    export GIT_EDITOR="code-insiders --wait"
                else
                    export GIT_EDITOR="code --wait"
                fi
            fi
        fi
    bashenv:
      name: Bash Environment
      path: /etc/bash/bashenv
      content: |
        # Set XDG base directories
        export XDG_CACHE_HOME="${HOME}/.cache"
        export XDG_CONFIG_HOME="${HOME}/.config"
        export XDG_DATA_HOME="${HOME}/.local/share"
        export XDG_STATE_HOME="${HOME}/.local/state"

        # Source project tasks file.
        . "${{ devcontainer_main.container.workspaceFolder }}$/${{ devcontainer_main.path.tasks_local }}$"

        # From default zshenv file created by the `zsh-common` apt package.
        if [[ -z "$PATH" || "$PATH" == "/bin:/usr/bin" ]]; then
            export PATH="/usr/local/bin:/usr/bin:/bin:/usr/games"
        fi
    bash_profile:
      name: Global Shell Profile
      summary: System-wide profile for all Bourne-compatible shells.
      path: /etc/profile
      content: |
        if [ "${PS1-}" ]; then
            # The shell is interactive.
            if [ "${BASH-}" ] && [ "$BASH" != "/bin/sh" ]; then
                # The shell is bash.
                if [ -f /etc/bash.bashrc ]; then
                    # Source the system-wide bashrc file.
                    . /etc/bash.bashrc
                fi
            else
                # The shell is not bash.
                # Set the prompt to a simple $ or #.
                if [ "$(id -u)" -eq 0 ]; then
                    PS1='# '
                else
                    PS1='$ '
                fi
            fi
        fi

        if [ -d /etc/profile.d ]; then
            for i in /etc/profile.d/*.sh; do
                if [ -r $i ]; then
                    . $i
                fi
            done
            unset i
        fi
      description: |
        This is the system-wide profile file for all Bourne-compatible shells
        (e.g. bash, zsh, sh).
        It is sourced by all Bourne-compatible shells when they start up.
        It is intended for system-wide settings that should be applied to all users
        and all Bourne-compatible shells.

        The full order of reading shell startup files is as follows:
        1. `/etc/profile`
        2. `/etc/bash.bashrc` (if bash)
        3. `/etc/profile.d/*.sh`
    bashrc:
      path: /etc/bash.bashrc
      content: |
        # #{{ return "=" * 50 }}#
        # ${{ name }}$
        # #{{ return "=" * 50 }}#
        # This section is automatically generated.

        # If not running interactively, don't do anything
        [ -z "$PS1" ] && return

        # Set source marker
        export ${{ devcontainer_main.var.bash.global_bashrc_source_marker }}$=1

        # Source global rc
        . "${{ devcontainer_main.volume.globalrc.path }}$"

        # Source theme
        . "${{ devcontainer_main.volume.bash_theme.path }}$"

        # Shell Options
        # =============
        # Check the window size after each command
        # and update the values of LINES and COLUMNS if necessary.
        shopt -s checkwinsize

        # Bash Completion
        # ===============
        # Enable bash completion in interactive shells.
        if ! shopt -oq posix; then
            if [ -f /usr/share/bash-completion/bash_completion ]; then
                . /usr/share/bash-completion/bash_completion
            elif [ -f /etc/bash_completion ]; then
                . /etc/bash_completion
            fi
        fi

        # SUDO Hint
        if [ ! -e "$HOME/.sudo_as_admin_successful" ] && [ ! -e "$HOME/.hushlogin" ]; then
            case " $(groups) " in
                *\ admin\ *|*\ sudo\ *)
                    if [ -x /usr/bin/sudo ]; then
                        cat <<EOF
        To run a command as administrator (user "root"), use "sudo <command>".
        See "man sudo_root" for details.

        EOF
                    fi
                    ;;
            esac
        fi

        # Use the command-not-found package if available.
        if [ -x /usr/lib/command-not-found -o -x /usr/share/command-not-found/command-not-found ]; then
          function command_not_found_handle {
                  # check because c-n-f could've been removed in the meantime
                        if [ -x /usr/lib/command-not-found ]; then
              /usr/lib/command-not-found -- "$1"
                          return $?
                        elif [ -x /usr/share/command-not-found/command-not-found ]; then
              /usr/share/command-not-found/command-not-found -- "$1"
                          return $?
            else
              printf "%s: command not found\n" "$1" >&2
              return 127
            fi
          }
        fi

        # #{{ return "=" * 50 }}#
        # END OF ${{ name }}$ SECTION
        # #{{ return "=" * 50 }}#
    bash_theme:
      name: Bash Theme
      summary: Bash theme for all users.
      path: /etc/bash/bash_theme
      content: |
        # Bash Theme
        # - Ref: https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/common-utils/scripts/bash_theme_snippet.sh

        __bash_prompt() {
            local userpart='`export XIT=$? \
                && [ ! -z "${GITHUB_USER:-}" ] && echo -n "\[\033[0;32m\]@${GITHUB_USER:-} " || echo -n "\[\033[0;32m\]\u " \
                && [ "$XIT" -ne "0" ] && echo -n "\[\033[1;31m\]➜" || echo -n "\[\033[0m\]➜"`'
            local gitbranch='`\
                if [ "$(git config --get devcontainers-theme.hide-status 2>/dev/null)" != 1 ] && [ "$(git config --get codespaces-theme.hide-status 2>/dev/null)" != 1 ]; then \
                    export BRANCH="$(git --no-optional-locks symbolic-ref --short HEAD 2>/dev/null || git --no-optional-locks rev-parse --short HEAD 2>/dev/null)"; \
                    if [ "${BRANCH:-}" != "" ]; then \
                        echo -n "\[\033[0;36m\](\[\033[1;31m\]${BRANCH:-}" \
                        && if [ "$(git config --get devcontainers-theme.show-dirty 2>/dev/null)" = 1 ] && \
                            git --no-optional-locks ls-files --error-unmatch -m --directory --no-empty-directory -o --exclude-standard ":/*" > /dev/null 2>&1; then \
                                echo -n " \[\033[1;33m\]✗"; \
                        fi \
                        && echo -n "\[\033[0;36m\]) "; \
                    fi; \
                fi`'
            local lightblue='\[\033[1;34m\]'
            local removecolor='\[\033[0m\]'
            PS1="${userpart} ${lightblue}\w ${gitbranch}${removecolor}\$ "
            unset -f __bash_prompt
        }
        __bash_prompt
        export PROMPT_DIRTRIM=4

        # Check if the terminal is xterm
        if [[ "$TERM" == "xterm" ]]; then
            # Function to set the terminal title to the current command
            preexec() {
                local cmd="${BASH_COMMAND}"
                echo -ne "\033]0;${USER}@${HOSTNAME}: ${cmd}\007"
            }

            # Function to reset the terminal title to the shell type after the command is executed
            precmd() {
                echo -ne "\033]0;${USER}@${HOSTNAME}: ${SHELL}\007"
            }

            # Trap DEBUG signal to call preexec before each command
            trap 'preexec' DEBUG

            # Append to PROMPT_COMMAND to call precmd before displaying the prompt
            PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND; }precmd"
        fi
    zshenv:
      name: Global Zsh Environment
      summary: Zsh `zshenv` startup file for all users.
      path: ${{ devcontainer_main.var.zsh.global_config_dir }}$/zshenv
      content: |
        # Source bashenv
        emulate sh -c 'source "${{ devcontainer_main.volume.bashenv.path }}$"'

        # Set ZDOTDIR
        ZDOTDIR="${XDG_CONFIG_HOME}/zsh"
      description: |
        This file is universally loaded by all Zsh shell invocations
        (login/non-login, interactive/non-interactive).
        It is the first startup file that is loaded,
        and is intended for global settings
        that should be applied to all users and Zsh sessions.
        If the -f flag is present or if the NO_RCS option is
        set within this file, all other initialization files
        are skipped.

        This file should contain commands to set the command
        search path, plus other important environment variables.
        It should not contain commands that produce output
        or assume the shell is attached to a tty.

        The full order of reading Zsh startup files is as follows:
        1. `/etc/zsh/zshenv`
        2. `$ZDOTDIR/.zshenv`
        3. `/etc/zsh/zprofile` (if login shell)
        4. `$ZDOTDIR/.zprofile` (if login shell)
        5. `/etc/zsh/zshrc` (if interactive shell)
        6. `$ZDOTDIR/.zshrc` (if interactive shell)
        7. `/etc/zsh/zlogin` (if login shell)
        8. `$ZDOTDIR/.zlogin` (if login shell)

        If `$ZDOTDIR` is not set, it defaults to `$HOME` (i.e., the user's home directory).
        This clobbers the user's home directory, and is against the
        [XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/latest/).
        It is [recommended](https://wiki.archlinux.org/title/XDG_Base_Directory#Partial)
        to set `XDG_CONFIG_HOME` and then set `$ZDOTDIR` to `$XDG_CONFIG_HOME/zsh`.
        This [can be done](https://www.reddit.com/r/zsh/comments/iq89wr/comment/g4soljs/)
        in this file, so that $ZDOTDIR is automatically set for all users.

        Note that here we assume the global config directory is `/etc/zsh`.
        This is the case for most Linux distributions.
        However, Red Hat-based distributions and macOS use `/etc/` instead
        (cf. [`common-utils` Devcontainer Feature](https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/common-utils/main.sh#L510-L514))

        References:
        - [Startup/Shutdown Files, Zsh docs](https://zsh.sourceforge.io/Doc/Release/Files.html#Files)
        - [Startup/Shutdown Files, ArchWiki Zsh](https://wiki.archlinux.org/title/Zsh#Startup/Shutdown_files)
        - [How Do Zsh Configuration Files Work? freeCodeCamp 2024](https://www.freecodecamp.org/news/how-do-zsh-configuration-files-work/)
    zprofile:
      name: Global Zsh Profile
      summary: Zsh `zprofile` startup file for all users.
      path: ${{ devcontainer_main.var.zsh.global_config_dir }}$/zprofile
      type: txt
      content: |
        test -f /etc/profile && emulate sh -c 'source /etc/profile'
      description: |
        This is the second system-wide Zsh startup file that is loaded
        after `zshenv`.
        It is sourced only for login shells (i.e. shells
        invoked with "-" as the first character of argv[0], and
        shells invoked with the -l flag).

        In most cases (e.g. [Arch Linux](https://gitlab.archlinux.org/archlinux/packaging/packages/zsh/-/blob/main/zprofile)),
        this file only contains a single command to source `/etc/profile`,
        which is the system-wide profile file for all Bourne-compatible shells (e.g. Bash, Dash, etc.).
    zshrc:
      path: /etc/zsh/zshrc
      content: |
        # #{{ return "=" * 50 }}#
        # ${{ name }}$
        # #{{ return "=" * 50 }}#
        # This section is automatically generated.

        # Set source marker
        export ${{ devcontainer_main.var.zsh.global_zshrc_source_marker }}$=1

        # Source global rc
        . "${{ devcontainer_main.volume.globalrc.path }}$"

        # From default zshrc file created by the `zsh-common` apt package.
        # ================================================================
        READNULLCMD=${PAGER:-/usr/bin/pager}

        # An array to note missing features to ease diagnosis in case of problems.
        typeset -ga debian_missing_features

        if [[ -z "${DEBIAN_PREVENT_KEYBOARD_CHANGES-}" ]] &&
          [[ "$TERM" != 'emacs' ]]
        then

            typeset -A key
            key=(
                BackSpace  "${terminfo[kbs]}"
                Home       "${terminfo[khome]}"
                End        "${terminfo[kend]}"
                Insert     "${terminfo[kich1]}"
                Delete     "${terminfo[kdch1]}"
                Up         "${terminfo[kcuu1]}"
                Down       "${terminfo[kcud1]}"
                Left       "${terminfo[kcub1]}"
                Right      "${terminfo[kcuf1]}"
                PageUp     "${terminfo[kpp]}"
                PageDown   "${terminfo[knp]}"
            )

            function bind2maps () {
                local i sequence widget
                local -a maps

                while [[ "$1" != "--" ]]; do
                    maps+=( "$1" )
                    shift
                done
                shift

                sequence="${key[$1]}"
                widget="$2"

                [[ -z "$sequence" ]] && return 1

                for i in "${maps[@]}"; do
                    bindkey -M "$i" "$sequence" "$widget"
                done
            }

            bind2maps emacs             -- BackSpace   backward-delete-char
            bind2maps       viins       -- BackSpace   vi-backward-delete-char
            bind2maps             vicmd -- BackSpace   vi-backward-char
            bind2maps emacs             -- Home        beginning-of-line
            bind2maps       viins vicmd -- Home        vi-beginning-of-line
            bind2maps emacs             -- End         end-of-line
            bind2maps       viins vicmd -- End         vi-end-of-line
            bind2maps emacs viins       -- Insert      overwrite-mode
            bind2maps             vicmd -- Insert      vi-insert
            bind2maps emacs             -- Delete      delete-char
            bind2maps       viins vicmd -- Delete      vi-delete-char
            bind2maps emacs viins vicmd -- Up          up-line-or-history
            bind2maps emacs viins vicmd -- Down        down-line-or-history
            bind2maps emacs             -- Left        backward-char
            bind2maps       viins vicmd -- Left        vi-backward-char
            bind2maps emacs             -- Right       forward-char
            bind2maps       viins vicmd -- Right       vi-forward-char

            # Make sure the terminal is in application mode, when zle is
            # active. Only then are the values from $terminfo valid.
            if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
                function zle-line-init () {
                    emulate -L zsh
                    printf '%s' ${terminfo[smkx]}
                }
                function zle-line-finish () {
                    emulate -L zsh
                    printf '%s' ${terminfo[rmkx]}
                }
                zle -N zle-line-init
                zle -N zle-line-finish
            else
                for i in {s,r}mkx; do
                    (( ${+terminfo[$i]} )) || debian_missing_features+=($i)
                done
                unset i
            fi

            unfunction bind2maps

        fi # [[ -z "$DEBIAN_PREVENT_KEYBOARD_CHANGES" ]] && [[ "$TERM" != 'emacs' ]]

        zstyle ':completion:*:sudo:*' command-path /usr/local/sbin \
                                                  /usr/local/bin  \
                                                  /usr/sbin       \
                                                  /usr/bin        \
                                                  /sbin           \
                                                  /bin            \
                                                  /usr/X11R6/bin

        (( ${+aliases[run-help]} )) && unalias run-help
        autoload -Uz run-help

        # If you don't want compinit called here, place the line
        # skip_global_compinit=1
        # in your $ZDOTDIR/.zshenv
        if (( ${${(@f)"$(</etc/os-release)"}[(I)ID*=*ubuntu]} )) &&
          [[ -z "$skip_global_compinit" ]]; then
          autoload -U compinit
          compinit
        fi

        # #{{ return "=" * 50 }}#
        # END OF ${{ name }}$ SECTION
        # #{{ return "=" * 50 }}#
      description: |
        References:
        - [Oh My Zsh settings](https://github.com/ohmyzsh/ohmyzsh/wiki/Settings)
        - [Oh My Zsh zshrc templates](https://github.com/ohmyzsh/ohmyzsh/blob/master/templates)
  file:
    apt_install_script:
      status: inactive
      name: APT Installation Script
      summary: Script to install packages using apt-get.
      type: exec
      path: ${{ devcontainer_main.path.apt.root }}$/install.sh
    conda_install_script:
      status: inactive
      name: Conda Installation Script
      summary: Script to install conda and mamba on the system.
      type: exec
      path: ${{ devcontainer_main.path.conda.root }}$/install.sh
      description: |
        References:
        - [Miniforge Devcontainer Feature](https://github.com/rocker-org/devcontainer-features/tree/main/src/miniforge)
        - [Miniconda Devcontainer image](https://github.com/devcontainers/images/tree/main/src/miniconda)
    conda_env_install_script:
      status: inactive
      name: Conda Environment Installation Script
      summary: Script to install conda environment on the system.
      type: exec
      path: ${{ devcontainer_main.path.conda.root }}$/install-envs.sh
    git_install_script:
      status: inactive
      name: Git Installation Script
      summary: Script to install Git on the system.
      type: exec
      path: ${{ devcontainer_main.path.environment }}$/git/install.sh
    oh_my_zsh_install_script:
      status: inactive
      name: Oh My Zsh Installation Script
      summary: Script to install [Oh My Zsh](https://github.com/ohmyzsh/ohmyzsh) on the system.
      path: ${{ devcontainer_main.path.environment }}$/oh-my-zsh/install.sh
      type: exec
      description: |
        References:
        - [Oh My Zsh installation guide](https://github.com/ohmyzsh/ohmyzsh?tab=readme-ov-file#manual-installation)
        - [Oh My Zsh installation script](https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh)
        - [Powerlevel10k theme](https://github.com/romkatv/powerlevel10k?tab=readme-ov-file#installation)
      notes: |
        [ZSH](https://www.zsh.org) must be installed on the system
        (cf [Oh My Zsh docs](https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH)).
    texlive_install_script:
      status: inactive
      name: TeX Live Installation Script
      summary: Script to install TeX Live on the system.
      type: exec
      path: ${{ devcontainer_main.path.environment }}$/texlive/install.sh
      description: |
        References:
        - [TeX Live installer documentation](https://www.tug.org/texlive/doc/install-tl.html)
        - [TeX Live Installation Guide](https://www.tug.org/texlive/doc/texlive-en/texlive-en.html#x1-140003)
        Examples:
        - [Island of TeX Docker image](https://gitlab.com/islandoftex/images/texlive)
        - [github.com/xu-cheng/latex-docker](https://github.com/xu-cheng/latex-docker)
        - [github.com/scottkosty/install-tl-ubuntu](https://github.com/scottkosty/install-tl-ubuntu)
        - [texlive-batch-installation](https://github.com/maxnoe/texlive-batch-installation)
    texlive_install_profile:
      name: TeX Live Installation Profile
      summary: Profile for installing TeX Live.
      type: txt
      path: ${{ devcontainer_main.path.environment }}$/texlive/install.profile
      data:
        scheme: scheme-full
        path:
          system:
            texdir: /usr/local/texlive
            texmflocal: /usr/local/texlive/texmf
            texmfsysconfig: /usr/local/texlive/texmf-config
            texmfsysvar: /usr/local/texlive/texmf-var
          user:
            texmfhome: ~/texlive/texmf
            texmfconfig: ~/texlive/texmf-config
            texmfvar: ~/texlive/texmf-var
        instopt:
          adjustpath: 0
          adjustrepo: 1
          letter: 0
          portable: 0
          write18_restricted: 1
        tlpdbopt:
          # Number of backups to keep (default: 1)
          autobackup: 0
          # Directory for backups (default: tlpkg/backups)
          backupdir: tlpkg/backups
          # Generate formats at installation or update (default: 1)
          create_formats: 1
          # (Windows) Create Start menu shortcuts (default: 1)
          desktop_integration: 1
          # (Windows) Change file associations (default: 1)
          file_assocs: 1
          # Run tlmgr generate updmap after maps have changed (default: 0)
          generate_updmap: 0
          # Install documentation files (default: 1)
          install_docfiles: 0
          # Install source files (default: 1)
          install_srcfiles: 0
          # Run postinst code blobs (default: 1)
          post_code: 1
          # Destination for symlinks for binaries (default: /usr/local/bin)
          sys_bin:  /usr/local/bin
          # Destination for symlinks for info docs (default: /usr/local/share/info)
          sys_info: /usr/local/share/info
          # Destination for symlinks for man pages (default: /usr/local/share/man)
          sys_man:  /usr/local/share/man
          # (Windows) Install for all users (default: 1)
          w32_multi_user: 1
      content: |
        #{{
          data = get(".data")
          final_data = {"selected_scheme": data["scheme"]}
          for path_type in ("system", "user"):
            for path_key, path in data.get("path", {}).get(path_type, {}).items():
              final_data[path_key.upper()] = path
          for opt_type in ("instopt", "tlpdbopt"):
            for opt_key, opt in data.get("tlpdbopt", {}).items():
              final_data[f"{opt_type}_{opt_key}"] = opt
          return "\n".join([f"{key} {value}" for key, value in sorted(final_data.items())])
        }}#
      description: |
        Notes:
        - For a full list of collections included in each scheme,
          see the corresponding `.tlpsrc` file with the same name as the scheme
          at https://tug.org/svn/texlive/trunk/Master/tlpkg/tlpsrc/.
          For example, for the `scheme-full` scheme, see
          https://tug.org/svn/texlive/trunk/Master/tlpkg/tlpsrc/scheme-basic.tlpsrc?view=markup.
          Similarly, for a full list of packages included in each collection,
          see the corresponding `.tlpsrc` file at the same location.
          For example, for the `collection-basic` collection, see
          https://tug.org/svn/texlive/trunk/Master/tlpkg/tlpsrc/collection-basic.tlpsrc?view=markup.
        References:
        - [TeX Live installer documentation](https://www.tug.org/texlive/doc/install-tl.html#PROFILES)
        Examples:
        - [github.com/xu-cheng/latex-docker](https://github.com/xu-cheng/latex-docker/blob/master/texlive.profile)
        - [github.com/scottkosty/install-tl-ubuntu](https://github.com/scottkosty/install-tl-ubuntu/blob/master/example.profile)
file_pixi_manifest:
 # https://pixi.sh/latest/reference/pixi_manifest/
 name: Pixi Manifest
 summary: |
   The Pixi manifest file in TOML format.
 type: toml
 path: pixi.toml
 content:
   project:
     name: ${{ name }}$
     version: '#{{ return manager.changelog.current_public.get("version") }}#'
     authors: |
       #{{
         return [
           f"{author["name"]["full"]}{f" <{author["email"]["id"]}>" if "email" in author else ""}"
           for author in manager.user.members_with_role_types("Author", active_only=True)
         ]
       }}#
     description: '#{{ return get("title") }}#'
     license: '#{{ return get("license.expression") }}#'
     license-file: |
       #{{
         license_components = list(get("license.component", {}).values())
         if not license_components:
           return
         return license_components[0]["path"]["text_plain"]
       }}#
     readme: '#{{ return get("file_readme.path") }}#'
     homepage: '#{{ return get("web.url.home") }}#'
     repository: ${{ repo.url.home }}$
     documentation: ${{ .homepage }}$
     platforms: [ "win-64", "linux-64", "osx-64", "osx-arm64" ]
     channels: [ "conda-forge" ]
   environments:
     prod-py312:
       features: []
       solve-group: ""
 content_setting:
   filter:
     no_value:
       jsonpath: $.project.*
