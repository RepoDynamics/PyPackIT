abstract: >-
  ${{ name }}$ [ˈpaɪˌpækɪt]
  is a comprehensive <strong>cloud-based automation tool</strong>
  for production of <abbr title="Findable, Accessible, Interoperable, and Reusable">FAIR</abbr>
  and professional applications on <strong>GitHub</strong>,
  in accordance with the latest software engineering best practices and standards.
  ${{ name }}$ is a ready-to-use software suite
  that streamlines the initiation, configuration, development, publication, management,
  and maintenance of high-quality <strong>Python applications</strong>.
  By taking charge of repetitive tasks
  and automatically enforcing best practices
  throughout the software development life cycle,
  ${{ name }}$ enables users to solely focus
  on the creative aspects of their projects,
  while improving quality and lowering production costs.
  Using latest tools and methodologies, ${{ name }}$ offers a robust project infrastructure,
  including a build-ready Python <strong>package skeleton</strong>,
  a fully operational <strong>test suite</strong>,
  an automated <strong>documentation website</strong>,
  and a comprehensive <strong>control center</strong>
  according to <strong>Infrastructure-as-Code</strong>
  and <strong>Continuous Configuration Automation</strong> practices
  to enable dynamic project management and customization.
  ${{ name }}$ establishes a complete <strong>cloud development</strong> environment on GitHub,
  integrating with its version control system, issue tracker,and pull-based model
  to provide a fully <strong>automated software development workflow</strong>
  with <strong>issue management</strong>,
  <strong>branching model</strong>, and <strong>versioning scheme</strong>.
  Leveraging <strong>GitHub Actions</strong>,
  ${{ name }}$ implements a cloud-native Agile development process
  using <strong>Continuous software engineering</strong>, <strong>containerization</strong>,
  and <strong>DevOps</strong> methodologies,
  with a full set of <strong>Continuous Integration</strong>, Deployment, Testing, Refactoring,
  and Maintenance pipelines.
  ${{ name }}$ is a <strong>free</strong> and <strong>open-source</strong> software suite
  that readily integrates with both new and existing projects
  to ensure their long-term sustainability and high quality,
  enabling software projects to rapidly implement their ideas
  and easily maintain their products.
branch:
  main:
    name: main
    ruleset:
      protect_creation: true
      protect_modification:
        allow_fetch_and_merge: true
      protect_deletion: true
      protect_force_push: true
      require_linear_history: true
      require_signatures: true
      require_pull_request:
        dismiss_stale_reviews_on_push: true
        require_code_owner_review: true
        require_last_push_approval: true
        require_review_thread_resolution: true
        required_approving_review_count: 1
  release:
    name: release/v
    ruleset: ${{ branch.main.ruleset }}$
  pre:
    name: prerelease/v
    ruleset: ${{ branch.main.ruleset }}$
  dev:
    name: dev/
    ruleset:
      protect_creation: true
      protect_deletion: true
      protect_force_push: true
      require_linear_history: true
  auto:
    name: auto-update/
    ruleset: ${{ branch.dev.ruleset }}$
commit:
  __data__:
    h1_pkg:
      title: Package
      description: Changes in the ${{ pypkg_main.name }}$ Python package.
    h1_test:
      title: Test Suite
      description: Changes in the ${{ pypkg_test.name }}$ Python package, i.e., ${{ pypkg_main.name }}$'s test-suite.
    h1_docs:
      title: Documentation
      description: Changes in the project documentation materials and website.
    h1_ci:
      title: CI
      description: Changes in the Continuous Integration pipelines of the project.
    h1_cd:
      title: CD
      description: Changes in the Continuous Deployment pipelines of the project.
    h1_config:
      title: Configuration
      description: Changes in the project configurations and metadata.
    h1_maintain:
      title: Maintenance
      description: General maintenance and housekeeping activities.
    h2_api:
      title: API
      description: Changes in the application programming interface (API) of the package.
    h2_cli:
      title: CLI
      description: Changes in the command-line interface (CLI) of the package.
    h2_gui:
      title: GUI
      description: Changes in the graphical user interface (GUI) of the package.
    h2_build:
      title: Setup
      description: Changes in the build and installation processes.
    h2_code:
      title: Code
      description: Changes in code that do not affect public interfaces.
    h2_content:
      title: Content
      description: Changes in documentation content.
    h2_design:
      title: Web Design
      description: Changes in documentation and website design.
    h2_feat:
      title: Web Features
      description: Changes in website features.
    h2_ci_main:
      title: Main
      description: Changes in the main pipeline.
    h2_ci_build:
      title: Build
      description: Changes in the build pipelines.
    h2_ci_lint:
      title: Lint
      description: Changes in the Continuous Refactoring pipelines.
    h2_ci_test:
      title: Test
      description: Changes in the Continuous Testing pipelines.
    h2_cd_pkg:
      title: Package
      description: Changes in the package deployment pipelines.
    h2_cd_docs:
      title: Documentation
      description: Changes in the website deployment pipelines.
    h2_proj:
      title: Project
      description: Related to the entire project.
    h2_pkg:
      title: Package
      description: Related to the ${{ pypkg_main.name }}$ Python package.
    h2_test:
      title: Test Suite
      description: Related to the ${{ pypkg_test.name }}$ Python package, i.e., ${{ pypkg_main.name }}$'s test-suite.
    h2_docs:
      title: Documentation
      description: Related to the project documentation materials and website.
    h2_its:
      title: Issue Tracking
      description: Related to the project's issue tracking system.
    h2_vcs:
      title: Version Control
      description: Related to the project's version control system.
    h2_ci:
      title: CI/CD
      description: Related to the project's Continuous Integration and Deployment pipelines.
    h3_remove:
      title: ⛔ Removed Features
      description: |
        Features that have been removed.
        These are backward-incompatible (breaking) changes.
    h3_change:
      title: 🚫 Changed Features
      description: |
        Features that have been changed in some way, such as in behavior or input/outputs.
        These are backward-incompatible (breaking) changes.
    h3_deprecate:
      title: ⚠️ Deprecated Features
      description: |
        Features that have been marked for removal in the future.
        These are backward-compatible changes.
    h3_feat:
      title: 🌱 New Features
      description: |
        Newly-added backward-compatible features.
    h3_enhance:
      title: ✨ Enhanced Features
      description: |
        Features that have been improved in a backward-compatible way.
    h3_secure:
      title: 🛡️ Security Fixes
      description: |
        Fixes for security vulnerabilities.
        These are backward-compatible changes.
    h3_fix:
      title: 🐞 Bug Fixes
      description: |
        Backward-compatible bug fixes.
    h3_perf:
      title: 🚀 Performance Improvements
      description: |
        Backward-compatible performance improvements.
    h3_refactor:
      title: 🧹 Refactoring
      description: |
        Changes in code structure and organization.
        These are backward-compatible changes that only concern contributors.
    h3_style:
      title: 🎨 Style Changes
      description: |
        Changes in code style and formatting without affecting the meaning.
        These are backward-compatible changes that only concern contributors.
  release:
    pkg_api_fix:
      type: fix
      scope: pkg-api
      action: patch
      type_description: >-
        Fix bugs in ${{ pypkg_main.name }}$'s API.
    pkg_cli_fix:
      type: fix
      scope: pkg-cli
      action: patch
      type_description: >-
        Fix bugs in ${{ pypkg_main.name }}$'s CLI.
    pkg_gui_fix:
      type: fix
      scope: pkg-gui
      action: patch
      type_description: >-
        Fix bugs in ${{ pypkg_main.name }}$'s GUI.
    pkg_build_fix:
      type: fix
      scope: pkg-build
      action: patch
      type_description: >-
        Fix bugs in ${{ pypkg_main.name }}$'s build system.
    pkg_api_feat:
      type: feat
      scope: pkg-api
      action: minor
      type_description: >-
        Add backward-compatible features to ${{ pypkg_main.name }}$'s API.
    pkg_cli_feat:
      type: feat
      scope: pkg-cli
      action: minor
      type_description: >-
        Add backward-compatible features to ${{ pypkg_main.name }}$'s CLI.
    pkg_gui_feat:
      type: feat
      scope: pkg-gui
      action: minor
      type_description: >-
        Add backward-compatible features to ${{ pypkg_main.name }}$'s GUI.
    pkg_build_feat:
      type: feat
      scope: pkg-build
      action: minor
      type_description: >-
        Add backward-compatible features to ${{ pypkg_main.name }}$'s build system.
    pkg_api_change:
      type: change
      scope: pkg-api
      action: major
      type_description: >-
        Introduce backward-incompatible changes in ${{ pypkg_main.name }}$'s API.
    pkg_cli_change:
      type: change
      scope: pkg-cli
      action: major
      type_description: >-
        Introduce backward-incompatible changes in ${{ pypkg_main.name }}$'s CLI.
    pkg_gui_change:
      type: change
      scope: pkg-gui
      action: major
      type_description: >-
        Introduce backward-incompatible changes in ${{ pypkg_main.name }}$'s GUI.
    pkg_build_change:
      type: change
      scope: pkg-build
      action: major
      type_description: >-
        Introduce backward-incompatible changes in ${{ pypkg_main.name }}$'s build system.
    test_api_fix:
      type: fix
      scope: test-api
      action: post
      type_description: >-
        Fix bugs in ${{ pypkg_test.name }}$'s API.
    test_cli_fix:
      type: fix
      scope: test-cli
      action: post
      type_description: >-
        Fix bugs in ${{ pypkg_test.name }}$'s CLI.
    test_gui_fix:
      type: fix
      scope: test-gui
      action: post
      type_description: >-
        Fix bugs in ${{ pypkg_test.name }}$'s GUI.
    test_build_fix:
      type: fix
      scope: test-build
      action: post
      type_description: >-
        Fix bugs in ${{ pypkg_test.name }}$'s build system.
    test_api_feat:
      type: feat
      scope: test-api
      action: post
      type_description: >-
        Add backward-compatible features to ${{ pypkg_test.name }}$'s API.
    test_cli_feat:
      type: feat
      scope: test-cli
      action: post
      type_description: >-
        Add backward-compatible features to ${{ pypkg_test.name }}$'s CLI.
    test_gui_feat:
      type: feat
      scope: test-gui
      action: post
      type_description: >-
        Add backward-compatible features to ${{ pypkg_test.name }}$'s GUI.
    test_build_feat:
      type: feat
      scope: test-build
      action: post
      type_description: >-
        Add backward-compatible features to ${{ pypkg_test.name }}$'s build system.
    test_api_change:
      type: change
      scope: test-api
      action: post
      type_description: >-
        Introduce backward-incompatible changes in ${{ pypkg_test.name }}$'s API.
    test_cli_change:
      type: change
      scope: test-cli
      action: post
      type_description: >-
        Introduce backward-incompatible changes in ${{ pypkg_test.name }}$'s CLI.
    test_gui_change:
      type: change
      scope: test-gui
      action: post
      type_description: >-
        Introduce backward-incompatible changes in ${{ pypkg_test.name }}$'s GUI.
    test_build_change:
      type: change
      scope: test-build
      action: post
      type_description: >-
        Introduce backward-incompatible changes in ${{ pypkg_test.name }}$'s build system.
    docs_fix:
      type: fix
      scope: docs
      action: post
      type_description: >-
        Fix bugs in ${{ name }}$'s documentation.
    docs_feat:
      type: feat
      scope: docs
      action: post
      type_description: >-
        Add backward-compatible features to ${{ name }}$'s documentation.
    docs_change:
      type: change
      scope: docs
      action: post
      type_description: >-
        Introduce backward-incompatible changes in ${{ name }}$'s documentation.
    refactor:
      type: refactor
      action: post
      type_description: >-
        Refactor code in ${{ name }}$.
    config:
      type: config
      type_description: >-
        Change project configurations and metadata.
    ci:
      type: ci
      type_description: >-
        Change Continuous Integration and Deployment pipelines.
    chore:
      type: chore
      type_description: >-
        Perform general maintenance and housekeeping activities.
  dev:
    # Pkg API
    pkg-api-remove:
      type: remove
      scope: pkg-api
      type_description: Remove a feature from ${{ pypkg_main.name }}$'s API.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_remove }}$
    pkg-api-change:
      type: change
      scope: pkg-api
      type_description: Change a feature in ${{ pypkg_main.name }}$'s API.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_change }}$
    pkg-api-deprecate:
      type: deprecate
      scope: pkg-api
      type_description: Deprecate a feature in ${{ pypkg_main.name }}$'s API.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_deprecate }}$
    pkg-api-feat:
      type: feat
      scope: pkg-api
      type_description: Add a feature to ${{ pypkg_main.name }}$'s API.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_feat }}$
    pkg-api-enhance:
      type: enhance
      scope: pkg-api
      type_description: Enhance a feature in ${{ pypkg_main.name }}$'s API.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_enhance }}$
    pkg-api-secure:
      type: secure
      scope: pkg-api
      type_description: Fix a security issue in ${{ pypkg_main.name }}$'s API.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_secure }}$
    pkg-api-fix:
      type: fix
      scope: pkg-api
      type_description: Fix a bug in ${{ pypkg_main.name }}$'s API.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_fix }}$
    pkg-api-perf:
      type: perf
      scope: pkg-api
      type_description: Improve performance in ${{ pypkg_main.name }}$'s API.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_perf }}$
    # Pkg CLI
    pkg-cli-remove:
      type: remove
      scope: pkg-cli
      type_description: Remove a feature from ${{ pypkg_main.name }}$'s CLI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_remove }}$
    pkg-cli-change:
      type: change
      scope: pkg-cli
      type_description: Change a feature in ${{ pypkg_main.name }}$'s CLI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_change }}$
    pkg-cli-deprecate:
      type: deprecate
      scope: pkg-cli
      type_description: Deprecate a feature in ${{ pypkg_main.name }}$'s CLI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_deprecate }}$
    pkg-cli-feat:
      type: feat
      scope: pkg-cli
      type_description: Add a feature to ${{ pypkg_main.name }}$'s CLI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_feat }}$
    pkg-cli-enhance:
      type: enhance
      scope: pkg-cli
      type_description: Enhance a feature in ${{ pypkg_main.name }}$'s CLI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_enhance }}$
    pkg-cli-secure:
      type: secure
      scope: pkg-cli
      type_description: Fix a security issue in ${{ pypkg_main.name }}$'s CLI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_secure }}$
    pkg-cli-fix:
      type: fix
      scope: pkg-cli
      type_description: Fix a bug in ${{ pypkg_main.name }}$'s CLI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_fix }}$
    pkg-cli-perf:
      type: perf
      scope: pkg-cli
      type_description: Improve performance in ${{ pypkg_main.name }}$'s CLI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_perf }}$
    # Pkg GUI
    pkg-gui-remove:
      type: remove
      scope: pkg-gui
      type_description: Remove a feature from ${{ pypkg_main.name }}$'s GUI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_remove }}$
    pkg-gui-change:
      type: change
      scope: pkg-gui
      type_description: Change a feature in ${{ pypkg_main.name }}$'s GUI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_change }}$
    pkg-gui-deprecate:
      type: deprecate
      scope: pkg-gui
      type_description: Deprecate a feature in ${{ pypkg_main.name }}$'s GUI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_deprecate }}$
    pkg-gui-feat:
      type: feat
      scope: pkg-gui
      type_description: Add a feature to ${{ pypkg_main.name }}$'s GUI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_feat }}$
    pkg-gui-enhance:
      type: enhance
      scope: pkg-gui
      type_description: Enhance a feature in ${{ pypkg_main.name }}$'s GUI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_enhance }}$
    pkg-gui-secure:
      type: secure
      scope: pkg-gui
      type_description: Fix a security issue in ${{ pypkg_main.name }}$'s GUI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_secure }}$
    pkg-gui-fix:
      type: fix
      scope: pkg-gui
      type_description: Fix a bug in ${{ pypkg_main.name }}$'s GUI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_fix }}$
    pkg-gui-perf:
      type: perf
      scope: pkg-gui
      type_description: Improve performance in ${{ pypkg_main.name }}$'s GUI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_perf }}$
    # Pkg Build
    pkg-build-remove:
      type: remove
      scope: pkg-build
      type_description: Remove a feature from ${{ pypkg_main.name }}$'s build.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_remove }}$
    pkg-build-change:
      type: change
      scope: pkg-build
      type_description: Change a feature in ${{ pypkg_main.name }}$'s build.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_change }}$
    pkg-build-deprecate:
      type: deprecate
      scope: pkg-build
      type_description: Deprecate a feature in ${{ pypkg_main.name }}$'s build.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_deprecate }}$
    pkg-build-feat:
      type: feat
      scope: pkg-build
      type_description: Add a feature to ${{ pypkg_main.name }}$'s build.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_feat }}$
    pkg-build-enhance:
      type: enhance
      scope: pkg-build
      type_description: Enhance a feature in ${{ pypkg_main.name }}$'s build.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_enhance }}$
    pkg-build-secure:
      type: secure
      scope: pkg-build
      type_description: Fix a security issue in ${{ pypkg_main.name }}$'s build.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_secure }}$
    pkg-build-fix:
      type: fix
      scope: pkg-build
      type_description: Fix a bug in ${{ pypkg_main.name }}$'s build.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_fix }}$
    pkg-build-perf:
      type: perf
      scope: pkg-build
      type_description: Improve performance in ${{ pypkg_main.name }}$'s build.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_perf }}$
    # Pkg Code
    pkg-code-refactor:
      type: refactor
      scope: pkg
      type_description: Refactor code in ${{ pypkg_main.name }}$.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_code }}$
      h3: ${{ ...__data__.h3_refactor }}$
    pkg-code-style:
      type: style
      scope: pkg
      type_description: Change text style and formatting in ${{ pypkg_main.name }}$.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_code }}$
      h3: ${{ ...__data__.h3_style }}$
    # Test API
    test-api-remove:
      type: remove
      scope: test-api
      type_description: Remove a feature from ${{ pypkg_test.name }}$'s API.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_remove }}$
    test-api-change:
      type: change
      scope: test-api
      type_description: Change a feature in ${{ pypkg_test.name }}$'s API.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_change }}$
    test-api-deprecate:
      type: deprecate
      scope: test-api
      type_description: Deprecate a feature in ${{ pypkg_test.name }}$'s API.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_deprecate }}$
    test-api-feat:
      type: feat
      scope: test-api
      type_description: Add a feature to ${{ pypkg_test.name }}$'s API.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_feat }}$
    test-api-enhance:
      type: enhance
      scope: test-api
      type_description: Enhance a feature in ${{ pypkg_test.name }}$'s API.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_enhance }}$
    test-api-secure:
      type: secure
      scope: test-api
      type_description: Fix a security issue in ${{ pypkg_test.name }}$'s API.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_secure }}$
    test-api-fix:
      type: fix
      scope: test-api
      type_description: Fix a bug in ${{ pypkg_test.name }}$'s API.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_fix }}$
    test-api-perf:
      type: perf
      scope: test-api
      type_description: Improve performance in ${{ pypkg_test.name }}$'s API.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_perf }}$
    # Test CLI
    test-cli-remove:
      type: remove
      scope: test-cli
      type_description: Remove a feature from ${{ pypkg_test.name }}$'s CLI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_remove }}$
    test-cli-change:
      type: change
      scope: test-cli
      type_description: Change a feature in ${{ pypkg_test.name }}$'s CLI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_change }}$
    test-cli-deprecate:
      type: deprecate
      scope: test-cli
      type_description: Deprecate a feature in ${{ pypkg_test.name }}$'s CLI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_deprecate }}$
    test-cli-feat:
      type: feat
      scope: test-cli
      type_description: Add a feature to ${{ pypkg_test.name }}$'s CLI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_feat }}$
    test-cli-enhance:
      type: enhance
      scope: test-cli
      type_description: Enhance a feature in ${{ pypkg_test.name }}$'s CLI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_enhance }}$
    test-cli-secure:
      type: secure
      scope: test-cli
      type_description: Fix a security issue in ${{ pypkg_test.name }}$'s CLI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_secure }}$
    test-cli-fix:
      type: fix
      scope: test-cli
      type_description: Fix a bug in ${{ pypkg_test.name }}$'s CLI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_fix }}$
    test-cli-perf:
      type: perf
      scope: test-cli
      type_description: Improve performance in ${{ pypkg_test.name }}$'s CLI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_perf }}$
    # Test GUI
    test-gui-remove:
      type: remove
      scope: test-gui
      type_description: Remove a feature from ${{ pypkg_test.name }}$'s GUI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_remove }}$
    test-gui-change:
      type: change
      scope: test-gui
      type_description: Change a feature in ${{ pypkg_test.name }}$'s GUI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_change }}$
    test-gui-deprecate:
      type: deprecate
      scope: test-gui
      type_description: Deprecate a feature in ${{ pypkg_test.name }}$'s GUI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_deprecate }}$
    test-gui-feat:
      type: feat
      scope: test-gui
      type_description: Add a feature to ${{ pypkg_test.name }}$'s GUI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_feat }}$
    test-gui-enhance:
      type: enhance
      scope: test-gui
      type_description: Enhance a feature in ${{ pypkg_test.name }}$'s GUI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_enhance }}$
    test-gui-secure:
      type: secure
      scope: test-gui
      type_description: Fix a security issue in ${{ pypkg_test.name }}$'s GUI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_secure }}$
    test-gui-fix:
      type: fix
      scope: test-gui
      type_description: Fix a bug in ${{ pypkg_test.name }}$'s GUI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_fix }}$
    test-gui-perf:
      type: perf
      scope: test-gui
      type_description: Improve performance in ${{ pypkg_test.name }}$'s GUI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_perf }}$
    # Test Build
    test-build-remove:
      type: remove
      scope: test-build
      type_description: Remove a feature from ${{ pypkg_test.name }}$'s build.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_remove }}$
    test-build-change:
      type: change
      scope: test-build
      type_description: Change a feature in ${{ pypkg_test.name }}$'s build.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_change }}$
    test-build-deprecate:
      type: deprecate
      scope: test-build
      type_description: Deprecate a feature in ${{ pypkg_test.name }}$'s build.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_deprecate }}$
    test-build-feat:
      type: feat
      scope: test-build
      type_description: Add a feature to ${{ pypkg_test.name }}$'s build.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_feat }}$
    test-build-enhance:
      type: enhance
      scope: test-build
      type_description: Enhance a feature in ${{ pypkg_test.name }}$'s build.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_enhance }}$
    test-build-secure:
      type: secure
      scope: test-build
      type_description: Fix a security issue in ${{ pypkg_test.name }}$'s build.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_secure }}$
    test-build-fix:
      type: fix
      scope: test-build
      type_description: Fix a bug in ${{ pypkg_test.name }}$'s build.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_fix }}$
    test-build-perf:
      type: perf
      scope: test-build
      type_description: Improve performance in ${{ pypkg_test.name }}$'s build.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_perf }}$
    # Test Code
    test-code-refactor:
      type: refactor
      scope: test
      type_description: Refactor code in ${{ pypkg_test.name }}$.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_code }}$
      h3: ${{ ...__data__.h3_refactor }}$
    test-code-style:
      type: style
      scope: test
      type_description: Change text style and formatting in ${{ pypkg_test.name }}$.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_code }}$
      h3: ${{ ...__data__.h3_style }}$
    # Docs Content
    docs-content-remove:
      type: remove
      scope: docs-content
      type_description: Remove content from the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_content }}$
      h3: ${{ ...__data__.h3_remove }}$
    docs-content-change:
      type: change
      scope: docs-content
      type_description: Change content in the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_content }}$
      h3: ${{ ...__data__.h3_change }}$
    docs-content-feat:
      type: feat
      scope: docs-content
      type_description: Add content to the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_content }}$
      h3: ${{ ...__data__.h3_feat }}$
    docs-content-fix:
      type: fix
      scope: docs-content
      type_description: Fix content in the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_content }}$
      h3: ${{ ...__data__.h3_fix }}$
    # Docs Design
    docs-design-remove:
      type: remove
      scope: docs-design
      type_description: Remove design elements from the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_design }}$
      h3: ${{ ...__data__.h3_remove }}$
    docs-design-change:
      type: change
      scope: docs-design
      type_description: Change design elements in the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_design }}$
      h3: ${{ ...__data__.h3_change }}$
    docs-design-feat:
      type: feat
      scope: docs-design
      type_description: Add design elements to the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_design }}$
      h3: ${{ ...__data__.h3_feat }}$
    docs-design-fix:
      type: fix
      scope: docs-design
      type_description: Fix design elements in the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_design }}$
      h3: ${{ ...__data__.h3_fix }}$
    # Docs Features
    docs-feat-remove:
      type: remove
      scope: docs-feat
      type_description: Remove features from the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_feat }}$
      h3: ${{ ...__data__.h3_remove }}$
    docs-feat-change:
      type: change
      scope: docs-feat
      type_description: Change features in the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_feat }}$
      h3: ${{ ...__data__.h3_change }}$
    docs-feat-feat:
      type: feat
      scope: docs-feat
      type_description: Add features to the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_feat }}$
      h3: ${{ ...__data__.h3_feat }}$
    docs-feat-fix:
      type: fix
      scope: docs-feat
      type_description: Fix features in the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_feat }}$
      h3: ${{ ...__data__.h3_fix }}$
    # CI Main
    ci-main-remove:
      type: remove
      scope: ci-main
      type_description: Remove a feature from the main workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_main }}$
      h3: ${{ ...__data__.h3_remove }}$
    ci-main-change:
      type: change
      scope: ci-main
      type_description: Change a feature in the main workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_main }}$
      h3: ${{ ...__data__.h3_change }}$
    ci-main-feat:
      type: feat
      scope: ci-main
      type_description: Add a feature to the main workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_main }}$
      h3: ${{ ...__data__.h3_feat }}$
    ci-main-secure:
      type: secure
      scope: ci-main
      type_description: Fix a security issue in the main workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_main }}$
      h3: ${{ ...__data__.h3_secure }}$
    ci-main-fix:
      type: fix
      scope: ci-main
      type_description: Fix a bug in the main workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_main }}$
      h3: ${{ ...__data__.h3_fix }}$
    ci-main-perf:
      type: perf
      scope: ci-main
      type_description: Improve performance in the main workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_main }}$
      h3: ${{ ...__data__.h3_perf }}$
    # CI Build
    ci-build-remove:
      type: remove
      scope: ci-build
      type_description: Remove a feature from the build workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_build }}$
      h3: ${{ ...__data__.h3_remove }}$
    ci-build-change:
      type: change
      scope: ci-build
      type_description: Change a feature in the build workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_build }}$
      h3: ${{ ...__data__.h3_change }}$
    ci-build-feat:
      type: feat
      scope: ci-build
      type_description: Add a feature to the build workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_build }}$
      h3: ${{ ...__data__.h3_feat }}$
    ci-build-secure:
      type: secure
      scope: ci-build
      type_description: Fix a security issue in the build workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_build }}$
      h3: ${{ ...__data__.h3_secure }}$
    ci-build-fix:
      type: fix
      scope: ci-build
      type_description: Fix a bug in the build workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_build }}$
      h3: ${{ ...__data__.h3_fix }}$
    ci-build-perf:
      type: perf
      scope: ci-build
      type_description: Improve performance in the build workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_build }}$
      h3: ${{ ...__data__.h3_perf }}$
    # CI Lint
    ci-lint-remove:
      type: remove
      scope: ci-lint
      type_description: Remove a feature from the lint workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_lint }}$
      h3: ${{ ...__data__.h3_remove }}$
    ci-lint-change:
      type: change
      scope: ci-lint
      type_description: Change a feature in the lint workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_lint }}$
      h3: ${{ ...__data__.h3_change }}$
    ci-lint-feat:
      type: feat
      scope: ci-lint
      type_description: Add a feature to the lint workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_lint }}$
      h3: ${{ ...__data__.h3_feat }}$
    ci-lint-secure:
      type: secure
      scope: ci-lint
      type_description: Fix a security issue in the lint workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_lint }}$
      h3: ${{ ...__data__.h3_secure }}$
    ci-lint-fix:
      type: fix
      scope: ci-lint
      type_description: Fix a bug in the lint workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_lint }}$
      h3: ${{ ...__data__.h3_fix }}$
    ci-lint-perf:
      type: perf
      scope: ci-lint
      type_description: Improve performance in the lint workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_lint }}$
      h3: ${{ ...__data__.h3_perf }}$
    # CI Test
    ci-test-remove:
      type: remove
      scope: ci-test
      type_description: Remove a feature from the test workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_test }}$
      h3: ${{ ...__data__.h3_remove }}$
    ci-test-change:
      type: change
      scope: ci-test
      type_description: Change a feature in the test workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_test }}$
      h3: ${{ ...__data__.h3_change }}$
    ci-test-feat:
      type: feat
      scope: ci-test
      type_description: Add a feature to the test workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_test }}$
      h3: ${{ ...__data__.h3_feat }}$
    ci-test-secure:
      type: secure
      scope: ci-test
      type_description: Fix a security issue in the test workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_test }}$
      h3: ${{ ...__data__.h3_secure }}$
    ci-test-fix:
      type: fix
      scope: ci-test
      type_description: Fix a bug in the test workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_test }}$
      h3: ${{ ...__data__.h3_fix }}$
    ci-test-perf:
      type: perf
      scope: ci-test
      type_description: Improve performance in the test workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_test }}$
      h3: ${{ ...__data__.h3_perf }}$
    # CD Pkg
    cd-pkg-remove:
      type: remove
      scope: cd-pkg
      type_description: Remove a feature from the package deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_pkg }}$
      h3: ${{ ...__data__.h3_remove }}$
    cd-pkg-change:
      type: change
      scope: cd-pkg
      type_description: Change a feature in the package deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_pkg }}$
      h3: ${{ ...__data__.h3_change }}$
    cd-pkg-feat:
      type: feat
      scope: cd-pkg
      type_description: Add a feature to the package deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_pkg }}$
      h3: ${{ ...__data__.h3_feat }}$
    cd-pkg-secure:
      type: secure
      scope: cd-pkg
      type_description: Fix a security issue in the package deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_pkg }}$
      h3: ${{ ...__data__.h3_secure }}$
    cd-pkg-fix:
      type: fix
      scope: cd-pkg
      type_description: Fix a bug in the package deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_pkg }}$
      h3: ${{ ...__data__.h3_fix }}$
    cd-pkg-perf:
      type: perf
      scope: cd-pkg
      type_description: Improve performance in the package deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_pkg }}$
      h3: ${{ ...__data__.h3_perf }}$
    # CD Docs
    cd-docs-remove:
      type: remove
      scope: cd-docs
      type_description: Remove a feature from the documentation deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_docs }}$
      h3: ${{ ...__data__.h3_remove }}$
    cd-docs-change:
      type: change
      scope: cd-docs
      type_description: Change a feature in the documentation deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_docs }}$
      h3: ${{ ...__data__.h3_change }}$
    cd-docs-feat:
      type: feat
      scope: cd-docs
      type_description: Add a feature to the documentation deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_docs }}$
      h3: ${{ ...__data__.h3_feat }}$
    cd-docs-secure:
      type: secure
      scope: cd-docs
      type_description: Fix a security issue in the documentation deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_docs }}$
      h3: ${{ ...__data__.h3_secure }}$
    cd-docs-fix:
      type: fix
      scope: cd-docs
      type_description: Fix a bug in the documentation deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_docs }}$
      h3: ${{ ...__data__.h3_fix }}$
    cd-docs-perf:
      type: perf
      scope: cd-docs
      type_description: Improve performance in the documentation deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_docs }}$
      h3: ${{ ...__data__.h3_perf }}$
    # Config
    config-proj:
      type: config
      scope: proj
      type_description: Change project configurations.
      h1: ${{ ...__data__.h1_config }}$
      h2: ${{ ...__data__.h2_proj }}$
    config-pkg:
      type: config
      scope: pkg
      type_description: Change package configurations.
      h1: ${{ ...__data__.h1_config }}$
      h2: ${{ ...__data__.h2_pkg }}$
    config-test:
      type: config
      scope: test
      type_description: Change test configurations.
      h1: ${{ ...__data__.h1_config }}$
      h2: ${{ ...__data__.h2_test }}$
    config-docs:
      type: config
      scope: docs
      type_description: Change documentation configurations.
      h1: ${{ ...__data__.h1_config }}$
      h2: ${{ ...__data__.h2_docs }}$
    config-its:
      type: config
      scope: its
      type_description: Change issue tracking system configurations.
      h1: ${{ ...__data__.h1_config }}$
      h2: ${{ ...__data__.h2_its }}$
    config-vcs:
      type: config
      scope: vcs
      type_description: Change version control system configurations.
      h1: ${{ ...__data__.h1_config }}$
      h2: ${{ ...__data__.h2_vcs }}$
    config-ci:
      type: config
      scope: ci
      type_description: Change CI/CD configurations.
      h1: ${{ ...__data__.h1_config }}$
      h2: ${{ ...__data__.h2_ci }}$
    # Maintenance
    maintain-proj:
      type: maintain
      scope: proj
      type_description: Perform maintenance tasks on the project as a whole.
      h1: ${{ ...__data__.h1_maintain }}$
      h2: ${{ ...__data__.h2_proj }}$
    maintain-pkg:
      type: maintain
      scope: pkg
      type_description: Perform maintenance tasks on the package.
      h1: ${{ ...__data__.h1_maintain }}$
      h2: ${{ ...__data__.h2_pkg }}$
    maintain-test:
      type: maintain
      scope: test
      type_description: Perform maintenance tasks on the test suite.
      h1: ${{ ...__data__.h1_maintain }}$
      h2: ${{ ...__data__.h2_test }}$
    maintain-docs:
      type: maintain
      scope: docs
      type_description: Perform maintenance tasks on the documentation.
      h1: ${{ ...__data__.h1_maintain }}$
      h2: ${{ ...__data__.h2_docs }}$
    maintain-its:
      type: maintain
      scope: its
      type_description: Perform maintenance tasks on the issue tracking system.
      h1: ${{ ...__data__.h1_maintain }}$
      h2: ${{ ...__data__.h2_its }}$
    maintain-vcs:
      type: maintain
      scope: vcs
      type_description: Perform maintenance tasks on the version control system.
      h1: ${{ ...__data__.h1_maintain }}$
      h2: ${{ ...__data__.h2_vcs }}$
    maintain-ci:
      type: maintain
      scope: ci
      type_description: Perform maintenance tasks on the CI/CD pipelines.
      h1: ${{ ...__data__.h1_maintain }}$
      h2: ${{ ...__data__.h2_ci }}$
control:
  cache:
    retention_hours:
      css_color_filter: 0
copy_app_license:
  sources: |
    #{{
      return [
        component["path"]["text_plain"]
        for component in get("license.component", {}).values()
      ]
    }}#
  destinations:
    - ${{ pypkg_main.path.root }}$/${{ __temp__.pkg_license_dir_name.licenses }}$
    - ${{ pypkg_test.path.root }}$/${{ __temp__.pkg_license_dir_name.licenses }}$
copy_app_copyright:
  sources: |
    #{{
      return [
        component["path"]["header_plain"]
        for component in get("license.component", {}).values()
        if component["path"].get("header_plain")
      ]
    }}#
  destinations:
    - ${{ pypkg_main.path.root }}$/${{ __temp__.pkg_license_dir_name.copyrights }}$
    - ${{ pypkg_test.path.root }}$/${{ __temp__.pkg_license_dir_name.copyrights }}$
devcontainer:
  docker-compose:
    config:
      services:
        openjournals:
          container_name: openjournals
          image: openjournals/inara:latest
          entrypoint: [ "/bin/sh" ]
          command: [ "-c", "tail -f /dev/null" ]  # `sleep` is not available in the base image.
          volumes:
            - |-
              #{{
                docker_compose_path = get("devcontainer.docker-compose.path")
                path_depth = len(docker_compose_path.split("/")) - 1
                path_to_root_from_compose_file = "../" * path_depth if path_depth else "."
                return path_to_root_from_compose_file
              }}#:${{ devcontainer.docker-compose.config.services.openjournals.working_dir }}$
          working_dir: ${{ devcontainer_main.container.workspaceFolder }}$
  feature:
    git:
      metadata:
        name: Git Installation
        version: 0.1.0
        description: Install Git from the official Git repository.
      install:
        summary: Install Git.
        description: |
          Install Git from the official Git repository.
        parameter:
          version:
            type: string
            summary: Version of Git to install.
            description: >-
              This must be a regex matching a version number
              (`^` and `$` are automatically added to this).
              The latest version matching the regex will be selected.
              If not specified, the latest version will be installed.
            default: ""
            examples:
              - 2.*
              - 2.[0-9]+.[0-9]+
          source:
            type: string
            summary: URL to download the Git source code from.
            description: >-
              The full URL is built by appending the resolved version to this URL.
            default: https://www.kernel.org/pub/software/scm/git/git-
            examples:
              - https://github.com/git/git/archive/v
          prefix:
            type: string
            summary: Path to the directory where Git will be installed.
            default: /usr/local/git
          sysconfdir:
            type: string
            summary: Path to the system configuration directory for Git.
            default: /etc
          instller_dir:
            type: string
            summary: Path to a directory to download the installer to.
            default: /tmp/git-installer
          no_clean:
            type: boolean
            summary: Skip removing installer artifacts after installation.
        references:
          - title: Git installation documentation
            url: https://git-scm.com/book/en/v2/Getting-Started-Installing-Git
          - title: Git Devcontainer Feature installation script
            url: https://github.com/devcontainers/features/tree/main/src/git/
        import:
          - exit_if_not_root
          - get_script_dir
        function:
          __cleanup__:
            summary: Cleanup function.
            body: |
              [[ "$NO_CLEAN" == false ]] && (cd / && rm -rf "$INSTALLER_DIR/git-$VERSION")
        body:
          - content: exit_if_not_root
          - summary: Install system dependencies.
            content: |
              "$SYSPKG_INSTALL_SCRIPT" \
                --apt "$(get_script_dir)/requirements/apt.txt" \
                --logfile "$LOGFILE" \
                $( [ "$DEBUG" = "true" ] && echo --debug )
          - summary: Resolve version
            content: |
              VERSION=$(
                  get_matching_github_refs \
                      --owner git \
                      --repo git \
                      --ref "tags/v" \
                      --remove_prefix "tags/v" \
                      --regex "$VERSION"
              )
          - summary: Download and install Git from source.
            content: |
              # https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/git/install.sh#L299-L312
              mkdir -p "$INSTALLER_DIR"
              echo "📥 Download source code for Git v${VERSION}."
              curl -sL "${SOURCE}${VERSION}.tar.gz" | tar -xzC "$INSTALLER_DIR" 2>&1
              echo "🏗 Build Git."
              cd "$INSTALLER_DIR/git-$VERSION"
              git_options=("prefix=$PREFIX")
              git_options+=("sysconfdir=$SYSCONFDIR")
              git_options+=("USE_LIBPCRE=YesPlease")
              make -s "${git_options[@]}" all && make -s "${git_options[@]}" install 2>&1
          - content: echo "✅ Git v${VERSION} installed successfully."
    miniforge:
      metadata:
        name: Miniforge Installation
        version: 0.1.0
        description: Install Miniforge in the development container.
      install:
        summary: Install Miniforge.
        description: |
          Install Miniforge from the official GitHub repository.
        parameter:
          download:
            type: boolean
            summary: Download the Miniforge installer.
          install:
            type: boolean
            summary: Install conda and mamba using the Miniforge installer.
            description: |
              Raises an error if conda is already installed.
          reinstall:
            type: boolean
            summary: Reinstall conda and mamba using the Miniforge installer.
            description: |
              Same as 'install', but uninstall first if conda is already installed.
          activates:
            type: array
            summary: Paths to shell configuration files to append conda initialization to.
            default: []
            examples:
              - /etc/skel/.bashrc
              - /etc/bash.bashrc
              - /etc/zsh/zshrc
              - ~/.bashrc
              - ~/.zshrc
          update_base:
            type: boolean
            summary: Update the base conda environment.
            description: |
              This is done by running `conda update --all`.
              This is not recommended for production environments.
          env_files:
            type: array
            summary: Paths to conda environment files to install.
            default: []
            validation:
              path_existence:
                must_exist: true
                type: file
          env_dirs:
            type: array
            summary: Paths to directories containing conda environment files to install.
            default: []
            validation:
              path_existence:
                must_exist: true
                type: dir
          set_permission:
            type: boolean
            summary: Set permissions for the conda installation directory.
            description: |
              This is done by adding the '--user' to the conda '--group'
              and setting the group ownership of the conda directory.".
          miniforge_name:
            type: string
            summary: Name of the Miniforge variant to install.
            default: Miniforge3
          miniforge_version:
            type: string
            summary: Version of the Miniforge variant to install.
            description: |
              If not specified, the latest version will be installed.
          conda_dir:
            type: string
            summary: Path to the conda installation directory.
            description: |
              This is the directory where conda will be installed.
              It corresponds to the `CONDA_DIR` environment variable.
            default: /opt/conda
          installer_dir:
            type: string
            summary: Path to a directory to download the installer to.
            description: |
              This is the directory where the Miniforge installer will be downloaded.
            default: /tmp/miniforge-installer
          no_clean:
            type: boolean
            summary: Skip removing installer artifacts after installation.
          interactive:
            type: boolean
            summary: Run the installer in interactive mode.
            description: |
              This allows the installer to prompt the user.
              The default is to run the installer in non-interactive mode.
          group:
            type: string
            summary: Name of a user group to give access to conda.
            default: conda
          user:
            type: string
            summary: Name of a user to add to the conda group.
            default: ""
            description: |
              This user must already exist.
              If not specified, it defaults to the real user running this script.
          active_env:
            type: string
            summary: Name of a conda environment to activate.
            description: |
              This adds `conda activate <env>` to the shell configuration files
              specified in the `activates` parameter,
              and thus only has an effect if the `activates` parameter is set.
            default: base
          no_cache_clean:
            type: boolean
            summary: Skip cleaning the conda cache.
            description: |
              This skips 'conda clean' commands after installation.
              It is useful for local installations.
          conda_activation_script_path:
            type: string
            summary: Relative path to the conda activation script.
            description: |
              The path is relative to the conda installation directory.
              This is a constant and does not need to be changed
              unless Miniforge changes this path in the future.
            default: etc/profile.d/conda.sh
          mamba_activation_script_path:
            type: string
            summary: Relative path to the mamba activation script.
            description: |
              The path is relative to the conda installation directory.
              This is a constant and does not need to be changed
              unless Miniforge changes this path in the future.
            default: etc/profile.d/mamba.sh
        references:
          - title: Miniforge Docker image
            url: https://github.com/conda-forge/miniforge-images/blob/master/ubuntu/Dockerfile
          - title: Miniforge repository README
            url: https://github.com/conda-forge/miniforge?tab=readme-ov-file#install
          - title: Devcontainers conda feature
            url: https://github.com/devcontainers/features/tree/main/src/conda
        import:
          - exit_if_not_root
          - get_script_dir
        function:
          set_executable_paths:
            summary: Set executable paths for conda and mamba.
            description: |
              This function sets the following environment variables:
              - CONDA_EXE: Path to the conda executable.
              - MAMBA_EXE: Path to the mamba executable.
            parameter:
              verify:
                type: boolean
                summary: Verify the existence of the executables.
                description: |
                  This is useful before running the post-installation steps
                  (especially when the installation steps were skipped)
                  to ensure that the executables are available.
            body: |
              CONDA_EXEC="${CONDA_DIR}/bin/conda"
              MAMBA_EXEC="${CONDA_DIR}/bin/mamba"
              if [ "${1:-}" != "verify" ]; then
                  return
              fi
              if [[ ! -f "$CONDA_EXEC" ]]; then
                  if command -v conda >/dev/null 2>&1; then
                      CONDA_DIR="$(conda info --base)"
                      CONDA_EXEC="${CONDA_DIR}/bin/conda"
                  else
                      echo "⛔ Conda executable not found at '$CONDA_EXEC'." >&2
                      exit 1
                  fi
              fi
              if [[ ! -f "$MAMBA_EXEC" ]]; then
                  if command -v mamba >/dev/null 2>&1; then
                      MAMBA_EXEC="$(mamba info --base | tail -n 2 | head -n 1)/bin/mamba"
                  else
                      echo "⛔ Mamba executable not found at '$MAMBA_EXEC'." >&2
                      exit 1
                  fi
              fi
              if [[ ! -f "$CONDA_EXEC" ]]; then
                  echo "⛔ Conda executable not found." >&2
                  exit 1
              fi
              if [[ ! -f "$MAMBA_EXEC" ]]; then
                  echo "⛔ Mamba executable not found." >&2
                  exit 1
              fi
              echo "🎛 Conda executable located at '$CONDA_EXEC'."
              echo "🎛 Mamba executable located at '$MAMBA_EXEC'."
          set_installer_filename:
            summary: Set the installer filename.
            description: |
              This function sets the installer filename
              based on the Miniforge variant and version.
              It sets the following environment variables:
              - INSTALLER_FILENAME: Name of the installer file.
              - INSTALLER: Full path to the installer file.
              - CHECKSUM: Full path to the checksum file for the installer.
            body: |
              local installer_platform="$(uname)-$(uname -m)"
              if [[ "$MINIFORGE_VERSION" == "latest" ]]; then
                  INSTALLER_FILENAME="${MINIFORGE_NAME}-${installer_platform}.sh"
              else
                  INSTALLER_FILENAME="${MINIFORGE_NAME}-${MINIFORGE_VERSION}-${installer_platform}.sh"
              fi
              INSTALLER="${INSTALLER_DIR}/${INSTALLER_FILENAME}"
              CHECKSUM="${INSTALLER}.sha256"
          download_miniforge:
            summary: Download the Miniforge installer.
            description: |
              This function downloads the Miniforge installer
              and its checksum file from the official GitHub repository,
              and verifies the checksum if available.
            body: |
              local installer_url
              local checksum_url
              if [[ "$MINIFORGE_VERSION" == "latest" ]]; then
                  installer_url="https://github.com/conda-forge/miniforge/releases/latest/download/${INSTALLER_FILENAME}"
                  checksum_url=""  # TODO: Find a way to get the checksum URL for the latest version.
              else
                  installer_url="https://github.com/conda-forge/miniforge/releases/download/${MINIFORGE_VERSION}/${INSTALLER_FILENAME}"
                  checksum_url="$installer_url.sha256"
              fi
              mkdir -p "$INSTALLER_DIR"
              if command -v wget >/dev/null 2>&1; then
                  echo "📥 Downloading installer using wget from $installer_url" >&2
                  wget --no-hsts --tries 3 --output-document "$INSTALLER" "$installer_url"
                  if [[ -n "$checksum_url" ]]; then
                      wget --no-hsts --tries 3 --output-document "$CHECKSUM" "$checksum_url"
                  fi
              elif command -v curl >/dev/null 2>&1; then
                  echo "📥 Downloading installer using curl from $installer_url" >&2
                  curl --fail --location --retry 3 --output "$INSTALLER" "$installer_url"
                  if [[ -n "$checksum_url" ]]; then
                      curl --fail --location --retry 3 --output "$CHECKSUM" "$checksum_url"
                  fi
              else
                  echo "⛔ Neither wget nor curl is available." >&2
                  exit 1
              fi
              if [[ -n "$checksum_url" ]]; then
                  verify_miniforge
              fi
          verify_miniforge:
            summary: Verify the Miniforge installer checksum.
            description: |
              This function verifies the checksum of the Miniforge installer
              using the SHA256 checksum file.
            body: |
              echo "📦 Verifying installer checksum"
              if command -v sha256sum >/dev/null 2>&1; then
                  if (cd "$INSTALLER_DIR" && sha256sum --check --status "$CHECKSUM"); then
                      echo "✅ Checksum verification passed" >&2
                  else
                      echo "❌ Checksum verification failed" >&2
                      exit 1
                  fi
              elif command -v shasum >/dev/null 2>&1; then
                  if (cd "$INSTALLER_DIR" && shasum --algorithm 256 --check --status "$CHECKSUM"); then
                      echo "✅ Checksum verification passed" >&2
                  else
                      echo "❌ Checksum verification failed" >&2
                      exit 1
                  fi
              else
                  echo "⛔ Neither sha256sum nor shasum is available." >&2
                  exit 1
              fi
          uninstall_miniforge:
            summary: Uninstall Miniforge.
            body: |
              echo "🗑 Uninstalling conda (Miniforge)."
              "$CONDA_EXEC" init --reverse
              rm -rf "$("$CONDA_EXEC" info --base)"
              rm -f "$HOME/.condarc"
              rm -rf "$HOME/.conda"
              user_home=$(getent passwd "$USER" | cut -d: -f6)
              rm -rf "$user_home/.condarc"
              rm -rf "$user_home/.conda"
            references:
              - title: Miniforge uninstallation documentation
                url: https://github.com/conda-forge/miniforge?tab=readme-ov-file#uninstall
              - title: Anaconda uninstallation documentation
                url: https://www.anaconda.com/docs/getting-started/miniconda/uninstall#manual-uninstall
          install_miniforge:
            summary: Install Miniforge.
            body: |
              echo "📦 Installing Miniforge to $CONDA_DIR"
              if [[ "$INTERACTIVE" == true ]]; then
                  /bin/bash "$INSTALLER" -p "$CONDA_DIR"
              else
                  /bin/bash "$INSTALLER" -b -p "$CONDA_DIR"
              fi

              # Post-installation validation.
              echo "Displaying conda info:"
              "$CONDA_EXEC" info
              echo "Displaying conda config:"
              "$CONDA_EXEC" config --show
              echo "Displaying conda env list:"
              "$CONDA_EXEC" env list
              echo "Displaying conda list:"
              "$CONDA_EXEC" list --name base

              __cleanup__
          add_activation_to_rcfile:
            summary: Add conda activation to shell configuration files.
            body: |
              local conda_script="$CONDA_DIR/$CONDA_ACTIVATION_SCRIPT_PATH"
              local mamba_script="$CONDA_DIR/$MAMBA_ACTIVATION_SCRIPT_PATH"
              lines=(
                  ". '$conda_script'"
                  ". '$mamba_script'"
              )
              if [[ -n "$ACTIVE_ENV" ]]; then
                  lines+=("conda activate $ACTIVE_ENV")
              fi

              for path in "${ACTIVATES[@]}"; do
                  echo "▶️ Sourcing activation script to '$path'"
                  [[ -f "$path" ]] || touch "$path"
                  for line in "${lines[@]}"; do
                      if grep -Fxq "$line" "$path"; then
                          echo "⏭️ Line already exists in '$path': $line"
                      else
                          echo "$line" >> "$path"
                          echo "ℹ️ Appended to '$path': $line"
                      fi
                  done
              done
          setup_environment:
            summary: Setup conda environments from the specified YAML files.
            body: |
              umask 0002
              for env_file in "${ENV_FILES[@]}"; do
                  echo "📦 Installing conda environment from '$env_file'."
                  "$MAMBA_EXEC" env update --file "$env_file"
              done

              for env_dir in "${ENV_DIRS[@]}"; do
                  find "$env_dir" -type f \( -name "*.yml" -o -name "*.yaml" \) | while IFS= read -r env_file; do
                      echo "📦 Installing conda environment from '$env_file'."
                      "$MAMBA_EXEC" env update --file "$env_file"
                  done
              done

              if [[ "$NO_CACHE_CLEAN" == false ]]; then
                  echo "🧹 Cleaning up conda cache."
                  "$MAMBA_EXEC" clean --all -y
              fi
          set_permission:
            summary: Set permissions for the conda installation directory.
            body: |
              echo "🔐 Setting permissions for conda directory."
              getent group "$GROUP" >/dev/null || groupadd -r "$GROUP"
              id -nG "$USER" | grep -qw "$GROUP" || usermod -a -G "$GROUP" "$USER"
              chown -R "$USER:$GROUP" "$CONDA_DIR"
              chmod -R g+r+w "$CONDA_DIR"
              find "$CONDA_DIR" -type d -print0 | xargs -n 1 -0 chmod g+s
            references:
              - title: Conda Devcontainer Feature
                url: https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/conda/install.sh#L81-L115
          __cleanup__:
            summary: Cleanup function.
            body: |
              if [[ "$NO_CLEAN" == false ]]; then
                  [ -f "$INSTALLER" ] && { echo "🗑 Removing installer script at '$INSTALLER'" >&2; rm -f "$INSTALLER"; }
                  [ -f "$CHECKSUM" ] && { echo "🗑 Removing checksum file at '$CHECKSUM'" >&2; rm -f "$CHECKSUM"; }
                  [ -d "$INSTALLER_DIR" ] && [ -z "$(ls -A "$INSTALLER_DIR")" ] && {
                      echo "🗑 Removing installation directory at '$INSTALLER_DIR'" >&2
                      rmdir "$INSTALLER_DIR"
                  }
              fi
              find "$CONDA_DIR" -follow -type f -name '*.a' -delete
              find "$CONDA_DIR" -follow -type f -name '*.pyc' -delete
              if [[ "$NO_CACHE_CLEAN" == false ]] && [[ -f "$CONDA_EXEC" ]]; then
                  echo "🧹 Cleaning up conda cache."
                  "$CONDA_EXEC" clean --all --force-pkgs-dirs --yes
              fi
        body:
          - content: exit_if_not_root
          - content: set_executable_paths
          - content: |
              if [[ "$DOWNLOAD" == true || "$INSTALL" == true || "$REINSTALL" == true ]]; then
                  set_installer_filename
              fi
          - summary: Download Miniforge installer.
            content: if [[ "$DOWNLOAD" == true ]]; then download_miniforge; fi
          - summary: Verify installer checksum.
            content: |
              if [[ "$DOWNLOAD" == true || "$INSTALL" == true || "$REINSTALL" == true ]]; then
                  if [[ -f "$CHECKSUM" ]]; then
                      verify_miniforge
                  else
                      echo "⚠️ Checksum file not found. Skipping verification." >&2
                  fi
              fi
          - summary: Install Miniforge.
            content: |
              if [[ "$INSTALL" == true || "$REINSTALL" == true ]]; then
                  if command -v conda >/dev/null 2>&1; then
                      echo "⚠️ Conda installation found."
                      if [[ "$REINSTALL" != true ]]; then
                          echo "⏩ Conda is already available."
                      else
                          uninstall_miniforge
                          install_miniforge
                      fi
                  else
                      install_miniforge
                  fi
              fi
          - summary: Update executable paths.
            description: |
              If installation was not performed in this run,
              update the CONDA_EXEC variable to point to the correct location.
            content: set_executable_paths --verify
          - summary: Source activation scripts.
            content: if [[ ${#ACTIVATES[@]} -gt 0 ]]; then add_activation_to_rcfile; fi
          - summary: Update base environment.
            content: |
              if [[ "$UPDATE_BASE" == true ]]; then
                  echo "⚠️ Updating base conda environment."
                  "$MAMBA_EXEC" update -n base --all -y
              fi
          - summary: Install conda environments.
            content: |
              if [[ ${#ENV_FILES[@]} -gt 0 || ${#ENV_DIRS[@]} -gt 0 ]]; then setup_environments; fi
          - summary: Set permissions for conda directory.
            content: if [[ "$SET_PERMISSION" == true ]]; then set_permission; fi
          - content: echo "✅ Conda installation complete."
    oh-my-zsh:
      metadata:
        name: Oh My Zsh Installation
        version: 0.1.0
        description: Install Oh My Zsh in the development container.
      install:
        summary: Install Oh My Zsh.
        description: |
          Install Oh My Zsh from the official GitHub repository.
        parameter:
          install_dir:
            type: string
            summary: Path to the Oh My Zsh installation directory.
            description: |
              This is the directory where Oh My Zsh will be installed.
              It corresponds to the [`ZSH`](https://github.com/ohmyzsh/ohmyzsh/wiki/Settings#zsh_custom)
              configuration variable in Oh My Zsh.
            default: /usr/local/share/oh-my-zsh
          font_dir:
            type: string
            summary: Path to the directory where fonts will be downloaded.
            default: /usr/share/fonts/MesloLGS
          zsh_custom_dir:
            type: string
            summary: Path to the Oh My Zsh custom directory.
            description: |
              This corresponds to the [`ZSH_CUSTOM`](https://github.com/ohmyzsh/ohmyzsh/wiki/Settings#zsh_custom)
              configuration variable in Oh My Zsh.
            default: ${{ ..install_dir.default }}$/custom
        import:
          - git_clone
        body:
          - summary: Set permissions.
            content: umask g-w,o-w
          - summary: Install Oh My Zsh.
            content: |
              # https://github.com/ohmyzsh/ohmyzsh/?tab=readme-ov-file#manual-installation
              git_clone --url "https://github.com/ohmyzsh/ohmyzsh" --dir "$INSTALL_DIR"
          - summary: Download fonts.
            references:
              - title: Powelevel10k docs
                url: https://github.com/romkatv/powerlevel10k?tab=readme-ov-file#meslo-nerd-font-patched-for-powerlevel10k
              - title: Powelevel10k issue
                url: https://github.com/romkatv/powerlevel10k/issues/671
              - title: Powerlevel10k README
                url: https://github.com/romkatv/powerlevel10k?tab=readme-ov-file#fonts
            content: |
              mkdir -p "$FONT_DIR"
              BASE_URL="https://github.com/romkatv/powerlevel10k-media/raw/master"
              # Font files to download
              FONT_FILES="
              MesloLGS%20NF%20Regular.ttf
              MesloLGS%20NF%20Bold.ttf
              MesloLGS%20NF%20Italic.ttf
              MesloLGS%20NF%20Bold%20Italic.ttf
              "
              echo "Installing MesloLGS Nerd Fonts to $FONT_DIR..."
              for FONT in $FONT_FILES; do
                # Decode filename for local file
                LOCAL_NAME=$(printf '%b' "${FONT//%/\\x}")
                echo "Downloading $LOCAL_NAME..."
                curl -fsSL "$BASE_URL/$FONT" -o "$FONT_DIR/$LOCAL_NAME"
              done
              # Set proper permissions
              chmod 644 "$FONT_DIR"/*.ttf
              echo "Fonts installed."
          - summary: Install Powerlevel10k theme.
            references:
              - title: Powerlevel10k theme
                url: https://github.com/romkatv/powerlevel10k
            content: |
              git_clone \
                --url "https://github.com/romkatv/powerlevel10k"
                --dir "$ZSH_CUSTOM_DIR/themes/powerlevel10k"
          - summary: Install syntax highlighting plugin.
            references:
              - title: Syntax highlighting plugin installation docs
                url: https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md#oh-my-zsh
            content: |
              git_clone \
                --url "https://github.com/zsh-users/zsh-syntax-highlighting"
                --dir "$ZSH_CUSTOM_DIR/plugins/zsh-syntax-highlighting"
    pixi:
      metadata:
        name: Pixi Installation
        version: 0.46.0
        description: Install Pixi in the development container and activate it.
        mounts:
          - type: volume
            source: ${localWorkspaceFolderBasename}-pixi
            target: ${containerWorkspaceFolder}/.pixi
        postCreateCommand:
          pixi_chown: sudo chown $(whoami) .pixi
      install:
        parameter:
          version:
            type: string
            summary: Version of Pixi to install.
            default: 0.46.0
          install_path:
            type: string
            summary: |
              Path to a bin directory to install the Pixi binary.
            default: /usr/local/bin
        references:
          - title: Pixi docs
            url: https://pixi.sh/latest/integration/editor/vscode/#devcontainer-extension
          - title: Pixi Docker image
            url: https://github.com/prefix-dev/pixi-docker
        body: |
          pixi_bin="${INSTALL_PATH}/pixi"
          curl \
            --compressed \
            -fsSLo "$pixi_bin" \
            "https://github.com/prefix-dev/pixi/releases/download/v${VERSION}/pixi-$(uname -m)-unknown-linux-musl"
          chmod +x "$pixi_bin"
          pixi info
    pkg_setup:
      metadata:
        name: Package Setup
        version: 0.1.0
        description: Install local packages in development mode.
        installsAfter:
          - ghcr.io/devcontainers/features/common-utils
          - ghcr.io/devcontainers/features/conda
        postStartCommand: "/usr/local/share/app_installation/post-start-command.sh"
        options:
          packages:
            type: string
            description: >-
              Packages to install.
              This must be a string representing a JSON object,
              where keys are the name of Conda environments to use for installation.
              Each value is a JSON object with a key "packages",
              and optionally "python-version", and "sources",
              corresponding to the package installation script's input arguments.
              Note that quotes inside the JSON string must be escaped with triple backslashes.
            default: ""
          script_filepath:
            type: string
            description: Absolute path to the installation script file.
            default: /usr/local/share/app_installation/install.py
          metadata_filepath:
            type: string
            description: Absolute path to the project metadata file.
            default: /usr/local/share/app_installation/metadata.json
          log_dirpath:
            type: string
            description: Absolute path to a directory to write log files.
            default: ${{ __temp__.container_build_log_path }}$/pkg_setup
      install: |
        #!/usr/bin/env bash
        set -euxo pipefail

        # Redirect stdout and stderr to a file
        echo "Creating log directory..."
        mkdir -p "$LOG_DIRPATH"
        LOG_FILE="${LOG_DIRPATH}/install.log"
        exec > >(tee -a "$LOG_FILE") 2>&1

        # Create postStartCommand script
        POST_START_SCRIPT_DIRPATH="/usr/local/share/app_installation"
        POST_START_SCRIPT_FILEPATH="${POST_START_SCRIPT_DIRPATH}/post-start-command.sh"
        mkdir -p "$POST_START_SCRIPT_DIRPATH"
        {
          echo '#!/usr/bin/env bash'
          echo 'set -euxo pipefail'
        } > "$POST_START_SCRIPT_FILEPATH"
        chmod +x "$POST_START_SCRIPT_FILEPATH"

        echo "Initializing conda..."
        conda init

        if ! echo "$PACKAGES" | jq empty; then
            echo "Invalid JSON in PACKAGES"
            exit 1
        fi

        for conda_env_name in $(echo "$PACKAGES" | jq -r 'keys[]'); do
            value=$(echo "$PACKAGES" | jq -c --arg k "$conda_env_name" '.[$k]')
            packages=$(echo "$value" | jq -c '.packages')

            # Build the base command
            cmd=(
              python "$SCRIPT_FILEPATH"
                --conda-env-name "$conda_env_name"
                --packages "$packages"
                --filepath "$METADATA_FILEPATH"
                --no-self
            )

            # Optionally add --python-version
            if echo "$value" | jq -e 'has("python-version")' > /dev/null; then
                python_version=$(echo "$value" | jq -r '.["python-version"]')
                cmd+=(--python-version "$python_version")
            fi

            # Optionally add --sources
            if echo "$value" | jq -e 'has("sources")' > /dev/null; then
                sources=$(echo "$value" | jq -r '.sources')
                cmd+=(--sources $sources)
            fi

            # Capture and write command output
            output=$("${cmd[@]}")

            # Append output to the file
            while IFS= read -r line; do
                echo "$line" >> "$POST_START_SCRIPT_FILEPATH"
            done <<< "$output"
        done

        echo "Cleaning up cache..."
        conda clean --all -y
    user_setup:
      # https://github.com/devcontainers/images/blob/main/src/universal/.devcontainer/local-features/setup-user/
      metadata:
        id: setup-user
        name: Setup user configs
        version: "0.1.0"
        containerEnv:
          RUBY_HOME: /usr/local/rvm/rubies/default
          JAVA_ROOT: /home/codespace/java
          NODE_ROOT: /home/codespace/nvm
          PHP_ROOT: /home/codespace/.php
          PYTHON_ROOT: /home/codespace/.python
          RUBY_ROOT: /home/codespace/.ruby
          MAVEN_ROOT: /home/codespace/.maven
          HUGO_ROOT: /home/codespace/.hugo
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"
          NUGET_XMLDOC_MODE: skip
          ORYX_ENV_TYPE: vsonline-present
          PYTHONIOENCODING: UTF-8
          NPM_GLOBAL: /home/codespace/.npm-global
          NVS_HOME: /home/codespace/.nvs
          RVM_PATH: /usr/local/rvm
          RAILS_DEVELOPMENT_HOSTS: .githubpreview.dev,.preview.app.github.dev,.app.github.dev
          GOROOT: /usr/local/go
          JUPYTERLAB_PATH: /home/codespace/.local/bin
          PATH: /home/codespace/.dotnet:/home/codespace/nvm/current/bin:/home/codespace/.php/current/bin:/home/codespace/.python/current/bin:/home/codespace/java/current/bin:/home/codespace/.ruby/current/bin:/home/codespace/.local/bin:${PATH}
        options:
          log_dirpath:
            type: string
            description: Absolute path to a directory to write log files.
            default: ${{ __temp__.container_build_log_path }}$/user_setup
      install: |
        #!/usr/bin/env bash
        set -euxo pipefail

        export DEBIAN_FRONTEND=noninteractive

        # Constants
        LOG_FILE_NAME="install.log"
        SUDOERS_DIR="/etc/sudoers.d"

        # Utility: link tool path only if source exists
        link_if_exists() {
            local src="$1"
            local dest="$2"
            local label="$3"

            if [ -e "$src" ]; then
                mkdir -p "$(dirname "$dest")"
                ln -snf "$src" "$dest"
                echo "✔️ Linked $label"
            else
                echo "⏩ Skipped $label (not found: $src)"
            fi
        }

        get_debian_flavor() {
            local codename=""

            if [ -f /etc/os-release ]; then
                . /etc/os-release
                codename="${VERSION_CODENAME:-}"
            fi

            # Fallback to lsb_release if codename is still empty
            if [ -z "$codename" ] && command -v lsb_release >/dev/null 2>&1; then
                codename="$(lsb_release -c -s)"
            fi

            # Final fallback
            codename="${codename:-unknown}"

            echo "$codename"
        }

        # Redirect stdout and stderr to a file
        echo "Creating log directory..."
        mkdir -p "$LOG_DIRPATH"
        exec > >(tee -a "${LOG_DIRPATH}/${LOG_FILE_NAME}") 2>&1

        # Ensure script is run as root
        if [ "$(id -u)" -ne 0 ]; then
            echo -e 'Script must be run as root. Use sudo, su, or add "USER root" to your Dockerfile before running this script.'
            exit 1
        fi

        # Ensure login shells get the correct path if ENV was used to modify PATH.
        rm -f /etc/profile.d/00-restore-env.sh
        echo "export PATH=${PATH//$(sh -lc 'echo $PATH')/\$PATH}" > /etc/profile.d/00-restore-env.sh
        chmod +x /etc/profile.d/00-restore-env.sh

        # Determine the appropriate non-root user
        USERNAME="${USERNAME:-"${_REMOTE_USER:-"automatic"}"}"
        if [ "${USERNAME}" = "automatic" ]; then
            USERNAME=""
            POSSIBLE_USERS=("vscode" "node" "codespace" "$(awk -v val=1000 -F ":" '$3==val{print $1}' /etc/passwd)")
            for CURRENT_USER in "${POSSIBLE_USERS[@]}"; do
                if id -u ${CURRENT_USER} > /dev/null 2>&1; then
                    USERNAME=${CURRENT_USER}
                    break
                fi
            done
            if [ "${USERNAME}" = "" ]; then
                USERNAME=root
            fi
        elif [ "${USERNAME}" = "none" ] || ! id -u ${USERNAME} > /dev/null 2>&1; then
            USERNAME=root
        fi

        # Set common variables.
        HOME_DIR="/home/${USERNAME}"
        OPT_DIR="/opt"
        DEBIAN_FLAVOR="$(get_debian_flavor)"

        # Enable the oryx tool to generate manifest-dir which is needed for running the postcreate tool.
        # Oryx expects the tool to be installed at `/opt/oryx` and looks for relevant files in there.
        ORYX_DIR="/opt/oryx"
        mkdir -p "$ORYX_DIR"
        echo "vso-focal" > "$ORYX_DIR/.imagetype"
        echo "DEBIAN|${DEBIAN_FLAVOR}-SCM" | tr '[a-z]' '[A-Z]' > "$ORYX_DIR/.ostype"
        if compgen -G "/usr/local/oryx/*" > /dev/null; then
            ln -snf /usr/local/oryx/* "$ORYX_DIR"
        fi

        # Tool links
        DOTNET_PATH="${HOME_DIR}/.dotnet"
        HUGO_PATH="${HOME_DIR}/.hugo/current"
        JAVA_PATH="${HOME_DIR}/java/current"
        MAVEN_PATH="${HOME_DIR}/.maven/current"
        NODE_PATH="${HOME_DIR}/nvm/current"
        PHP_PATH="${HOME_DIR}/.php/current"
        PYTHON_PATH="${HOME_DIR}/.python/current"
        RUBY_PATH="${HOME_DIR}/.ruby/current"

        link_if_exists "/usr/share/dotnet"                          "$DOTNET_PATH"    ".NET SDK"
        link_if_exists "/usr/local/hugo"                            "$HUGO_PATH"      "Hugo"
        link_if_exists "/usr/local/sdkman/candidates/java"          "$JAVA_PATH"      "Java"  #CHECK
        link_if_exists "/usr/local/sdkman/candidates/maven/current" "$MAVEN_PATH"     "Maven"
        link_if_exists "/usr/local/share/nvm"                       "${HOME_DIR}/nvm" "Node.js" #CHECK
        link_if_exists "/usr/local/php/current"                     "$PHP_PATH"       "PHP"
        link_if_exists "/usr/local/python/current"                  "$PYTHON_PATH"    "Python"
        link_if_exists "/usr/local/python"                          "/opt/python"     "Python root"
        link_if_exists "/usr/local/rvm/rubies/default"              "$RUBY_PATH"      "Ruby"

        # .NET special setup
        # Required due to https://github.com/devcontainers/features/pull/628/files#r1276659825
        if [ -d /usr/share/dotnet ]; then
            DOTNET_DIR="/usr/share/dotnet"
            chown -R "$USERNAME:$USERNAME" "$DOTNET_DIR"
            chmod g+r+w+s "$DOTNET_DIR"
            chmod -R g+r+w "$DOTNET_DIR"

            mkdir -p "$OPT_DIR/dotnet/lts"
            cp -R "$DOTNET_DIR/{dotnet,LICENSE.txt,ThirdPartyNotices.txt}" "$OPT_DIR/dotnet/lts" || true
        fi

        # Fix permissions for home directory.
        chown -R "$USERNAME:$USERNAME" "$HOME_DIR"
        chmod -R g+r+w "$HOME_DIR"
        find "${HOME_DIR}" -type d | xargs -n 1 chmod g+s
        # Fix permissions for opt directory.
        if getent group oryx > /dev/null; then
            echo "✅ Group 'oryx' exists, applying group ownership and permissions"
            chown -R "$USERNAME:oryx" "$OPT_DIR"
            chmod -R g+r+w "$OPT_DIR"
            find "$OPT_DIR" -type d | xargs -n 1 chmod g+s
        else
            echo "⚠️ Group 'oryx' does not exist, skipping group-related permission setup for $OPT_DIR"
        fi

        # Customize secure_path for sudo
        SECURE_PATH="${DOTNET_PATH}:${NODE_PATH}/bin:${PHP_PATH}/bin:${PYTHON_PATH}/bin:${JAVA_PATH}/bin:${RUBY_PATH}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin:/usr/local/share:${HOME_DIR}/.local/bin:${PATH}"
        echo "Defaults secure_path=\"$SECURE_PATH\"" >> "${SUDOERS_DIR}/${USERNAME}"

        echo "✅ Dev container user setup complete!"
    syspkg:
      metadata:
        name: System Package Installation
      install:
        summary: Install system packages.
        description: |
          Install system packages listed in a file
          using the system's package manager.
        parameter:
          apt:
            type: string
            summary: APT packages to install.
            description: |
              Path to a file containing newline-separated
              package specifications for apt-get.
            default: ""
            validation:
              path_existence:
                must_exist: true
                type: file
          apk:
            type: string
            summary: APK packages to install.
            description: |
              Path to a file containing newline-separated
              package specifications for apk.
            default: ""
            validation:
              path_existence:
                must_exist: true
                type: file
          dnf:
            type: string
            summary: DNF packages to install.
            description: |
              Path to a file containing newline-separated
              package specifications for dnf.
            default: ""
            validation:
              path_existence:
                must_exist: true
                type: file
          microdnf:
            type: string
            summary: MicroDNF packages to install.
            description: |
              Path to a file containing newline-separated
              package specifications for microdnf.
            default: ""
            validation:
              path_existence:
                must_exist: true
                type: file
          yum:
            type: string
            summary: YUM packages to install.
            description: |
              Path to a file containing newline-separated
              package specifications for yum.
            default: ""
            validation:
              path_existence:
                must_exist: true
                type: file
          apt_repos:
            type: string
            summary: APT repositories to add.
            description: |
              Path to file containing newline-separated arguments
              to pass to 'add-apt-repository', one set per line.
            default: ""
            validation:
              path_existence:
                must_exist: true
                type: file
          keep_repos:
            type: boolean
            summary: Keep APT repositories after installation.
            description: |
              Keep adde repositories after script ends.
              By default, they are removed automatically.
          no_update:
            type: boolean
            summary: Do not update package lists.
            description: |
              By default, the package lists are updated before installation.
              This option skips that step.
          no_clean:
            type: boolean
            summary: Do not clean up after installation.
            description: |
              By default, the package manager's cache is cleaned up after installation.
              This option skips that step.
          interactive:
            type: boolean
            summary: Start an interactive installation.
            description: |
              By default, the installation is non-interactive.
              This option forces an interactive installation.
        import:
          - exit_if_not_root
        function:
          install:
            summary: Install packages using the appropriate package manager.
            references:
              - title: Git Devcontainer Feature
                url: https://github.com/devcontainers/features/blob/6654579de4c31cd9f9f9e19e873521f502403929/src/git/install.sh
            body: |
              if [ ${PKG_MNGR} = "apt-get" ]; then
                  if dpkg -s "$@" > /dev/null 2>&1; then
                      echo "Packages already installed: $@"
                      return 0
                  fi
              elif [ ${INSTALL_CMD} = "dnf" ] || [ ${INSTALL_CMD} = "yum" ]; then
                  _num_pkgs=$(echo "$@" | tr ' ' \\012 | wc -l)
                  _num_installed=$(${INSTALL_CMD} -C list installed "$@" | sed '1,/^Installed/d' | wc -l)
                  if [ ${_num_pkgs} == ${_num_installed} ]; then
                      echo "Packages already installed: $@"
                      return 0
                  fi
              fi
              echo "📲 Installing packages:"
              printf '  - %s\n' "${PACKAGES[@]}"
              "${INSTALL[@]}" "$@"
          clean_apt:
            summary: Clean APT cache.
            description: |
              Starting from APT 2.7.8, the `apt-get` command accepts the `dist-clean` option,
              which removes list files automatically instead of "rm -rf /var/lib/apt/lists/*".
            references:
              - title: APT 2.7.8 release notes
                url: https://tracker.debian.org/news/1492892/accepted-apt-278-source-into-unstable/
              - title: Buildpack-deps PR
                url: https://github.com/docker-library/buildpack-deps/pull/157/files
            body: |
              if ! apt-get dist-clean; then
                  echo "⚠️  'apt-get dist-clean' failed — falling back to 'apt-get clean'."
                  apt-get clean
                  rm -rf /var/lib/apt/lists/*
              fi
          clean_apk:
            summary: Clean APK cache.
            description: |
              Remove the APK cache directory to free up space.
            body: |
              rm -rf /var/cache/apk/*
          clean_dnf:
            summary: Clean DNF cache.
            description: |
              Remove the DNF cache directory to free up space.
            body: |
              dnf clean all
              rm -rf /var/cache/dnf/*
          clean_microdnf:
            summary: Clean MicroDNF cache.
            description: |
              Remove the MicroDNF cache directory to free up space.
            body: |
              microdnf clean all
              rm -rf /var/cache/dnf/*
          clean_yum:
            summary: Clean YUM cache.
            description: |
              Remove the YUM cache directory to free up space.
            body: |
              yum clean all
              rm -rf /var/cache/yum/*
        body:
          - content: exit_if_not_root
          - content: |
              if [[ -z "$APT" && -z "$APK" && -z "$DNF" && -z "$MICRODNF" && -z "$YUM" ]]; then
                  echo "⛔ No package list file provided." >&2
                  exit 1
              fi
          - summary: Set package manager.
            content: |
              if type apt-get > /dev/null 2>&1; then
                  echo "🛠️  Using APT package manager."
                  PKG_FILE="$APT"
                  PKG_MNGR="apt-get"
                  UPDATE=($PKG_MNGR update -y)
                  INSTALL=($PKG_MNGR -y install --no-install-recommends)
                  CLEAN=(clean_apt)
              elif type apk > /dev/null 2>&1; then
                  echo "🛠️  Using APK package manager."
                  PKG_FILE="$APK"
                  PKG_MNGR="apk"
                  UPDATE=($PKG_MNGR update)
                  INSTALL=($PKG_MNGR add --no-cache)
                  CLEAN=(clean_apk)
              elif type microdnf > /dev/null 2>&1; then
                  echo "🛠️  Using MicroDNF package manager."
                  PKG_FILE="$MICRODNF"
                  PKG_MNGR=microdnf
                  UPDATE=()
                  INSTALL=($PKG_MNGR -y install --refresh --best --nodes --noplugins --setopt=install_weak_deps=0)
                  CLEAN=(clean_microdnf)
              elif type dnf > /dev/null 2>&1; then
                  echo "🛠️  Using DNF package manager."
                  PKG_FILE="$DNF"
                  PKG_MNGR=dnf
                  UPDATE=($PKG_MNGR check-update)
                  INSTALL=($PKG_MNGR -y install)
                  CLEAN=(clean_dnf)
              elif type yum > /dev/null 2>&1; then
                  echo "🛠️  Using YUM package manager."
                  PKG_FILE="$YUM"
                  PKG_MNGR=yum
                  UPDATE="$PKG_MNGR check-update"
                  INSTALL=($PKG_MNGR -y install)
                  CLEAN=(clean_yum)
              else
                  echo "(Error) Unable to find a supported package manager."
                  exit 1
              fi
          - summary: Read the package list file and filter out comments and empty lines.
            content: |
              mapfile -t PACKAGES < <(grep -Ev '^\s*(#|$)' "$PKG_FILE")
              if [[ ${#PACKAGES[@]} -eq 0 ]]; then
                  echo "⛔ No packages found in file '$PKG_FILE'." >&2
                  exit 1
              fi
          - summary: Set interactivity.
            content: |
              if [[ "$INTERACTIVE" == false ]]; then
                  echo "🆗 Setting APT to non-interactive mode."
                  export DEBIAN_FRONTEND=noninteractive
              fi
          - summary: Add APT repositories.
            content: |
              ADDED_REPOS=()
              if [[ -n "$APT_REPOS" ]]; then
                  if [[ ! -f "$APT_REPOS" ]]; then
                      echo "⛔ Repo file '$APT_REPOS' does not exist." >&2
                      exit 1
                  fi
                  echo "🗃 Adding APT repositories from '$APT_REPOS'."
                  while IFS= read -r line; do
                      [[ -z "${line:-}" || "${line}" =~ ^[[:space:]]*# ]] && continue
                      echo "📦 Adding repository: $line"
                      eval "add-apt-repository --yes $line"
                      ADDED_REPOS+=("$line")
                  done < "$APT_REPOS"
              fi
          - summary: Update package lists.
            content: |
              if [[ "$NO_UPDATE" == false ]]; then
                  echo "🔄 Updating package lists."
                  "${UPDATE[@]}"
                  if [[ $? -ne 0 ]]; then
                      echo "⚠️  Failed to update package lists." >&2
                      exit 1
                  fi
              fi
          - summary: Install packages.
            content: install "${PACKAGES[@]}"
          - summary: Clean up repositories.
            content: |
              if [[ -n "$APT_REPOS" && "$KEEP_REPOS" == false ]]; then
                  echo "🗑️  Removing added repositories..."
                  for repo_args in "${ADDED_REPOS[@]}"; do
                      echo "❌ Removing repository: $repo_args"
                      eval "add-apt-repository --yes --remove $repo_args" || echo "⚠️  Failed to remove repo: $repo_args" >&2
                  done
              fi
          - summary: Clean up package manager cache.
            content: |
              if [[ "$NO_CLEAN" == false ]]; then
                  echo "🧹 Cleaning up."
                  "${CLEAN[@]}"
              fi
          - content: echo "✅ Package installation complete."
    texlive:
      metadata:
        name: TeX Live Installation
      install:
        summary: Install TeX Live.
        description: |
          Install and/or set up TeX Live using the TeX Live installer.
        parameter:
          install:
            type: boolean
            summary: Install TeX Live.
          reinstall:
            type: boolean
            summary: Same as '--install', but uninstall TeX first if already installed.
          generate_caches:
            type: boolean
            summary: Generate ConTeXt and font caches.
          verify_installation:
            type: boolean
            summary: Verify the TeX Live installation.
          profile:
            type: string
            summary: Path to a TeX Live installation profile file.
            description: |
              If not provided, an interactive installation will be performed.
            default: ""
          mirror:
            type: string
            summary: URI of the TeX Live mirror to use for installation.
            default: rsync://rsync.dante.ctan.org/CTAN/systems/texlive/tlnet/
          no_clean:
            type: boolean
            summary: Do not remove the installer artifacts after installation.
          no_cache_clean:
            type: boolean
            summary: Skip 'apt-get dist-clean' command after installation of dummy package.
          interactive:
            type: boolean
            summary: Start an interactive installation even when profile is provided.
          installer_dir:
            type: string
            summary: Path to directory to download the installer to.
            default: /tmp/texlive-installer
          syspkg_install_script:
            type: string
            summary: Path to the system package installation script.
          debian_equivs_filename:
            type: string
            summary: Name of the Debian equivs filename to download.
            default: debian-equivs-2023-ex.txt
          debian_equivs_url:
            type: string
            summary: URL to download the Debian equivs file from.
            default: https://tug.org/texlive/files/${{ .debian_equivs_filename }}$
          default_texdir_prefix:
            type: string
            summary: Default TeX Live TEXDIR prefix.
            default: /usr/local/texlive
          default_sys_bin:
            type: string
            summary: Default TeX Live sysbin directory.
            default: /usr/local/bin
        import:
          - exit_if_not_root
        function:
          install_requirements:
            summary: Install required packages for TeX Live installation.
            body: |
              if ! command -v "$SYSPKG_INSTALL_SCRIPT" >/dev/null 2>&1; then
                  echo "⛔ Package installer script '$SYSPKG_INSTALL_SCRIPT' is not available." >&2
                  exit 1
              fi
              echo "📦 Install requirements."
              local script_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
              local requirements_dir="$script_dir/requirements"
              "$SYSPKG_INSTALL_SCRIPT" \
                  --apt "$requirements_dir/apt_pkgs.txt" \
                  --logfile "$LOGFILE" \
                  --debug \
          install_dummy_apt_package:
            summary: Download and install dummy TeX Live APT package.
            description: |
              This tells apt-get that all TeX Live packages are installed,
              so that it doesn't try to install them again later.
            references:
              - title: Island of TeX Docker image
                url: https://gitlab.com/islandoftex/images/texlive/-/blob/72240db12e00510972aeea19cd0a08edc22c4152/Dockerfile#L21-46
            body: |
              local equivs_file="${INSTALLER_DIR}/${DEBIAN_EQUIVS_FILENAME}"
              local dummy_version="9999.99999999-1"
              if ! command -v curl >/dev/null 2>&1; then
                  echo "⛔ curl is not available." >&2
                  exit 1
              fi
              echo "📥 Downloading equivs TeX Live APT package data."
              curl "$DEBIAN_EQUIVS_URL" --output "$equivs_file"
              read pkg_name pkg_version < <(
                  awk -F': ' '/^Package:/{pkg=$2} /^Version:/{ver=$2} END{print pkg, ver}' "$equivs_file"
              )
              # Substitute the version number with a large dummy version to avoid updates.
              sed -i "s/${pkg_version}/${dummy_version}/" "$equivs_file"
              echo "📦 Installing equivs TeX Live APT package."
              equivs-build "$equivs_file"
              dpkg -i "${pkg_name}_${dummy_version}_all.deb"
              apt-get install -qyf --no-install-recommends
              if [[ "$NO_CACHE_CLEAN" == false ]]; then
                  echo "🧹 Cleaning up APT cache."
                  apt-get dist-clean
                  rm -rf /var/cache/apt/
              fi
          uninstall_texlive:
            summary: Uninstall TeX Live.
            references:
              - title: TeX Live docs
                url: https://www.tug.org/texlive/doc/texlive-en/texlive-en.html#x1-380003.6
              - title: MacTeX docs
                url: https://www.tug.org/mactex/uninstalling.html
            body: |
              echo "🗑 Uninstall TeX Live."
              tlmgr uninstall --all
              rm -rf "$(kpsewhich -var-value=TEXMFVAR)"
          download_texlive_installer:
            summary: Download the TeX Live installer.
            body: |
              echo "📥 Download TeX Live installer from '$MIRROR' to '$INSTALLER_DIR'."
              rsync -a --stats "$MIRROR" "$INSTALLER_DIR"
          install_texlive:
            summary: Install TeX Live.
            references:
              - title: TeX Live installation docs
                url: https://www.tug.org/texlive/doc/install-tl.html
            body: |
              export TEXLIVE_INSTALL_NO_CONTEXT_CACHE=1
              export NOPERLDOC=1
              if [[ -z "$PROFILE" ]]; then
                  echo "📦 Installing TeXLive in interactive mode without a profile."
                  "$INSTALLER_DIR/install-tl"
              elif [[ "$INTERACTIVE" == "true" ]]; then
                  echo "📦 Installing TeXLive in interactive mode with initial profile '$PROFILE'."
                  "$INSTALLER_DIR/install-tl" -init-from-profile "$PROFILE"
              else
                  echo "📦 Installing TeXLive in non-interactive mode with profile '$PROFILE'."
                  "$INSTALLER_DIR/install-tl" -profile "$PROFILE"
              fi
          set_texdir:
            summary: Set the TeX Live installation directory.
            description: |
              This function sets the TEXDIR environment.
              This is needed for the finalization step.
              The installation directory may be specified in the profile file under the TEXDIR variable.
            body: |
              TEXDIR=$(awk '$1=="TEXDIR"{sub(/^[^[:space:]]+[[:space:]]+/, ""); print}' "$PROFILE")
              if [[ -n "$TEXDIR" ]]; then
                  echo "🎛 TEXDIR set to '$TEXDIR' from profile file '$PROFILE'."
              else
                  # Default is '/usr/local/texlive/YYYY' for release 'YYYY'
                  # Get LaTeX version (year, in format YYYY) from a file named LATEX_YYYY in the installer directory
                  local version=$(find "$INSTALLER_DIR" -maxdepth 1 -type f -regex '.*/LATEX_[0-9]\{4\}' -exec basename {} \; | head -n1 | grep -oP '^LATEX_\K[0-9]{4}')
                  if [[ -z "$version" ]]; then
                      echo "⛔ No LATEX_YYYY file found in '$INSTALLER_DIR'." >&2
                      exit 1
                  fi
                  TEXDIR="${DEFAULT_TEXDIR_PREFIX}/${version}"
                  echo "🎛 TEXDIR set to default value '$TEXDIR'."
              fi
          set_sysbin:
            summary: Set the TeX Live sysbin directory.
            description: |
              This function sets the SYS_BIN environment.
              This is needed for the finalization step.
            body: |
              SYS_BIN=$(awk '$1=="tlpdbopt_sys_bin"{sub(/^[^[:space:]]+[[:space:]]+/, ""); print}' "$PROFILE")
              if [[ -z "$SYS_BIN" ]]; then
                  echo "🎛 Set tlpdbopt_sys_bin to '$SYS_BIN' from profile file '$PROFILE'."
              else
                  SYS_BIN="$DEFAULT_SYS_BIN"
                  echo "🎛 Set tlpdbopt_sys_bin to default value '$SYS_BIN'."
              fi
          add_texlive_bin_to_path:
            summary: Add TeX Live bin directory to the PATH environment variable.
            body: |
              local tlmgr="$(find "$TEXDIR" -name tlmgr)"
              if [[ -n "$tlmgr" ]]; then
                  echo "📦 Located tlmgr at '$tlmgr'."
              else
                  echo "⛔ tlmgr not found in TEXDIR '$TEXDIR'." >&2
                  exit 1
              fi
              echo "🛤 Add TeX Live binaries to system PATH."
              "$tlmgr" path add
          apply_patches:
            summary: Apply patches to TeX Live installation.
            references:
              - title: Island of TeX Docker image
                url: https://gitlab.com/islandoftex/images/texlive/-/issues/30
            body: |
              echo "Fixing ConTeXt path in mtxrun.lua"
              (sed -i \
                  '/package.loaded\["data-ini"\]/a if os.selfpath then environment.ownbin=lfs.symlinktarget(os.selfpath..io.fileseparator..os.selfname);environment.ownpath=environment.ownbin:match("^.*"..io.fileseparator) else environment.ownpath=kpse.new("luatex"):var_value("SELFAUTOLOC");environment.ownbin=environment.ownpath..io.fileseparator..(arg[-2] or arg[-1] or arg[0] or "luatex"):match("[^"..io.fileseparator.."]*$") end' \
                  "$SYS_BIN/mtxrun.lua" || true
              )
          generate_caches:
            summary: Generate ConTeXt and font caches.
            body: |
              echo "💾 Generate ConTeXt and font caches."
              (luaotfload-tool -u || true)
              mkdir -p /etc/fonts/conf.d
              (cp "$(find "$TEXDIR" -name texlive-fontconfig.conf)" /etc/fonts/conf.d/09-texlive-fonts.conf || true)
              fc-cache -fsv
              if [ -f "$SYS_BIN/context" ]; then
                  mtxrun --generate
                  texlua "$SYS_BIN/mtxrun.lua" --luatex --generate
                  context --make
                  context --luatex --make
              fi
          verify_installation:
            summary: Verify the TeX Live installation.
            body: |
              echo "☑️ Verify TeX Live installation."
              latex --version && printf '\n'
              biber --version && printf '\n'
              xindy --version && printf '\n'
              arara --version && printf '\n'
              context --version && printf '\n'
              context --luatex --version && printf '\n'
              asy --version && printf '\n'
              python --version && printf '\n'
              pygmentize -V && printf '\n'
        body:
          - content: exit_if_not_root
          - summary: Install TeX Live.
            content: |
              if [[ "$INSTALL" == true || $"REINSTALL" == true ]]; then
                  mkdir -p "$INSTALLER_DIR"
                  install_requirements
                  if command -v tlmgr >/dev/null 2>&1; then
                      echo "⚠️ LaTeX installation found."
                      if [[ "$REINSTALL" == true ]]; then
                          uninstall_texlive
                      else
                          echo "⛔ LaTeX is already installed."
                          exit 1
                      fi
                  fi
                  if command -v apt-get >/dev/null 2>&1; then
                      install_dummy_apt_package
                  fi
                  download_texlive_installer
                  install_texlive
                  set_texdir
                  if [[ "$NO_CLEAN" == false ]]; then
                      echo "🗑 Removing installer artifacts."
                      rm -rf "$INSTALLER_DIR"
                  fi
                  set_sysbin
                  add_texlive_bin_to_path
                  apply_patches
              elif [[ "$GENERATE_CACHES" == true ]]; then
                  set_texdir
                  set_sysbin
              fi
          - summary: Generate TeX Live caches.
            content: |
              if [[ "$GENERATE_CACHES" == true ]]; then
                  generate_caches
              fi
          - summary: Verify TeX Live installation.
            content: |
              if [[ "$VERIFY_INSTALLATION" == true ]]; then
                  verify_installation
              fi
          - content: echo "✅ TeX Live installation complete."
    volume_setup:
      metadata:
        name: Volume Setup
      install:
        summary: Set up files and directories in the root of the system.
        parameter:
          source_dir:
            type: string
            summary: Path to the source directory.
            description: |
              This is the directory where the files and directories to be set up are located.
            validation:
              path_existence:
                must_exist: true
                type: directory
          manifest_file:
            type: string
            summary: Path to the manifest file.
            description: |
              This is the file that contains the list of files and directories to be set up.
              It is a plain text file containing additional instructions.
            validation:
              path_existence:
                must_exist: true
                type: file
          default_action:
            type: string
            summary: Default action to take on files in source_dir.
            description: |
              This is the action to take if no action is specified in the manifest file.
              It can be one of "copy", "link", or "skip".
            default: write
            validation:
              enum: [ append, prepend, write ]
        import:
          - exit_if_not_root
          - make_parent_dirs
          - prepend_slash
        function:
          execute:
            summary: Execute the specified action on the file.
            parameter:
              action:
                type: string
                summary: Action to take on the file.
              path:
                type: string
                summary: Path to the file.
              chmod_mode:
                type: string
                summary: Chmod mode to apply to the file.
                default: ""
            body: |
              abs_path="$(prepend_slash "$path")"
              src_path="$SOURCE_DIR/$path"

              case "$action" in
                  write)
                      if [ "${abs_path%/}" != "$abs_path" ]; then
                          mkdir -p "$abs_path"
                          echo "📁 Created directory: $abs_path"
                      else
                          make_parent_dirs "$abs_path"
                          cp -fL "$src_path" "$abs_path"
                          echo "📄 Wrote file to: $abs_path"
                      fi
                      ;;
                  delete)
                      if [ -d "$abs_path" ]; then
                          rm -rf "$abs_path"
                          echo "🗑️ Removed directory: $abs_path"
                      elif [ -e "$abs_path" ]; then
                          rm -f "$abs_path"
                          echo "🗑️ Removed file: $abs_path"
                      else
                          echo "Path does not exist for deletion: $abs_path"
                      fi
                      return 0
                      ;;
                  append)
                      make_parent_dirs "$abs_path"
                      cat "$src_path" >> "$abs_path"
                      echo "➕ Appended to: $abs_path"
                      ;;
                  prepend)
                      make_parent_dirs "$abs_path"
                      tmpf=$(mktemp)
                      cat "$src_path" > "$tmpf"
                      [ -f "$abs_path" ] && cat "$abs_path" >> "$tmpf"
                      mv "$tmpf" "$abs_path"
                      echo "🔼 Prepended to: $abs_path"
                      ;;
                  *)
                      echo "Unknown action: $action"
                      exit 1
                      ;;
              esac

              if [ -n "$chmod_mode" ] && [ "$action" != "delete" ]; then
                  if echo "$chmod_mode" | grep -q '[[:space:]]'; then
                      echo "⚠️  Invalid chmod mode (contains spaces): '$chmod_mode'"
                      exit 1
                  else
                      chmod "$chmod_mode" "$abs_path"
                      echo "🔐 Set permissions '$chmod_mode' on: $abs_path"
                  fi
              fi

              HANDLED_PATHS="${HANDLED_PATHS-}\n$path"

          process_manifest:
            summary: Process the manifest file enries and apply changes.
            body: |
              echo "📜 Reading manifest: $MANIFEST_FILE"
              while IFS= read -r line || [ -n "$line" ]; do
                  # Skip empty lines and comments
                  case "$line" in
                      ''|[[:space:]]*\#*) continue ;;
                  esac

                  local chmod_mode=""
                  if echo "$line" | grep -qE '[[:space:]]chmod=[^[:space:]]+$'; then
                      chmod_mode=$(echo "$line" | sed -nE 's/.*[[:space:]]chmod=([^[:space:]]+)$/\1/p')
                      local line=$(echo "$line" | sed -E 's/[[:space:]]chmod=[^[:space:]]+$//')
                  fi

                  # Parse action and quoted path (handles spacing)
                  local action=$(echo "$line" | awk '{print $1}')
                  local path=$(echo "$line" | sed -nE 's/^[^[:space:]]+[[:space:]]+"([^"]+)"[[:space:]]*$/\1/p')

                  if [ -z "$action" ] || [ -z "$path" ]; then
                      echo "Invalid manifest line '$line'."
                      exit 1
                  fi

                  execute "$action" "$path" "$chmod_mode"
              done < "$MANIFEST_FILE"
        body:
          - content: exit_if_not_root
          - content: |
              # Remove trailing slash from SOURCE_DIR if it exists
              SOURCE_DIR="${SOURCE_DIR%/}"
          - summary: Process manifest file.
            content: |
              if [ -n "$MANIFEST_FILE" ] && [ -f "$MANIFEST_FILE" ]; then
                  process_manifest
              fi
          - summary: Process source directory.
            description: |
              Apply default action to all remaining files in the source directory.
            content: |
              echo "🔍 Scanning source directory for remaining files"
              find "$SOURCE_DIR" -type f | while read -r filepath; do
                  relpath="${filepath#$SOURCE_DIR/}"
                  printf "%s\n" "$HANDLED_PATHS" | grep -qxF "$relpath" && continue
                  execute "$DEFAULT_ACTION" "$relpath"
              done
          - content: echo "✅ Volume setup complete."
  function:
    exit_if_not_root:
      summary: Exit with an error if not running as root user.
      description: |
        This function checks if the script is being run as the root user.
        If not, it prints an error message and exits with status code 1.
        This is useful as an early check for scripts
        that require root privileges to run.
      references:
        - title: Devcontainer Feature installation script
          url: https://github.com/devcontainers/features/blob/6654579de4c31cd9f9f9e19e873521f502403929/src/common-utils/main.sh#L331-L334
      body: |
        if [ "$(id -u)" -ne 0 ]; then
            echo '⛔ This script must be run as root. Use sudo, su, or add "USER root" to your Dockerfile before running this script.' >&2
            exit 1
        fi
    get_script_dir:
      summary: Get the directory of the current running script.
      description: |
        This function returns the directory of the script
        that is currently being executed.
        It uses the `realpath` command to resolve any symbolic links
        and returns the absolute path to the script's directory.
        This is useful for scripts that need to reference files
        relative to their own location.
      return:
        - name: script_dir
          summary: Absolute directory path of the current running script.
          variable: script_dir
      body: |
        local script_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
    git_clone:
      summary: Clone a Git repository.
      description: |
        Clone a Git repository from a specified URL
        into a specified directory.
      parameter:
        url:
          type: string
          summary: URL of the Git repository to clone.
        dir:
          type: string
          summary: Path to the directory to clone the repository into.
          validation:
            path_existence:
              must_exist: false
              type: directory
      references:
        - title: Git clone documentation
          url: https://git-scm.com/docs/git-clone
      body: |
        mkdir -p "$dir"
        git clone --depth=1 \
            -c core.eol=lf \
            -c core.autocrlf=false \
            -c fsck.zeroPaddedFilemode=ignore \
            -c fetch.fsck.zeroPaddedFilemode=ignore \
            -c receive.fsck.zeroPaddedFilemode=ignore \
            "$url" \
            "$dir" 2>&1
        (cd "$dir" && git repack -a -d -f --depth=1 --window=1)
    get_matching_github_ref:
      summary: Get the latest matching reference from a GitHub repository.
      parameter:
        owner:
          type: string
          summary: Owner of the GitHub repository.
          examples:
            - repodynamics
        repo:
          type: string
          summary: Name of the GitHub repository.
          examples:
            - pypackit
        ref:
          type: string
          summary: Reference to match against.
          description: |
            All references starting with this string will match.
          examples:
            - heads/
            - heads/<branch-name>
            - tags/
            - tags/v
            - tags/v1.
        remove_prefix:
          type: string
          summary: Prefix to remove from the matching references.
          default: ""
          description: |
            This is used to clean up the reference names.
            For example, if the ref is "tags/v1.2.3",
            and the prefix is "tags/v",
            the result will be "1.2.3".
          examples:
            - heads/
            - tags/
            - tags/v
        regex:
          type: string
          summary: Regular expression to match against the reference names.
          description: |
            This is used to further filter the references,
            after removing the prefix. The leading "^" and
            trailing "$" are automatically added to this regex.
          default: ""
          examples:
            - '^[0-9]+\.[0-9]+\.[0-9]+$'
      return:
        - name: ref
          summary: Latest matching reference.
          type: string
          description: |
            The most recent reference that
            matches the specified criteria.
          variable: ref
      references:
        - title: Python Devcontainer Feature
          url: https://github.com/devcontainers/features/blob/6654579de4c31cd9f9f9e19e873521f502403929/src/python/install.sh#L263-L294
        - title: Git Devcontainer Feature
          url: https://github.com/devcontainers/features/blob/6654579de4c31cd9f9f9e19e873521f502403929/src/git/install.sh#L282-L297
      body: |
        local api_url="https://api.github.com/repos/${owner}/${repo}/git/matching-refs/${ref}"
        local refs=()
        mapfile -t all_refs < <(
            curl -fsSL "$api_url" |
            jq -r '.[] | .ref' |
            while IFS= read -r full_ref; do
                local clean_ref="${full_ref#refs/}"
                if [[ "$clean_ref" == "$remove_prefix"* ]]; then
                    clean_ref="${clean_ref#$remove_prefix}"
                    printf '%s\n' "$clean_ref"
                fi
            done
        )
        echo "ℹ️ Initial matched refs:" >&2
        printf '- %s\n' "${all_refs[@]}" >&2

        if [[ -z "$regex" ]]; then
            matched_refs=("${all_refs[@]}")
        else
            # Add ^...$ anchors
            regex="^${regex}\$"
            for ref in "${all_refs[@]}"; do
                if [[ "$ref" =~ $regex ]]; then
                    matched_refs+=("$ref")
                fi
            done
            echo "ℹ️ Final matched refs:" >&2
            printf '- %s\n' "${matched_refs[@]}" >&2
        fi

        if [[ ${#matched_refs[@]} -eq 0 ]]; then
            echo "⛔ No matching refs found." >&2
            exit 1
        fi

        # Output most recent match (last element)
        ref="${matched_refs[-1]}"
    make_parent_dirs:
      summary: Create missing parent directories for a given filepath.
      parameter:
        filepath:
          type: string
          summary: Path to the file.
          description: |
            This is the path to the file for which
            the parent directories should be created.
      body: |
        local dir_path=$(dirname "$filepath")
        if [ ! -d "$dir_path" ]; then
            mkdir -p "$dir_path"
            echo "Created parent directory: $dir_path"
        fi
    prepend_slash:
      summary: Prepend a slash to a path if it doesn't already start with one.
      parameter:
        path:
          type: string
          summary: Path to modify.
          description: |
            This is the path to modify.
            It will be prepended with a slash if it doesn't already start with one.
      return:
        - name: modified_path
          type: string
          summary: Modified path.
          variable: modified_path
      body: |
        local modified_path="$path"
        if [[ "$modified_path" != /* ]]; then
            modified_path="/$modified_path"
        fi
devcontainer_main:
  var:
    conda:
      name: Miniforge3
      version: 24.11.3-2
      dir: /opt/conda
      conda_script: ${{ .dir }}$/etc/profile.d/conda.sh
      mamba_script: ${{ .dir }}$/etc/profile.d/mamba.sh
      app_env: app
      activate: ${{ .app_env }}$
    bash:
      global_bashrc: /etc/bash.bashrc
    zsh:
      global_config_dir: /etc/zsh
      oh_my_zsh_install_dir: ${{ ..user.home }}$/.oh-my-zsh
    git:
      version: "2.49.0"
      prefix: /usr/local/git
    user:
      name: '#{{ return f"{slugify(get("name"))}-dev" }}#'
      group: ${{ .name }}$
      home: /home/${{ .name }}$
      shell: /bin/zsh
      gid: 1000
      uid: 1000
    share_dir: /usr/local/share/#{{ return slugify(get("name")) }}#-container
    log_dir: /var/log/#{{ return slugify(get("name")) }}#-container
    apt_env_dir: ${{ .share_dir }}$/apt-env
    script_dir: ${{ .share_dir }}$/script
    apt_install_script: ${{ .script_dir }}$/_helper/apt-install.sh
  service:
    privileged: true  # Required to use Docker in Docker.
  dockerfile:
    - title: Base Image
      summary: Starting point for the devcontainer.
      instructions:
        - FROM: ubuntu:noble
      description: |
        We use a bare [Ubuntu image](https://hub.docker.com/_/ubuntu)
        for maximum control over the environment.
        The Noble (22.04) release is used,
        which corresponds to the `ubuntu-latest`
        [GitHub Actions runner](https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories)
        as of April 2025.
        For other options, See:
        - [Devcontainer images](https://github.com/devcontainers/images)
          and their corresponding [templates](https://github.com/devcontainers/templates).
        - [Buildpack-deps images](https://github.com/docker-library/buildpack-deps/).
    - title: Arguments and Environment Variables
      summary: Main build arguments and environment variables.
      instructions:
        - ENV: |
            LANG=C.UTF-8
            LC_ALL=C.UTF-8
            PYTHONIOENCODING=UTF-8
            TZ=UTC
        - USER: root
      description: |
        Only include those that affect the build processes
        and do not change frequently.
        Other environment variables can be set
        directly before where its needed
        (or at the end if only needed for the final image)
        to avoid early cache invalidation.
    - title: System Package Installation Script
      summary: Set up the system package installation script.
      instructions:
        - ARG:
            SYSPKG_INSTALL_SCRIPT: "${{ devcontainer_main.var.share_dir }}$/${{ devcontainer_main.file.apt_install_script.path }}$"
        - COPY: |
            ["${{ devcontainer_main.file.apt_install_script.path }}$", "$APT_INSTALL_SCRIPT"]
        - RUN: |
            chmod +x "$APT_INSTALL_SCRIPT"
      description: |
        This step copies the system package installation script
        to the container and makes it executable.
        It is used in later steps to install packages
        from the system package manager.
    - title: APT Packages (Required)
      summary: Installation of required APT packages.
      instructions: '#{{ return hook.docker_apt("main", "required") }}#'
    - title: APT Packages (Essential)
      summary: Installation of essential APT packages.
      instructions: '#{{ return hook.docker_apt("main", "essential") }}#'
    - title: Git Installation
      description: |
        We install [git](https://git-scm.com/doc)
        directly from its [GitHub repository](https://github.com/git/git)
        to get and up-to-date version.
      instructions:
        - ARG: |
            GIT_INSTALL_SCRIPT="${{ devcontainer_main.var.share_dir }}$/${{ devcontainer_main.file.git_install_script.path }}$"
        - COPY: |
            ["${{ devcontainer_main.file.git_install_script.path }}$", "$GIT_INSTALL_SCRIPT"]
        - ENV: |
            PATH=${{ devcontainer_main.var.git.prefix }}$/bin:$PATH
        - RUN: |
            chmod +x "$GIT_INSTALL_SCRIPT";
            "$GIT_INSTALL_SCRIPT"
                --version "${{ devcontainer_main.var.git.version }}$"
                --prefix "${{ devcontainer_main.var.git.prefix }}$"
                --logfile "${{ devcontainer_main.var.log_dir }}$/git_install.log"
                --debug
    - title: User Setup
      summary: Setup user.
      instructions:
        - ARG: |
            USERNAME=${{ devcontainer_main.var.user.name }}$
            USER_HOME=${{ devcontainer_main.var.user.home }}$
            USER_GID=${{ devcontainer_main.var.user.gid }}$
            USER_UID=${{ devcontainer_main.var.user.uid }}$
        - RUN: |
            # Create a new user with the specified UID and GID with sudo access.
            # - https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/common-utils/main.sh#L427-L443
            # - https://code.visualstudio.com/remote/advancedcontainers/add-nonroot-user#_change-the-uidgid-of-an-existing-container-user
            set -eux;
            groupadd --gid $USER_GID $USERNAME;
            useradd
                --create-home
                --home-dir "$USER_HOME"
                --gid $USER_GID
                --shell /bin/bash
                --uid $USER_UID
                $USERNAME;
            # Grant user passwordless sudo access to act as any user.
            echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" | tee /etc/sudoers.d/$USERNAME > /dev/null;
            chmod 0440 /etc/sudoers.d/$USERNAME;
    - title: TeX Live Installation
      summary: Installation of TeX Live.
      instructions:
        - ARG: |
            TEXLIVE_INSTALL_SCRIPT="${{ devcontainer_main.var.share_dir }}$/${{ devcontainer_main.file.texlive_install_script.path }}$"
            TEXLIVE_INSTALL_PROFILE="${{ devcontainer_main.var.share_dir }}$/${{ devcontainer_main.file.texlive_install_profile.path }}$"
        - COPY: |
            ["${{ devcontainer_main.file.texlive_install_script.path }}$", "$TEXLIVE_INSTALL_SCRIPT"]
        - COPY: |
            ["${{ devcontainer_main.file.texlive_install_profile.path }}$", "$TEXLIVE_INSTALL_PROFILE"]
        - RUN: |
            chmod +x "$TEXLIVE_INSTALL_SCRIPT";
            "$TEXLIVE_INSTALL_SCRIPT"
                --profile "$TEXLIVE_INSTALL_PROFILE"
                --logfile "${{ devcontainer_main.var.log_dir }}$/texlive_install.log"
                --debug
    - title: MiniForge Installation
      instructions:
        - ENV: |
            CONDA_DIR=${{ devcontainer_main.var.conda.dir }}$
            PATH=$CONDA_DIR/bin:$PATH
        - ARG: |
            MINIFORGE_INSTALL_SCRIPT="${{ devcontainer_main.var.share_dir }}$/${{ devcontainer_main.file.conda_install_script.path }}$"
        - COPY: |
            ["${{ devcontainer_main.file.conda_install_script.path }}$", "$MINIFORGE_INSTALL_SCRIPT"]
        - RUN: |
            chmod +x "$MINIFORGE_INSTALL_SCRIPT";
            "$MINIFORGE_INSTALL_SCRIPT"
                --name "${{ devcontainer_main.var.conda.name }}$"
                --version "${{ devcontainer_main.var.conda.version }}$"
                --conda-dir "$CONDA_DIR"
                --group "${{ devcontainer_main.var.user.group }}$"
                --user "${{ devcontainer_main.var.user.name }}$"
                --logfile "${{ devcontainer_main.var.log_dir }}$/miniforge_install.log"
                --debug
    - title: APT Packages (Recommended)
      summary: Installation of recommended APT packages.
      instructions: '#{{ return hook.docker_apt("main", "recommended") }}#'
    - title: Conda Environment Installation
      instructions:
        - ARG: |
            CONDA_ENVS_INSTALL_SCRIPT="${{ devcontainer_main.var.share_dir }}$/${{ devcontainer_main.file.conda_env_install_script.path }}$"
            CONDA_ENVS_DIR="${{ devcontainer_main.var.share_dir }}$/${{ devcontainer_main.path.conda.envs }}$"
        - COPY: |
            ["${{ devcontainer_main.file.conda_env_install_script.path }}$", "$CONDA_ENVS_INSTALL_SCRIPT"]
        - COPY: |
            ["${{ devcontainer_main.path.conda.envs }}$/", "$CONDA_ENVS_DIR"]
        - RUN: |
            chmod +x "$CONDA_ENVS_INSTALL_SCRIPT";
            "$CONDA_ENVS_INSTALL_SCRIPT"
                --envs "$CONDA_ENVS_DIR"
                --logfile "${{ devcontainer_main.var.log_dir }}$/conda_envs_install.log"
                --debug
    - title: Copy Files
      instructions:
        - COPY: ${{ control.path.pkg_install_script }}$ ${{ devfeature_pkg_setup.feature.options.script_filepath.default }}$
        - COPY: .github/.repodynamics/metadata.json ${{ devfeature_pkg_setup.feature.options.metadata_filepath.default }}$
    - title: Post-Installation
      summary: Run post-installation tasks.
      instructions:
        - RUN: |
            # Delete default ubuntu user.
            # - Ref: https://github.com/devcontainers/images/blob/main/src/base-ubuntu/.devcontainer/Dockerfile
            if id "ubuntu" &>/dev/null; then
                echo "Deleting user 'ubuntu'" && userdel -f -r ubuntu || echo "Failed to delete ubuntu user.";
            else
                echo "User 'ubuntu' does not exist.";
            fi
    - title: Oh-My-Zsh Installation
      instructions:
        - ARG: |
            OH_MY_ZSH_INSTALL_DIR=${{ devcontainer_main.var.zsh.oh_my_zsh_install_dir }}$
        - RUN: |
            set -eux;
            # Remove write permissions for group and others
            # (only user can write to the directory).
            umask g-w,o-w;
            mkdir -p "$OH_MY_ZSH_INSTALL_DIR";
            git clone
                --depth=1
                -c core.eol=lf
                -c core.autocrlf=false
                -c fsck.zeroPaddedFilemode=ignore
                -c fetch.fsck.zeroPaddedFilemode=ignore
                -c receive.fsck.zeroPaddedFilemode=ignore
                "https://github.com/ohmyzsh/ohmyzsh"
                "$OH_MY_ZSH_INSTALL_DIR" 2>&1;
            # Shrink git while still enabling updates
            cd "$OH_MY_ZSH_INSTALL_DIR";
            git repack -a -d -f --depth=1 --window=1;
    - title: APT Packages (Optional)
      summary: Installation of recommended APT packages.
      instructions: '#{{ return hook.docker_apt("main", "optional") }}#'
    - title: Finalization
      instructions:
        - ARG: |
            USER_SHELL=${{ devcontainer_main.var.user.shell }}$
        - RUN: |
            # Ensure that login shells get the correct path if the user updated the PATH using ENV.
            # - https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/common-utils/main.sh#L343-L346
            rm -f /etc/profile.d/00-restore-env.sh
            echo "export PATH=${PATH//$(sh -lc 'echo $PATH')/\$PATH}" > /etc/profile.d/00-restore-env.sh
            chmod +x /etc/profile.d/00-restore-env.sh

            # Give user ownership of the entire home directory.
            chown --recursive "$USERNAME:$USERNAME" "$HOME_DIR";

            # Give the group (g) read and write (r+w) permissions on the entire home directory.
            chmod --recursive g+r+w "$HOME_DIR";

            # Set the group ID (g+s) on all directories in the home directory
            # so that new files and directories created in the home directory inherit the group ID.
            find "${HOME_DIR}" -type d | xargs -n 1 chmod g+s;

            # Set user's default shell.
            # Fix `chsh`` always asking for a password on alpine linux
            # - Ref: https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/common-utils/main.sh#L520-L528
            # - Ref: https://askubuntu.com/questions/812420/chsh-always-asking-a-password-and-get-pam-authentication-failure.
            if [ ! -f "/etc/pam.d/chsh" ] || ! grep -Eq '^auth(.*)pam_rootok\.so$' /etc/pam.d/chsh; then
                echo "auth sufficient pam_rootok.so" >> /etc/pam.d/chsh;
            elif [[ -n "$(awk '/^auth(.*)pam_rootok\.so$/ && !/^auth[[:blank:]]+sufficient[[:blank:]]+pam_rootok\.so$/' /etc/pam.d/chsh)" ]]; then
                awk '/^auth(.*)pam_rootok\.so$/ { $2 = "sufficient" } { print }' /etc/pam.d/chsh > /tmp/chsh.tmp && mv /tmp/chsh.tmp /etc/pam.d/chsh;
            fi;
            chsh --shell "$USER_SHELL" "$USERNAME";
        - ENV: |
            BASH_ENV=${{ devcontainer_main.volume.bashenv.path }}$
    - title: Entry
      instructions:
        - CMD: |
            [ "sleep", "infinity" ]
  container:
    name: Main Development Environment
    workspaceFolder: /#{{ return slugify(get("name")) }}#
    containerUser: ${{ devcontainer_main.var.user.name }}$
    remoteUser: ${{ .containerUser }}$
    forwardPorts:
      - ${{ __temp__.port.jupyter }}$
      - ${{ __temp__.port.desktop_lite.web }}$
      - ${{ __temp__.port.desktop_lite.vnc }}$
    portsAttributes:
      '#{{ return str(get("__temp__.port.desktop_lite.web")) }}#':
        label: Desktop Lite (web)
        onAutoForward: openBrowserOnce
        elevateIfNeeded: true
      '#{{ return str(get("__temp__.port.desktop_lite.vnc")) }}#':
        label: Desktop Lite (VNC)
        elevateIfNeeded: true
      '#{{ return str(get("__temp__.port.jupyter")) }}#':
        label: Jupyter
        onAutoForward: openBrowserOnce
        elevateIfNeeded: true
    features:
      # https://github.com/devcontainers/features/tree/main/src/common-utils
      ghcr.io/devcontainers/features/common-utils:2:
        installZsh: true
        configureZshAsDefaultShell: true
        installOhMyZsh: true
        installOhMyZshConfig: true
        upgradePackages: true
        username: ${{ devcontainer_main.container.containerUser }}$
        userUid: "1000"
        userGid: "1000"
      # https://github.com/devcontainers/features/tree/main/src/desktop-lite
      ghcr.io/devcontainers/features/desktop-lite:1:
        version: latest
        password: noPassword
        webPort: '#{{ return str(get("__temp__.port.desktop_lite.web")) }}#'
        vncPort: '#{{ return str(get("__temp__.port.desktop_lite.vnc")) }}#'
      # https://github.com/devcontainers/features/tree/main/src/docker-outside-of-docker
      ghcr.io/devcontainers/features/docker-outside-of-docker:1:
        # Note: This feature is incompatible with the Docker-in-Docker feature
        # - https://github.com/devcontainers/features/issues/742#issuecomment-1793019485
        version: latest
      # https://github.com/devcontainers/features/tree/main/src/git-lfs
      ghcr.io/devcontainers/features/git-lfs:1:
        version: latest
        autoPull: true
      # https://github.com/devcontainers/features/tree/main/src/github-cli
      ghcr.io/devcontainers/features/github-cli:1:
        version: latest
      # https://github.com/devcontainers/features/tree/main/src/node
      ghcr.io/devcontainers/features/node:1:
        version: latest
        nodeGypDependencies: true
        nvmInstallPath: /usr/local/share/nvm
        pnpmVersion: latest
        nvmVersion: latest
        installYarnUsingApt: true
      # https://github.com/devcontainers/features/tree/main/src/oryx
      ghcr.io/devcontainers/features/oryx:1: {}
      # https://github.com/devcontainers/features/tree/main/src/ruby
      ghcr.io/devcontainers/features/ruby:1:
        version: latest
      # https://github.com/devcontainers/features/tree/main/src/rust
      ghcr.io/devcontainers/features/rust:1:
        version: latest
        profile: minimal
      # https://github.com/devcontainers/features/tree/main/src/sshd
      ghcr.io/devcontainers/features/sshd:1:
        version: latest
      # Local features
      ./${{ devfeature_user_setup.path }}$: {}
      ./${{ devfeature_pkg_setup.path }}$:
        packages: >-
          {
            \"${{ __temp__.conda_env_name.app }}$\": {
              \"packages\": [
                {
                  \"id\": \"main\",
                  \"extras\": \"all\"
                },
                {
                  \"id\": \"test\",
                  \"extras\": \"all\"
                }
              ],
              \"python-version\": \"${{ pypkg_main.python.version.minors[0] }}$\",
              \"sources\": \"pip conda apt bash\"
            },
            \"${{ devcontainer_main.environment.website.name }}$\": {
              \"packages\": [
                {
                  \"id\": \"ci\",
                  \"extras\": \"all\"
                }
              ],
              \"python-version\": \"${{ pypkg_ci.python.version.minors[-1] }}$\",
              \"sources\": \"pip conda apt bash\"
            }
          }
    overrideFeatureInstallOrder:
      - ghcr.io/devcontainers/features/common-utils
      - ghcr.io/devcontainers/features/desktop-lite:1
      - ghcr.io/devcontainers/features/node
      - ghcr.io/devcontainers/features/ruby
      - ghcr.io/devcontainers/features/sshd
      - ghcr.io/devcontainers/features/git-lfs
      - ghcr.io/devcontainers/features/github-cli
      - ghcr.io/devcontainers/features/docker-outside-of-docker
      - ghcr.io/devcontainers/features/oryx
      - ./${{ devfeature_user_setup.path }}$
      - ghcr.io/devcontainers-extra/features/apt-get-packages
      - ./${{ devfeature_pkg_setup.path }}$
    remoteEnv:
      # https://github.com/devcontainers/features/tree/main/src/docker-outside-of-docker#1-use-the-localworkspacefolder-as-environment-variable-in-your-code
      LOCAL_WORKSPACE_FOLDER: "${localWorkspaceFolder}"
    postCreateCommand:
      install_devcontainers_cli: [npm, install, -g, '@devcontainers/cli']
      pre_commit_install:
        - conda
        - run
        - --name
        - ${{ devcontainer_main.environment.pre_commit.name }}$
        - --live-stream
        - -vv
        - pre-commit
        - install
        - --install-hooks
        - --config
        - ${{ devcontainer_main.environment.pre_commit.file.pre_commit_config.path }}$
    customizations:
      vscode:
        extensions:
          - ms-python.python
          - ms-python.vscode-pylance
          - ms-python.debugpy
          - ms-toolsai.jupyter
          - ms-toolsai.jupyter-keymap
          - ms-toolsai.jupyter-renderers
          - ms-vscode.cpptools
          - ritwickdey.LiveServer
          - VisualStudioExptTeam.vscodeintellicode
          - ms-toolsai.vscode-jupyter-cell-tags
          - ms-toolsai.vscode-jupyter-slideshow
          - twxs.cmake
          - ms-vscode.cmake-tools
          - redhat.java
          - ms-azuretools.vscode-docker
          - dbaeumer.vscode-eslint
          - eamodio.gitlens
          - ms-vscode.cpptools-extension-pack
          - VisualStudioExptTeam.intellicode-api-usage-examples
          - formulahendry.code-runner
          - GitHub.copilot
          - GitHub.copilot-chat
          - GitHub.vscode-pull-request-github
          - ms-vscode-remote.remote-ssh-edit
          - ecmel.vscode-html-css
          - formulahendry.auto-rename-tag
          - redhat.vscode-yaml
          - MS-vsliveshare.vsliveshare
          - xabikos.JavaScriptSnippets
          - ms-vscode.remote-explorer
          - christian-kohler.path-intellisense
          - golang.Go
          - formulahendry.auto-close-tag
          - bmewburn.vscode-intelephense-client
          - streetsidesoftware.code-spell-checker
          - donjayamanne.githistory
          - KevinRose.vsc-python-indent
          - njpwerner.autodocstring
          - wholroyd.jinja
          - jeff-hykin.better-cpp-syntax
          - mechatroner.rainbow-csv
          - techer.open-in-browser
          - mhutchie.git-graph
          - yzhang.markdown-all-in-one
          - Zignd.html-css-class-completion
          - DavidAnson.vscode-markdownlint
          - aaron-bond.better-comments
          - naumovs.color-highlight
          - redhat.vscode-xml
          - tomoki1207.pdf
          - pranaygp.vscode-css-peek
          - shd101wyy.markdown-preview-enhanced
          - ms-vscode.makefile-tools
          - GitHub.codespaces
          - rust-lang.rust-analyzer
          - GitHub.remotehub
          - ms-vscode.remote-repositories
          - GitHub.vscode-github-actions
          - thekalinga.bootstrap4-vscode
          - ziyasal.vscode-open-in-github
          - ZainChen.json
          - kisstkondoros.vscode-gutter-preview
          - tamasfe.even-better-toml
          - shardulm94.trailing-spaces
          - quicktype.quicktype
          - yzane.markdown-pdf
          - bierner.markdown-mermaid
          - GraphQL.vscode-graphql
          - ms-python.pylint
          - bierner.github-markdown-preview
          - jock.svg
          - charliermarsh.ruff
          - ms-python.mypy-type-checker
          - graphql.vscode-graphql-syntax
          - James-Yu.latex-workshop
          - ExecutableBookProject.myst-highlight
        settings:
          github.copilot.chat.codeGeneration.instructions:
            - text: >-
                This dev container includes an up-to-date version of Git
                pre-installed and available on the `PATH`.
            - text: >-
                This dev container includes the conda and mamba package managers
                pre-installed and available on the `PATH`.
                Additional packages installed using Conda/Mamba will be downloaded
                from conda-forge or another repository configured by the user.
                A user can install different versions of Python
                than the one in this dev container by running a command like:
                `conda install python=3.13`
          jupyter.kernels.filter:
            - path: /opt/conda/bin/python
              type: pythonEnvironment
            - path: /opt/conda/envs/${{ __temp__.conda_env_name.app }}$/bin/python
              type: pythonEnvironment
          lldb.executable: /usr/bin/lldb
          python.defaultInterpreterPath: /opt/conda/envs/${{ __temp__.conda_env_name.app }}$/bin/python
          terminal.integrated.fontFamily: MesloLGS NF
          # The MesloLGS font is downloaded in the zsh installation script.
          # This is the recommended font for the Powerlevel10k Zsh theme.
          # Without it, the terminal icons may not render correctly.
          # - https://github.com/romkatv/powerlevel10k?tab=readme-ov-file#fonts
          # - https://github.com/romkatv/powerlevel10k/issues/671#issuecomment-621031981
          terminal.integrated.fontLigatures.enabled: true
          terminal.integrated.scrollback: 1000000
          tasks:
            version: 2.0.0
            tasks:
              - label: Build Paper (Final)
                type: process
                command: inara
                args: [ "-p", "-o", "pdf", "-v", "${file}" ]
                group:
                  kind: build
                  isDefault: true
                presentation:
                  reveal: always
                  echo: true
                  focus: true
                  panel: new
              - label: Build Paper (Draft)
                type: process
                command: inara
                args: [ "-o", "pdf,contextpdf,tex,preprint,docx,html,crossref,cff", "-vv", "${file}" ]
                group:
                  kind: build
                  isDefault: false
                presentation:
                  reveal: always
                  echo: true
                  focus: true
                  panel: new
  apt:
    apt-utils:
      summary: APT utilities for package management.
      group: required
      description: |
        Provides internal APT tools used by frontends like apt-get and
        aptitude. It enables progress reporting and other features.
        Recommended for interactive or scripted environments.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man8/apt-get.8.html
        package: https://packages.ubuntu.com/noble/apt-utils
        source: https://salsa.debian.org/apt-team/apt
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    autoconf:
      summary: Tool for generating configure scripts for building software.
      group: recommended
      description: |
        Autoconf is a tool for producing shell scripts that automatically
        configure software source code packages to adapt to many kinds of
        Unix-like systems. It is essential for building software from
        source that uses the GNU build system.
      url:
        docs: https://www.gnu.org/software/autoconf/manual/autoconf.html
        source: https://git.savannah.gnu.org/git/autoconf.git
    automake:
      summary: Tool for automatically generating Makefile.in files.
      group: recommended
      description: |
        Automake is a tool for automatically generating Makefile.in files
        compliant with the GNU Coding Standards. It is used in conjunction
        with Autoconf to create portable and configurable build systems.
      url:
        docs: https://www.gnu.org/software/automake/manual/automake.html
        source: https://git.savannah.gnu.org/git/automake.git
    bash-completion:
      summary: Programmable completion for the Bash shell.
      group: recommended
      description: |
        Adds intelligent tab-completion for Bash commands and arguments.
        Useful for interactive shell users.
      url:
        docs: https://github.com/scop/bash-completion
        package: https://packages.ubuntu.com/noble/bash-completion
        source: https://salsa.debian.org/debian/bash-completion
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    build-essential:
      summary: Meta-package for essential compilation tools on Ubuntu.
      group: required
      dependents: [ git ]
      description: |
        The 'build-essential' package is a meta-package that installs a
        collection of packages necessary for compiling software on Ubuntu.
        It includes the GNU Compiler Collection (gcc and g++), make, and
        other tools required for building Debian packages and compiling
        software from source. This package simplifies the setup of a
        development environment by ensuring all essential compilation tools
        are installed.
      url:
        docs: https://itsfoss.com/build-essential-ubuntu/
    bzip2:
      summary: High-quality data compressor.
      group: required
      description: |
        bzip2 is a freely available, patent-free, high-quality data
        compressor. It compresses files using the Burrows-Wheeler block
        sorting text compression algorithm and Huffman coding.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/bzip2.1.html
        source: https://sourceware.org/git/bzip2.git
    ca-certificates:
      summary: Common CA certificates for HTTPS and TLS validation.
      group: required
      description: |
        This package installs a set of trusted Certificate Authority (CA)
        certificates used by SSL/TLS applications to verify the authenticity
        of remote servers. It is essential for secure HTTPS communication,
        ensuring that tools like curl and wget can establish trusted
        connections. Without it, many secure operations would fail due to
        untrusted certificates.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/man8/update-ca-certificates.8.html
    clang:
      summary: C, C++, and Objective-C compiler based on LLVM.
      group: essential
      description: |
        Clang is a compiler for C, C++, and Objective-C languages,
        offering fast compilation and expressive diagnostics. It is part
        of the LLVM project and is designed to be highly compatible with
        GCC. Clang is essential for developers who require a modern,
        standards-compliant compiler with excellent tooling support.
      url:
        docs: https://clang.llvm.org/docs/
        package: https://packages.ubuntu.com/noble/clang
        source: https://github.com/llvm/llvm-project
    cmake:
      summary: Cross-platform build system generator.
      group: essential
      description: |
        CMake is a tool that manages the build process in an operating
        system and compiler-independent manner. It uses configuration
        files to generate native build environments, such as Makefiles
        or Visual Studio project files. CMake is essential for building
        complex software projects, especially those that are cross-platform.
      url:
        docs: https://cmake.org/documentation/
        package: https://packages.ubuntu.com/noble/cmake
        source: https://gitlab.kitware.com/cmake/cmake
    cppcheck:
      summary: Static analysis tool for C/C++ code.
      group: recommended
      description: |
        Cppcheck is a static analysis tool that detects bugs and
        stylistic issues in C/C++ code. It focuses on finding undefined
        behavior and dangerous coding constructs. Cppcheck is recommended
        for developers aiming to improve code quality and maintainability.
      url:
        docs: https://cppcheck.sourceforge.io/manual.pdf
        package: https://packages.ubuntu.com/noble/cppcheck
        source: https://github.com/danmar/cppcheck
    curl:
      summary: Command-line tool for transferring data with URL syntax.
      group: required
      description: |
        curl is a versatile tool for transferring data from or to a server,
        supporting various protocols including HTTP, HTTPS, FTP, and more.
        It's widely used in scripts and applications for downloading files,
        interacting with APIs, and testing endpoints. In a development
        environment, it's indispensable for tasks like fetching dependencies
        or testing web services.
      url:
        docs: https://curl.se/docs/
        source: https://github.com/curl/curl
    default-jre:
      summary: Standard Java Runtime Environment (OpenJDK 21).
      group: essential
      dependents: [ tex ]
      description: |
        This package serves as a metapackage that depends on the
        recommended Java Runtime Environment for Ubuntu, which is
        OpenJDK 21 in Noble. It's useful for running Java applications
        and is commonly required for Java-based development tools.
      url:
        docs: https://ubuntu.com/tutorials/install-jre
    default-libmysqlclient-dev:
      summary: MySQL database development files.
      group: recommended
      description: |
        This package provides the development files for the MySQL client
        library. It is used for compiling software that interacts with
        MySQL databases.
      url:
        docs: https://dev.mysql.com/doc/
        source: https://salsa.debian.org/mariadb-team/mysql-defaults
    dialog:
      summary: Display user-friendly dialog boxes from shell scripts.
      group: recommended
      description: |
        The 'dialog' package allows shell scripts to present
        interactive dialog boxes, such as menus, input boxes, and
        message boxes, in a terminal interface. It is useful for
        creating user-friendly command-line interfaces. While not
        essential, it is recommended for scripts that require user
        interaction.
      url:
        docs: https://invisible-island.net/dialog/dialog.html
        package: https://packages.ubuntu.com/noble/dialog
        source: https://salsa.debian.org/debian/dialog
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    dirmngr:
      summary: Network certificate management service for GnuPG.
      group: essential
      description: |
        Handles network operations for GnuPG, such as retrieving
        certificates and CRLs. Required for managing keys and verifying
        signatures from keyservers.
      url:
        docs: https://gnupg.org/documentation/manuals/gnupg/
        package: https://packages.ubuntu.com/noble/dirmngr
        source: https://dev.gnupg.org/source/dirmngr/
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    dpkg-dev:
      summary: Debian package development tools.
      group: essential
      description: |
        The dpkg-dev package contains the tools necessary to unpack,
        build, and upload Debian source packages. It includes programs
        like dpkg-source and dpkg-buildpackage.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/dpkg-buildpackage.1.html
        source: https://salsa.debian.org/dpkg-team/dpkg
    equivs:
      summary: Tool for creating custom Debian packages to manage dependencies.
      group: required
      dependents: [ tex ]
      description: |
        The 'equivs' package provides utilities to create minimal Debian
        packages, often containing only dependency information. This is
        particularly useful for creating metapackages that declare
        dependencies on other packages, facilitating the installation of
        custom package sets. It can also be employed to satisfy
        dependencies for packages not available in the repositories or
        to override existing package dependencies.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/equivs-build.1.html
        package: https://packages.ubuntu.com/noble/equivs
        source: https://salsa.debian.org/perl-team/modules/packages/equivs.git
      notes: |
        This is required for the TeX Live installation in the Dockerfile.
    file:
      summary: Determines file type using magic numbers.
      group: essential
      description: |
        The file command tests each argument in an attempt to classify it.
        It uses a magic number database to identify file types.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/file.1.html
        source: https://github.com/file/file
    fish:
      summary: User-friendly interactive Unix shell.
      group: optional
      description: |
        Fish (Friendly Interactive SHell) is a modern command-line shell
        focused on user experience and interactivity. It offers features
        like autosuggestions, syntax highlighting, and advanced tab
        completion out of the box. Unlike traditional shells, fish is not
        POSIX-compliant, which may affect compatibility with some scripts.
        It is optional and primarily used by users seeking an enhanced
        interactive shell experience.
      url:
        docs: https://fishshell.com/docs/current/
        source: https://github.com/fish-shell/fish-shell
      post_install: |
        # Setup Fish
        # - https://github.com/devcontainers/images/blob/0f13a9b8a31b9c81be78abfc404cc00748e946bb/src/universal/.devcontainer/Dockerfile#L85-L88
        FISH_PROMPT="function fish_prompt\n    set_color green\n    echo -n (whoami)\n    set_color normal\n    echo -n \":\"\n    set_color blue\n    echo -n (pwd)\n    set_color normal\n    echo -n \"> \"\nend\n";
        printf "$FISH_PROMPT" >> /etc/fish/functions/fish_prompt.fish;
        printf "if type code-insiders > /dev/null 2>&1; and not type code > /dev/null 2>&1\n  alias code=code-insiders\nend" >> /etc/fish/conf.d/code_alias.fish;
    fontconfig:
      summary: Font configuration and customization library.
      group: essential
      dependents: [ tex ]
      description: |
        Fontconfig is a library designed to provide system-wide font
        configuration, customization, and application access. It is
        essential for applications that require font discovery and
        configuration, especially in graphical environments.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man5/fonts-conf.5.html
    fonts-freefont-otf:
      summary: Free high-quality OpenType fonts covering the UCS character set.
      group: optional
      description: |
        The 'fonts-freefont-otf' package provides the GNU FreeFont
        collection, which includes FreeSerif, FreeSans, and FreeMono
        OpenType fonts. These fonts offer extensive coverage of the
        Unicode character set, supporting various scripts and symbols.
        While valuable for applications requiring broad Unicode support,
        this package is optional and primarily used in contexts where
        comprehensive font coverage is necessary.
      url:
        docs: https://www.gnu.org/software/freefont/
        package: https://packages.ubuntu.com/noble/fonts-freefont-otf
        source: https://savannah.gnu.org/projects/freefont/
      notes: |
        Included in the [Sphinx Docker image](https://github.com/sphinx-doc/sphinx-docker-images/blob/master/latexpdf/Dockerfile).
    g++:
      summary: GNU C++ compiler.
      group: required
      description: |
        g++ is the GNU C++ compiler, part of the GNU Compiler Collection
        (GCC). It is used to compile C++ programs.
      url:
        docs: https://gcc.gnu.org/onlinedocs/gcc/
        source: https://gcc.gnu.org/git.html
    gcc:
      summary: GNU C compiler.
      group: required
      description: |
        gcc is the GNU C compiler, part of the GNU Compiler Collection
        (GCC). It is used to compile C programs.
      url:
        docs: https://gcc.gnu.org/onlinedocs/gcc/
        source: https://gcc.gnu.org/git.html
    gdb:
      summary: GNU Debugger for debugging applications.
      group: essential
      description: |
        GDB is the GNU Project debugger, allowing developers to see what
        is happening inside a program while it executes or what it was
        doing at the moment it crashed. It supports various programming
        languages, including C, C++, and Fortran. GDB is essential for
        debugging applications and analyzing program behavior.
      url:
        docs: https://sourceware.org/gdb/documentation/
        package: https://packages.ubuntu.com/noble/gdb
        source: https://sourceware.org/git/binutils-gdb.git
    gettext:
      summary: GNU Internationalization utilities.
      group: essential
      dependents: [ git ]
      description: |
        gettext provides a set of tools and libraries for internationalizing
        and localizing software. It enables programs to be translated into
        different languages, facilitating global software distribution.
        This package is essential for developing applications that support
        multiple languages and locales.
      url:
        docs: https://www.gnu.org/software/gettext/manual/
        package: https://packages.ubuntu.com/noble/gettext
        source: https://git.savannah.gnu.org/git/gettext.git
    ghostscript:
      summary: Interpreter for PostScript and PDF formats.
      group: recommended
      dependents: [ tex ]
      description: |
        Ghostscript is a versatile processor for PostScript and PDF files,
        enabling rendering, conversion, and printing tasks. It serves as a
        backend for applications like ghostview and is capable of displaying
        documents in X11 environments. Additionally, it can render files for
        printing on non-PostScript printers, supporting various printer models.
        While not essential for all development environments, it's recommended
        for projects involving document processing or printing functionalities.
      url:
        docs: https://www.ghostscript.com/doc/current/
        package: https://packages.ubuntu.com/noble/ghostscript
        source: https://github.com/ArtifexSoftware/ghostpdl
      notes: |
        Required for eps conversion (see [Island of Tex Dockerfile](https://gitlab.com/islandoftex/images/texlive/-/blob/72240db12e00510972aeea19cd0a08edc22c4152/Dockerfile.base#L26)).
    gnupg:
      summary: GNU Privacy Guard - encryption and signing tool.
      group: required
      description: |
        GnuPG is a complete and free implementation of the OpenPGP standard,
        allowing for encryption and signing of data and communications.
        It's crucial for verifying the integrity of downloaded packages
        and repositories, especially when adding third-party sources
        or installing software from external sources.
      url:
        docs: https://gnupg.org/documentation/index.html
    gnuplot-nox:
      summary: Command-line driven interactive plotting program.
      group: recommended
      dependents: [ tex ]
      description: |
        gnuplot-nox is a terminal-based variant of the gnuplot utility,
        designed for environments without an X server. It enables the
        creation of 2D and 3D plots, supporting various output formats
        such as PostScript, PDF, PNG, and SVG. This version excludes
        graphical interfaces like X11 or Qt, making it suitable for
        headless systems or automated workflows. It's particularly
        beneficial in development environments where graphical output
        isn't required, and plotting needs to be integrated into scripts
        or pipelines.
      url:
        docs: https://gnuplot.info/documentation.html
        package: https://packages.ubuntu.com/noble/gnuplot-nox
        source: https://launchpad.net/ubuntu/noble/+source/gnuplot
      notes: |
        Required for 'gnuplot' backend of 'pgfplots' in TeX (see [Island of Tex Dockerfile](https://gitlab.com/islandoftex/images/texlive/-/blob/72240db12e00510972aeea19cd0a08edc22c4152/Dockerfile.base#L32)).
    gpg:
      summary: OpenPGP encryption and signing tool.
      group: required
      dependents: [ tex ]
      description: |
        GnuPG (GPG) is a complete and free implementation of the OpenPGP
        standard, providing encryption and signing services for data and
        communications. It features comprehensive key management and
        supports modern encryption algorithms. GPG is essential for secure
        communications, verifying software signatures, and managing
        cryptographic keys in development environments.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/gpg.1.html
        source: https://github.com/gpg/gnupg
    gpg-agent:
      summary: Daemon for managing private keys and passphrase caching.
      group: required
      dependents: [ tex ]
      description: |
        gpg-agent is a background process that manages private keys and
        caches passphrases for GnuPG. It operates independently of any
        protocol and is used as a backend for gpg and other utilities. The
        agent is automatically started on demand by GnuPG components,
        eliminating the need for manual initiation. It also supports SSH
        authentication, allowing it to act as an SSH agent.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/gpg-agent.1.html
        source: https://github.com/gpg/gnupg
    graphviz:
      summary: Graph visualization software.
      group: recommended
      description: |
        Graphviz is a powerful tool for creating visual
        representations of abstract graphs and networks. It
        automatically generates diagrams from textual descriptions
        using the DOT language. This is particularly useful for
        developers and researchers who need to visualize data
        structures, workflows, or relationships. While not essential
        for all development environments, it is recommended for
        those requiring graphical representations of complex
        systems.
      url:
        docs: https://graphviz.org/documentation/
        package: https://packages.ubuntu.com/noble/graphviz
        source: https://gitlab.com/graphviz/graphviz
      notes: |
        Included in the [Sphinx Docker image](https://github.com/sphinx-doc/sphinx-docker-images/blob/master/latexpdf/Dockerfile).
    htop:
      summary: Interactive process viewer for Unix systems.
      group: recommended
      description: |
        htop is an interactive process viewer that provides a
        real-time, colorized display of system processes. It
        allows users to scroll through the process list
        vertically and horizontally, and to perform actions
        such as killing or renicing processes without entering
        their PIDs. While not essential, it is recommended for
        users who require a more user-friendly alternative to
        the traditional 'top' command.
      url:
        docs: https://htop.dev/
        package: https://packages.ubuntu.com/noble/htop
        source: https://github.com/htop-dev/htop
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    imagemagick:
      summary: Image manipulation tools.
      group: recommended
      description: |
        ImageMagick is a software suite to create, edit, compose, or
        convert bitmap images. It can read and write images in a variety
        of formats.
      url:
        docs: https://imagemagick.org/script/resources.php
        package: https://packages.ubuntu.com/noble/imagemagick
        source: https://github.com/ImageMagick/ImageMagick
      notes: |
        Included in the [Sphinx Docker image](https://github.com/sphinx-doc/sphinx-docker-images/blob/master/latexpdf/Dockerfile).
    init-system-helpers:
      summary: Tools for managing compatibility across init systems.
      group: essential
      description: |
        Provides key scripts (`service`, `invoke-rc.d`, etc.) used by
        Debian-based systems to manage services and maintain
        compatibility across different init systems (systemd, SysV,
        etc.). Essential for correct package installation and service
        handling during boot and runtime.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man8/service.8.html
        package: https://packages.ubuntu.com/noble/init-system-helpers
        source: https://salsa.debian.org/debian/init-system-helpers
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    inotify-tools:
      summary: Command-line utilities for inotify.
      group: recommended
      description: |
        inotify-tools provides command-line programs for using inotify,
        a Linux kernel subsystem that monitors file system events. Tools
        like inotifywait and inotifywatch allow scripts and applications
        to respond to file changes in real-time. This package is recommended
        for automating tasks that depend on file system events.
      url:
        docs: https://github.com/inotify-tools/inotify-tools
        package: https://packages.ubuntu.com/noble/inotify-tools
        source: https://github.com/inotify-tools/inotify-tools
    iproute2:
      summary: Networking and traffic control utilities.
      group: required
      description: |
        Provides tools like 'ip' and 'tc' for configuring network
        interfaces and managing routing. Essential for network setup and
        diagnostics.
      url:
        docs: https://man7.org/linux/man-pages/man8/ip.8.html
        package: https://packages.ubuntu.com/noble/iproute2
        source: https://git.kernel.org/pub/scm/network/iproute2/iproute2.git
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    jq:
      summary: Command-line JSON processor.
      group: required
      description: |
        jq is a lightweight and flexible command-line tool for processing
        JSON data. It allows for parsing, filtering, mapping, and
        transforming structured JSON input, making it invaluable for
        developers and system administrators working with APIs, logs, or
        configuration files. jq's powerful query language enables complex
        data manipulations directly from the command line. It is essential
        in environments where JSON data handling is a routine task.
      url:
        docs: https://stedolan.github.io/jq/manual/
        package: https://packages.ubuntu.com/noble/jq
        source: https://github.com/stedolan/jq
    less:
      summary: Terminal pager for viewing text one screen at a time.
      group: essential
      description: |
        The 'less' command is a terminal pager that allows users to
        view the contents of text files one screen at a time. Unlike
        traditional text editors, 'less' does not load the entire file
        into memory, making it efficient for viewing large files. It
        supports both forward and backward navigation, search
        functionality, and various display options. 'less' is commonly
        used in conjunction with other commands to paginate output,
        making it an essential tool for command-line environments.
      url:
        docs: https://man7.org/linux/man-pages/man1/less.1.html
        package: https://packages.ubuntu.com/noble/less
        source: https://github.com/gwsw/less
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libatk-bridge2.0-0:
      summary: AT-SPI 2 toolkit bridge.
      group: recommended
      description: |
        libatk-bridge2.0-0 provides a bridge between ATK (Accessibility Toolkit)
        and the Assistive Technology Service Provider Interface (AT-SPI).
        It enables accessibility tools to interact with applications using the ATK framework.
        This package is required for accessibility support in GTK applications.
      url:
        docs: https://wiki.gnome.org/Accessibility
        package: https://packages.ubuntu.com/noble/libatk-bridge2.0-0
        source: https://gitlab.gnome.org/GNOME/at-spi2-atk
    libatk1.0-0:
      summary: ATK accessibility toolkit.
      group: recommended
      description: |
        libatk1.0-0 provides the ATK (Accessibility Toolkit) library,
        which offers a set of interfaces for accessibility.
        It allows assistive technologies to interact with applications.
        This package is required for applications that support accessibility features.
      url:
        docs: https://developer.gnome.org/atk/
        package: https://packages.ubuntu.com/noble/libatk1.0-0
        source: https://gitlab.gnome.org/GNOME/atk
    libbz2-dev:
      summary: Development files for the bzip2 compression library.
      group: essential
      description: |
        This package provides the headers and static libraries for the
        bzip2 compression library, which implements the Burrows-Wheeler
        block-sorting text compression algorithm. It's essential for
        compiling software that uses bzip2 compression, commonly found in
        source archives and data processing tools.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man3/bzlib.3.html
        package: https://packages.ubuntu.com/noble/libbz2-dev
        source: https://sourceware.org/git/bzip2.git
    libc6:
      summary: GNU C Library Shared libraries.
      group: required
      description: |
        The 'libc6' package provides the standard C library, a core
        component of the GNU system and the GNU/Linux systems. It defines
        the system calls and other basic functions necessary for building
        and running C programs. This package is fundamental to the
        operation of the system and is required for the execution of
        virtually all programs.
      url:
        docs: https://www.gnu.org/software/libc/manual/
        source: https://sourceware.org/git/glibc.git
    libc6-dev:
      summary: Development files for the GNU C Library.
      group: required
      description: |
        This package contains the headers and object files necessary for
        compiling and linking programs that use the standard C library.
        It's a fundamental component for building C programs and is
        required for most development environments.
      url:
        docs: https://www.gnu.org/software/libc/manual/
        source: https://sourceware.org/git/glibc.git
    libcups2:
      summary: Common UNIX Printing System library.
      group: recommended
      description: |
        libcups2 provides the core printing functionality for Unix-like
        systems, enabling applications to print documents via the CUPS
        printing system. While not essential for most development
        environments, it is recommended for applications that require
        printing capabilities.
      url:
        docs: https://www.cups.org/doc/
        package: https://packages.ubuntu.com/noble/libcups2
        source: https://github.com/OpenPrinting/cups
    libcurl4-openssl-dev:
      summary: Development files for libcurl with OpenSSL support.
      group: essential
      dependents: [ git ]
      description: |
        This package provides the development files for libcurl compiled
        with OpenSSL support. libcurl is a client-side URL transfer
        library supporting various protocols, including HTTP, HTTPS, FTP,
        and more. It's widely used in applications that require data
        transfer capabilities.
      url:
        docs: https://curl.se/libcurl/
        package: https://packages.ubuntu.com/noble/libcurl4-openssl-dev
        source: https://github.com/curl/curl
    libcurl4t64:
      summary: OpenSSL-based client-side URL transfer library for Ubuntu Noble.
      group: required
      dependents: [ tex ]
      description: |
        libcurl4t64 is the OpenSSL-flavored variant of libcurl provided in
        Ubuntu 24.04 (Noble). It supports a wide array of protocols,
        including HTTP, HTTPS, FTP, FTPS, SCP, SFTP, LDAP, and more. This
        package is part of the transition to the t64 ABI, ensuring
        compatibility with 64-bit time_t, which is crucial for applications
        that handle dates beyond 2038. It replaces the older libcurl4
        package and is essential for network-enabled applications,
        development tools, and build processes that rely on libcurl for
        data transfer capabilities.
      url:
        docs: https://curl.se/libcurl/
        source: https://github.com/curl/curl
    libdb-dev:
      summary: Development files for the Berkeley DB library.
      group: optional
      description: |
        This package provides the headers and static libraries for the
        Berkeley DB library, a high-performance embedded database library.
        It's used in applications that require a lightweight database
        engine. Its inclusion depends on specific project requirements.
      url:
        docs: https://www.oracle.com/database/technologies/related/berkeleydb.html
        source: https://github.com/berkeleydb/libdb
    libdigest-perl-md5-perl:
      summary: Pure Perl implementation of the MD5 algorithm.
      group: recommended
      dependents: [ tex ]
      description: |
        This package provides a Perl-only implementation of the MD5
        hashing algorithm. It serves as a fallback when the faster
        Digest::MD5 module, which relies on compiled C code, is
        unavailable. It's primarily useful in environments lacking a
        C compiler or where installing compiled modules is not feasible.
      url:
        docs: https://metacpan.org/pod/Digest::Perl::MD5
        package: https://packages.ubuntu.com/noble/libdigest-perl-md5-perl
        source: https://github.com/mschilli/digest-perl-md5
    libevent-dev:
      summary: Development files for the libevent library.
      group: recommended
      description: |
        This package provides the headers and static libraries for
        libevent, an asynchronous event notification library.
        It's useful for developing networked applications
        that require high performance and scalability.
      url:
        docs: https://libevent.org/
        source: https://github.com/libevent/libevent
    libexpat1-dev:
      summary: Development files for the Expat XML parser library.
      group: required
      dependents: [ git ]
      description: |
        The 'libexpat1-dev' package provides the header files and
        development libraries for Expat, a fast, stream-oriented XML
        parser written in C. It enables developers to build
        applications that parse XML documents efficiently by
        registering handlers that are called when the parser
        encounters specific structures in the XML. This package is
        essential for compiling software that depends on Expat for
        XML parsing functionality.
      url:
        docs: https://libexpat.github.io/
        package: https://packages.ubuntu.com/noble/libexpat1-dev
        source: https://launchpad.net/ubuntu/noble/+source/expat
    libffi-dev:
      summary: Development files for the Foreign Function Interface library.
      group: essential
      description: |
        This package provides the headers and static libraries for libffi,
        which allows code written in one language to call code written in
        another language. It's commonly used in dynamic language
        interpreters and is essential for building such environments.
      url:
        docs: https://sourceware.org/libffi/
        source: https://github.com/libffi/libffi
    libfile-homedir-perl:
      summary: Perl module for locating user directories across platforms.
      group: essential
      dependents: [ tex ]
      description: |
        This package provides the File::HomeDir Perl module, which offers
        a cross-platform method to locate user directories such as home,
        desktop, and documents. It's useful for Perl applications that
        need to interact with user-specific directories in a
        platform-independent manner.
      url:
        docs: https://metacpan.org/pod/File::HomeDir
        source: https://salsa.debian.org/perl-team/modules/packages/libfile-homedir-perl.git
      notes: |
        Required for `latexindent` (see [Island of Tex Dockerfile](https://gitlab.com/islandoftex/images/texlive/-/blob/72240db12e00510972aeea19cd0a08edc22c4152/Dockerfile.base#L24))
    libgbm1:
      summary: Generic Buffer Management API.
      group: recommended
      description: |
        libgbm1 provides an abstraction for graphics buffer management,
        facilitating efficient rendering operations. It is recommended
        for applications that perform off-screen rendering or require
        direct rendering capabilities.
      url:
        docs: https://docs.mesa3d.org/gbm.html
        package: https://packages.ubuntu.com/noble/libgbm1
        source: https://gitlab.freedesktop.org/mesa/mesa
    libgcc1:
      summary: GCC support library.
      group: required
      description: |
        The 'libgcc1' package contains GCC's internal support library,
        which provides low-level routines used by the compiler. These
        routines are necessary for the proper functioning of programs
        compiled with GCC, especially for exception handling and other
        runtime support. This package is essential for the execution of
        programs compiled with GCC.
      url:
        docs: https://gcc.gnu.org/onlinedocs/
        source: https://gcc.gnu.org/git/gcc.git
    libgdbm6t64:
      summary: GNU dbm database library with 64-bit time_t support.
      group: required
      description: |
        The 'libgdbm6t64' package provides the GNU dbm (GDBM) database
        library, compiled with 64-bit time_t support to accommodate the
        time_t transition in Ubuntu 24.04 (Noble Numbat). This library
        offers a simple database engine for storing key-value pairs,
        commonly used by various applications and programming languages
        for persistent storage. The 't64' variant ensures compatibility
        with systems and applications that utilize 64-bit time
        representations, making it a required component in the Ubuntu
        Noble environment.
      url:
        docs: https://www.gnu.org.ua/software/gdbm/manual/
        package: https://packages.ubuntu.com/noble/libgdbm6t64
        source: https://git.savannah.gnu.org/git/gdbm.git
      notes: |
        Recommended by `zsh` and included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libgdbm-dev:
      summary: Development files for the GNU dbm database library.
      group: optional
      description: |
        This package provides the headers and static libraries for the GNU
        dbm (gdbm) database library, which offers a simple database engine
        using extendible hashing. It's used in applications that require
        simple key-value storage.
      url:
        docs: https://www.gnu.org/software/gdbm/
        source: https://git.savannah.gnu.org/git/gdbm.git
    libgdiplus:
      summary: Open-source implementation of the GDI+ API for Unix-like systems.
      group: recommended
      description: |
        libgdiplus is a Mono library that provides a GDI+-compatible API on
        non-Windows operating systems. It enables applications developed
        with .NET's System.Drawing namespace to function on Unix-like
        systems by leveraging the Cairo graphics library for rendering.
        This package is particularly useful for cross-platform .NET
        applications that require graphical capabilities. While not
        essential for all development environments, it is recommended for
        projects involving Mono or cross-platform graphical applications.
      url:
        docs: https://www.mono-project.com/docs/gui/libgdiplus/
        source: https://github.com/mono/libgdiplus
      notes: |
        Included in the dev container [universal image](https://github.com/devcontainers/images/blob/main/src/universal/.devcontainer/Dockerfile).
    libgetopt-long-descriptive-perl:
      summary: Perl module for command-line option parsing with usage text.
      group: essential
      dependents: [ tex ]
      description: |
        This Perl module provides a wrapper for Getopt::Long, allowing
        for easy definition of options and automatic generation of usage
        messages. It's useful for Perl scripts that require complex
        command-line option parsing with descriptive help text.
      url:
        docs: https://metacpan.org/pod/Getopt::Long::Descriptive
        source: https://github.com/deepin-community/libgetopt-long-descriptive-perl
    libglib2.0-dev:
      summary: Development files for the GLib library.
      group: essential
      description: |
        This package provides the headers and static libraries for GLib,
        a low-level core library that forms the basis for projects such
        as GTK+ and GNOME. It provides data structure handling, portability
        wrappers, and interfaces for such runtime functionality as an event
        loop, threads, dynamic loading, and an object system.
      url:
        docs: https://developer.gnome.org/glib/
        source: https://gitlab.gnome.org/GNOME/glib
    libglut3.12:
      summary: OpenGL Utility Toolkit for rendering graphical interfaces.
      group: recommended
      dependents: [ tex ]
      post_install: |
        LIBDIR="$(find /usr/lib -maxdepth 1 -type d -name '*-linux-*' | grep -v '/config-' | head -n1)";
        ln -sf "${LIBDIR}/libglut.so.3.12" "${LIBDIR}/libglut.so.3";
      description: |
        libglut3.12 provides the OpenGL Utility Toolkit (GLUT) library,
        facilitating the development of OpenGL applications by handling
        windowing, input, and other tasks. In Ubuntu 24.04 (Noble), this
        package replaces the older freeglut3, offering version 3.4.0.
        Notably, it installs shared libraries like libglut.so.3.12 and
        libglut.so.3.12.0, but omits the legacy symlink libglut.so.3,
        which some applications may expect. To address this, users can
        manually create the symlink or install the libglut-dev package,
        which provides the necessary development files and symlinks.
      url:
        docs: https://freeglut.sourceforge.net
      notes: |
        Required for `asymptote` in TeX (see [Island of Tex Dockerfile](https://gitlab.com/islandoftex/images/texlive/-/blob/72240db12e00510972aeea19cd0a08edc22c4152/Dockerfile.base#L34)).
        The post processing creates a symlink to `libglut.so.3`,
        which other packages may expect. This is a workaround for the
        missing symlink in the libglut3.12 package (cf.
        [Island of Tex Dockerfile](https://gitlab.com/islandoftex/images/texlive/-/blob/72240db12e00510972aeea19cd0a08edc22c4152/Dockerfile.base#L39-42)
        and [ask-ubuntu](https://askubuntu.com/questions/1526992/is-there-a-reason-24-04-lts-noble-numbat-does-not-provide-libglut-so-3)
        ).
    libgmp-dev:
      summary: Development files for the GNU Multiple Precision Arithmetic Library.
      group: recommended
      description: |
        This package provides the headers and static libraries for GMP,
        a library for arbitrary-precision arithmetic, operating on signed
        integers, rational numbers, and floating-point numbers. It's used
        in applications that require high-precision arithmetic operations.
      url:
        docs: https://gmplib.org/manual/
        source: https://gmplib.org/repo/gmp/
    libgssapi-krb5-2:
      summary: MIT Kerberos runtime libraries - GSSAPI support.
      group: essential
      description: |
        The 'libgssapi-krb5-2' package provides the GSSAPI (Generic
        Security Services Application Program Interface) support library
        for the MIT Kerberos implementation. It is used by applications
        that require Kerberos authentication, such as SSH and other secure
        communication tools. This package is essential for environments
        that utilize Kerberos for authentication.
      url:
        docs: https://web.mit.edu/kerberos/krb5-1.20/doc/
        source: https://github.com/krb5/krb5
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libgtk-3-0:
      summary: GTK+ graphical user interface library.
      group: recommended
      description: |
        libgtk-3-0 is the GTK+ 3 GUI toolkit used for creating graphical
        user interfaces. It is recommended for applications that require
        a graphical interface but is not essential for headless or
        command-line environments.
      url:
        docs: https://docs.gtk.org/gtk3/
        package: https://packages.ubuntu.com/noble/libgtk-3-0
        source: https://gitlab.gnome.org/GNOME/gtk
    libicu:
      summary: International Components for Unicode library.
      group: required
      spec:
        name: libicu[0-9][0-9]
      description: |
        The 'libicu72' package provides the International Components
        for Unicode (ICU) libraries, which offer robust and full-featured
        Unicode services. These services include character set conversions,
        collation, date/time formatting, and more. It is essential for
        applications that require comprehensive Unicode support, such as
        internationalized software and platforms like .NET and R.
      url:
        docs: https://icu.unicode.org/
        package: https://packages.ubuntu.com/noble/libicu72
        source: https://github.com/unicode-org/icu
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libjpeg-dev:
      summary: Development files for the JPEG image compression library.
      group: essential
      description: |
        This package provides the headers and static libraries for the
        JPEG image compression library. It's essential for developing
        applications that handle JPEG image encoding and decoding.
      url:
        docs: https://libjpeg.sourceforge.io/
        source: https://github.com/libjpeg-turbo/libjpeg-turbo
    libkrb5-3:
      summary: MIT Kerberos runtime libraries.
      group: required
      description: |
        The 'libkrb5-3' package provides the core runtime libraries for
        the MIT Kerberos 5 authentication system. It is essential for
        applications and services that require secure authentication
        mechanisms, such as SSH, NFS, and various enterprise-level
        services. In Ubuntu Noble, it ensures compatibility with the
        64-bit time_t transition, making it a required component for
        systems and applications that depend on Kerberos functionality.
      url:
        docs: https://web.mit.edu/kerberos/krb5-1.20/
        package: https://packages.ubuntu.com/noble/libkrb5-3
        source: https://gitlab.com/ubuntu/krb5
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libkrb5-dev:
      summary: Development files for MIT Kerberos authentication system.
      group: recommended
      description: |
        This package provides the headers and static libraries for the MIT
        implementation of Kerberos, a network authentication protocol. It's
        recommended for developing applications that require secure
        authentication mechanisms.
      url:
        docs: https://web.mit.edu/kerberos/krb5-1.20/
        source: https://github.com/krb5/krb5
    liblzma-dev:
      summary: Development files for the LZMA compression library.
      group: essential
      description: |
        This package provides the headers and static libraries for the
        LZMA compression library, used for high-ratio data compression.
        It's essential for developing applications that handle .xz
        compressed files.
      url:
        docs: https://tukaani.org/xz/
    liblttng-ust:
      summary: LTTng Userspace Tracer library.
      group: optional
      spec:
        name: liblttng-ust[0-9]
      description: |
        The 'liblttng-ust1' package provides the LTTng Userspace Tracer
        library, enabling low-overhead tracing of user-space applications.
        It allows developers to instrument applications for performance
        analysis and debugging by emitting tracepoints. While not essential
        for all development environments, it is recommended for those
        requiring detailed tracing capabilities.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man3/lttng-ust.3.html
        package: https://packages.ubuntu.com/noble/liblttng-ust1
        source: https://git.lttng.org/?p=lttng-ust.git
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libmagickcore-dev:
      summary: Development files for ImageMagick's core libraries.
      group: recommended
      description: |
        This package provides the headers and static libraries for
        ImageMagick's core functionalities, such as image processing and
        manipulation. It's recommended for developing applications that
        require direct access to ImageMagick's core features.
      url:
        docs: https://imagemagick.org/script/resources.php
        source: https://github.com/ImageMagick/ImageMagick
    libmagickwand-dev:
      summary: Development files for ImageMagick's MagickWand API.
      group: recommended
      description: |
        This package provides the headers and static libraries for
        ImageMagick's MagickWand API, a C API for image processing. It's
        recommended for developing applications that utilize ImageMagick's
        functionalities through the MagickWand interface.
      url:
        docs: https://imagemagick.org/script/magick-wand.php
        source: https://github.com/ImageMagick/ImageMagick
    libmaxminddb-dev:
      summary: Development files for the MaxMind DB library.
      group: optional
      description: |
        This package provides the headers and static libraries for the
        MaxMind DB library, used for IP geolocation. It's optional and
        primarily used in applications that require geolocation features.
      url:
        docs: https://dev.maxmind.com/geoip/docs/
        source: https://github.com/maxmind/libmaxminddb
    libncurses5-dev:
      summary: Development files for the ncurses library (version 5).
      group: essential
      description: |
        This package provides the headers and static libraries for the
        ncurses library version 5, used for text-based user interfaces in
        a terminal. It's essential for developing terminal-based
        applications.
      url:
        docs: https://invisible-island.net/ncurses/
        source: https://invisible-island.net/datafiles/release/ncurses.tar.gz
    libncurses6:
      summary: Shared libraries for terminal handling.
      group: essential
      dependents: [ tex ]
      description: |
        This package contains the shared libraries necessary for programs
        that use the ncurses library to manage terminal interfaces. It
        provides a terminal-independent method of updating character
        screens with reasonable optimization. It's essential for running
        applications that rely on terminal-based user interfaces.
      url:
        docs: https://invisible-island.net/ncurses/
        source: https://invisible-island.net/datafiles/release/ncurses.tar.gz
    libncursesw6:
      summary: Terminal handling library with wide character support.
      group: required
      description: |
        The 'libncursesw6' package provides the ncurses library
        routines, offering a terminal-independent method of updating
        character screens with reasonable optimization. This version
        includes support for wide characters, enabling applications to
        handle internationalized text and Unicode characters. It is
        essential for programs that require advanced terminal handling
        capabilities, such as text editors, interface tools, and
        console-based applications.
      url:
        docs: https://invisible-island.net/ncurses/man/ncurses.3x.html
        package: https://packages.ubuntu.com/noble/libncursesw6
        source: https://invisible-island.net/ncurses/
      notes: |
        Recommended by `zsh` and included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libncursesw5-dev:
      summary: Development files for the wide-character ncurses library.
      group: essential
      description: |
        This package provides the headers and static libraries for the
        wide-character version of the ncurses library, supporting
        internationalization. It's essential for developing terminal-based
        applications that require wide-character support.
      url:
        docs: https://invisible-island.net/ncurses/
        source: https://invisible-island.net/datafiles/release/ncurses.tar.gz
    libnspr4:
      summary: Netscape Portable Runtime library.
      group: recommended
      description: |
        libnspr4 provides a platform-neutral API
        for system-level and libc-like functions.
        It is used by the Network Security Services (NSS) libraries
        and other applications.
        This package is required for applications that depend on NSPR for portability.
      url:
        docs: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSPR
        package: https://packages.ubuntu.com/noble/libnspr4
        source: https://hg.mozilla.org/projects/nspr
    libnss3:
      summary: Network Security Services library.
      group: recommended
      description: |
        libnss3 provides a set of libraries designed
        to support cross-platform development
        of security-enabled client and server applications.
        It supports SSL, TLS, and other security standards.
        This package is required for applications that perform secure network communications.
      url:
        docs: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS
        package: https://packages.ubuntu.com/noble/libnss3
        source: https://hg.mozilla.org/projects/nss
    libpango-1.0-0:
      summary: Layout and rendering of internationalized text.
      group: recommended
      description: |
        libpango-1.0-0 provides facilities for layout and rendering of
        text, with an emphasis on internationalization. It is recommended
        for applications that need to display text in multiple languages
        and scripts.
      url:
        docs: https://developer.gnome.org/pango/
        package: https://packages.ubuntu.com/noble/libpango-1.0-0
        source: https://gitlab.gnome.org/GNOME/pango
    libpangocairo-1.0-0:
      summary: Pango library with Cairo backend.
      group: recommended
      description: |
        libpangocairo-1.0-0 provides the Pango library with a Cairo backend,
        enabling high-quality text rendering.
        It is used for laying out and rendering text in various scripts and languages.
        This package is required for applications that need advanced text layout and rendering.
      url:
        docs: https://developer.gnome.org/pango/
        package: https://packages.ubuntu.com/noble/libpangocairo-1.0-0
        source: https://gitlab.gnome.org/GNOME/pango
    libpcre2-8-0:
      summary: PCRE2 regular expression library (8-bit)
      group: required
      description: |
        The 'libpcre2-8-0' package provides the 8-bit runtime library
        for PCRE2 (Perl Compatible Regular Expressions, version 2),
        which offers functions to support regular expressions with
        syntax and semantics similar to Perl 5. This library is
        essential for applications that require pattern matching
        capabilities, such as text processing tools and programming
        languages. In Ubuntu Noble (24.04), 'libpcre2-8-0' is the
        preferred library over the older 'pcre3' library.
      url:
        docs: https://pcre.org/current/doc/html/
        package: https://packages.ubuntu.com/noble/libpcre2-8-0
        source: https://launchpad.net/ubuntu/+source/pcre2
      notes: |
        Recommended by `zsh` and included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libpcre2-dev:
      summary: Development files for PCRE2 – Perl-compatible regular expressions.
      group: required
      dependents: [ git ]
      description: |
        The 'libpcre2-dev' package provides the development files for
        PCRE2 (Perl Compatible Regular Expressions, version 2), a
        library of functions that implement regular expression pattern
        matching using the same syntax and semantics as Perl 5. This
        package includes header files, static libraries, and
        documentation necessary for compiling applications that use
        PCRE2. It is essential for developers who need to build
        software with advanced regular expression capabilities.
      url:
        docs: https://pcre.org/current/doc/html/
        package: https://packages.ubuntu.com/noble/libpcre2-dev
        source: https://launchpad.net/ubuntu/noble/+source/pcre2
    libpcre2-posix3:
      summary: PCRE2 POSIX-compatible regular expression runtime library.
      group: essential
      dependents: [ git ]
      description: |
        The 'libpcre2-posix3' package provides a POSIX-compatible API
        for the PCRE2 (Perl Compatible Regular Expressions) library.
        It allows applications to utilize regular expressions with
        syntax and semantics similar to Perl 5, through a POSIX-style
        interface. This package is particularly useful for software
        that relies on POSIX regex functions but benefits from the
        enhanced capabilities of PCRE2. It is recommended for
        applications requiring POSIX-compatible regular expression
        support.
      url:
        docs: https://pcre.org/current/doc/html/
        package: https://packages.ubuntu.com/noble/libpcre2-posix3
        source: https://github.com/PhilipHazel/pcre2
      notes: |
        Included in the [`git`](https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/git/install.sh#L257C24-L257C39) feature.
    libpng-dev:
      summary: Development files for the PNG image format library.
      group: essential
      description: |
        This package provides the headers and static libraries for the
        libpng library, used for handling PNG image files. It's essential
        for developing applications that read or write PNG images.
      url:
        docs: http://www.libpng.org/pub/png/libpng.html
        source: https://github.com/glennrp/libpng
    libpq-dev:
      summary: Development files for PostgreSQL client library.
      group: essential
      description: |
        This package provides the headers and static libraries for the
        PostgreSQL client library, used for connecting to PostgreSQL
        databases. It's essential for developing applications that
        interact with PostgreSQL.
      url:
        docs: https://www.postgresql.org/docs/current/libpq.html
        source: https://git.postgresql.org/gitweb/?p=postgresql.git
    libreadline-dev:
      summary: Development files for the GNU readline and history libraries.
      group: essential
      description: |
        This package provides the headers and static libraries for the GNU
        readline and history libraries, which facilitate command-line editing
        and history capabilities. It's essential for developing interactive
        command-line applications that require consistent user interfaces.
      url:
        docs: https://tiswww.case.edu/php/chet/readline/readline.html
        source: https://git.savannah.gnu.org/git/readline.git
    libsecret-1-dev:
      summary: Development files for libsecret, GNOME's secret storage library.
      group: essential
      description: |
        This package provides headers and development files for libsecret,
        which implements the Secret Service API for storing and retrieving
        sensitive data like passwords. It's commonly used in applications
        that integrate with GNOME Keyring or other compatible key storage.
        Essential for building secure apps that handle credentials.
      url:
        docs: https://developer.gnome.org/libsecret/
        package: https://packages.ubuntu.com/noble/libsecret-1-dev
        source: https://gitlab.gnome.org/GNOME/libsecret
    libsm6:
      summary: X11 Session Management library.
      group: essential
      dependents: [ tex ]
      description: |
        libsm6 provides the main interface to the X11 Session Management
        library, enabling applications to manage sessions and interact
        with session managers to save and restore their state. It is
        essential for GUI applications that require session management
        capabilities, particularly in X11 environments. Additionally,
        it is a common dependency for graphical libraries such as OpenCV,
        making it important in development environments involving GUI
        applications or image processing.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man3/SM.3.html
        package: https://packages.ubuntu.com/noble/libsm6
        source: https://gitlab.freedesktop.org/xorg/lib/libsm
      notes: |
        Required for `metafont` (see [Island of Tex Dockerfile](https://gitlab.com/islandoftex/images/texlive/-/blob/72240db12e00510972aeea19cd0a08edc22c4152/Dockerfile.base#L28)).
    libsqlite3-dev:
      summary: Development files for the SQLite 3 database engine.
      group: essential
      description: |
        This package provides the headers and static libraries for SQLite 3,
        a lightweight, disk-based database engine. It's essential for
        developing applications that require embedded database functionality
        without the overhead of a separate server process.
      url:
        docs: https://www.sqlite.org/docs.html
        source: https://www.sqlite.org/src
    libssl3t64:
      summary: OpenSSL 3.0 shared libraries with 64-bit time_t support.
      group: required
      description: |
        The 'libssl3t64' package provides the shared libraries for OpenSSL 3.0,
        compiled with 64-bit time_t support. This ensures compatibility with
        systems and applications that use 64-bit time representations, aligning
        with the time_t transition in Ubuntu Noble (24.04). It is essential for
        applications that require secure communication over the Internet using
        SSL and TLS protocols, and that are built against the 64-bit time_t ABI.
      url:
        docs: https://www.openssl.org/docs/
        package: https://packages.ubuntu.com/noble/libssl3t64
        source: https://launchpad.net/ubuntu/+source/openssl
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libssl-dev:
      summary: Development files for the OpenSSL library.
      group: essential
      dependents: [ git ]
      description: |
        This package provides the headers and static libraries for OpenSSL,
        implementing the SSL and TLS protocols. It's essential for developing
        applications that require secure communication over networks.
      url:
        docs: https://www.openssl.org/docs/
        source: https://github.com/openssl/openssl
    libstdc++6:
      summary: GNU Standard C++ Library v3.
      group: required
      description: |
        The 'libstdc++6' package provides the standard C++ library, which
        includes the runtime components required to run C++ applications
        compiled with GCC. This package is fundamental for the execution
        of C++ programs and is required in any environment that runs such
        applications.
      url:
        docs: https://gcc.gnu.org/onlinedocs/libstdc++/
        source: https://gcc.gnu.org/git/gcc.git
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    libtirpc3t64:
      summary: Transport Independent RPC library (t64 variant).
      group: required
      description: |
        The 'libtirpc3t64' package provides the Transport Independent
        Remote Procedure Call (TI-RPC) library, which is a replacement
        for the traditional SunRPC library. It offers support for both
        IPv4 and IPv6 and is essential for applications that rely on
        RPC mechanisms, such as NFS and certain network services. The
        't64' variant ensures compatibility with the 64-bit time_t
        transition in Ubuntu Noble, making it a required component for
        systems and applications that depend on RPC functionality.
      url:
        docs: https://man7.org/linux/man-pages/man3/tirpc.3.html
        package: https://packages.ubuntu.com/noble/libtirpc3t64
        source: https://github.com/libtirpc/libtirpc
    libtool:
      summary: Generic library support script.
      group: essential
      description: |
        Libtool is a generic library support script that abstracts the
        complexity of using shared libraries across different platforms.
        It's essential for developing portable software that builds shared
        libraries.
      url:
        docs: https://www.gnu.org/software/libtool/manual/
        source: https://git.savannah.gnu.org/git/libtool.git
    libunicode-linebreak-perl:
      summary: Perl module implementing the Unicode Line Breaking Algorithm.
      group: recommended
      dependents: [ tex ]
      description: |
        This package provides the Unicode::LineBreak Perl module, which
        implements the Unicode Line Breaking Algorithm as described in
        UAX #14. It's used in text processing applications that require
        proper line breaking of Unicode text.
      url:
        docs: https://metacpan.org/pod/Unicode::LineBreak
        package: https://packages.ubuntu.com/noble/libunicode-linebreak-perl
        source: https://salsa.debian.org/perl-team/modules/packages/libunicode-linebreak-perl.git
      notes: |
        Required for `latexindent` (see [Island of Tex Dockerfile](https://gitlab.com/islandoftex/images/texlive/-/blob/72240db12e00510972aeea19cd0a08edc22c4152/Dockerfile.base#L24))
    libunwind8:
      summary: Library for stack unwinding.
      group: essential
      description: |
        The 'libunwind8' package provides a portable and efficient C
        programming interface to determine the call-chain of a program.
        It is used for stack unwinding, which is essential for exception
        handling, debugging, and profiling. This package is essential for
        applications that require backtrace capabilities.
      url:
        docs: https://www.nongnu.org/libunwind/
        package: https://packages.ubuntu.com/noble/libunwind8
        source: https://github.com/libunwind/libunwind
    libuuid1:
      summary: Universally Unique Identifier library.
      group: essential
      description: |
        The 'libuuid1' package provides a library for generating and
        parsing UUIDs (Universally Unique Identifiers). It is used by
        various applications and libraries to uniquely identify
        information without significant central coordination. This package
        is essential for systems and applications that require UUID
        generation and handling.
      url:
        docs: https://man7.org/linux/man-pages/man3/uuid.3.html
        package: https://packages.ubuntu.com/noble/libuuid1
        source: https://github.com/util-linux/util-linux
    libwebp-dev:
      summary: Development files for the WebP image format library.
      group: recommended
      description: |
        This package provides the headers and static libraries for libwebp,
        a library for encoding and decoding images in the WebP format. It's
        recommended for developing applications that handle modern image
        formats with efficient compression.
      url:
        docs: https://developers.google.com/speed/webp/docs/
        package: https://packages.ubuntu.com/noble/libwebp-dev
        source: https://chromium.googlesource.com/webm/libwebp
    libx11-6:
      summary: X11 client-side library.
      group: recommended
      description: |
        libx11-6 provides the X11 client-side library,
        which allows applications to communicate with the X Window System.
        It is a fundamental component for graphical applications on Unix-like systems.
        This package is required for any application that uses the X11 windowing system.
      url:
        docs: https://www.x.org/releases/X11R7.7/doc/libX11/libX11/libX11.html
        package: https://packages.ubuntu.com/noble/libx11-6
        source: https://gitlab.freedesktop.org/xorg/lib/libx11
    libx11-xcb1:
      summary: Xlib/XCB interface library.
      group: recommended
      description: |
        libx11-xcb1 allows applications to use both Xlib and XCB
        interfaces, facilitating better performance and integration.
        It is recommended for applications that interact with the X
        Window System but is not essential for all environments.
      url:
        docs: https://www.x.org/releases/X11R7.7/doc/libX11/libX11/libX11.html
        package: https://packages.ubuntu.com/noble/libx11-xcb1
        source: https://gitlab.freedesktop.org/xorg/lib/libX11
    libxcomposite1:
      summary: X11 Composite extension library.
      group: optional
      description: |
        libxcomposite1 provides support for the X11 Composite extension,
        allowing for advanced graphical effects like transparency and
        off-screen rendering. It is optional and primarily used by
        compositing window managers and applications requiring such
        effects.
      url:
        docs: https://www.x.org/releases/X11R7.7/doc/libXcomposite/libXcomposite.txt
        package: https://packages.ubuntu.com/noble/libxcomposite1
        source: https://gitlab.freedesktop.org/xorg/lib/libXcomposite
    libxdamage1:
      summary: X11 Damage extension library.
      group: optional
      description: |
        libxdamage1 provides support for the X11 Damage extension,
        which allows applications to track changes to drawable areas.
        It is optional and mainly used by compositing window managers
        and applications that need to monitor screen updates.
      url:
        docs: https://www.x.org/releases/X11R7.7/doc/libXdamage/libXdamage.txt
        package: https://packages.ubuntu.com/noble/libxdamage1
        source: https://gitlab.freedesktop.org/xorg/lib/libXdamage
    libxfixes3:
      summary: X11 Fixes extension library.
      group: optional
      description: |
        libxfixes3 provides support for the X11 Fixes extension,
        offering enhancements and bug fixes to the core X11 protocol.
        It is optional and used by applications that require these
        specific extensions for improved functionality.
      url:
        docs: https://www.x.org/releases/X11R7.7/doc/libXfixes/libXfixes.txt
        package: https://packages.ubuntu.com/noble/libxfixes3
        source: https://gitlab.freedesktop.org/xorg/lib/libXfixes
    libxml2-dev:
      summary: Development files for the GNOME XML library.
      group: essential
      description: |
        This package provides the headers and static libraries for libxml2,
        the GNOME XML library. It's essential for developing applications
        that parse and manipulate XML documents.
      url:
        docs: http://xmlsoft.org/html/index.html
        source: https://gitlab.gnome.org/GNOME/libxml2
    libxslt-dev:
      summary: Development files for the XSLT 1.0 processing library.
      group: recommended
      description: |
        This package provides the headers and static libraries for libxslt,
        a library for transforming XML documents into other formats using
        XSLT. It's recommended for developing applications that require XML
        transformations.
      url:
        docs: http://xmlsoft.org/XSLT/
        package: https://packages.ubuntu.com/noble/libxslt1-dev
        source: https://gitlab.gnome.org/GNOME/libxslt
    libyaml-dev:
      summary: Development files for the YAML 1.1 parser and emitter library.
      group: recommended
      description: |
        This package provides the headers and static libraries for libyaml,
        a C library for parsing and emitting YAML. It's recommended for
        developing applications that utilize YAML for configuration or data
        serialization.
      url:
        docs: https://pyyaml.org/wiki/LibYAML
        source: https://github.com/yaml/libyaml
    libyaml-tiny-perl:
      summary: Perl module for reading and writing YAML files with minimal dependencies.
      group: recommended
      description: |
        This package provides the YAML::Tiny Perl module, a lightweight
        YAML reader and writer implemented in pure Perl. It's suitable for
        applications that require basic YAML functionality without the
        overhead of heavier YAML parsers. It's particularly useful in
        environments where minimizing dependencies is important.
      url:
        docs: https://metacpan.org/pod/YAML::Tiny
        package: https://packages.ubuntu.com/noble/libyaml-tiny-perl
        source: https://salsa.debian.org/perl-team/modules/packages/libyaml-tiny-perl.git
      notes: |
        Required for `latexindent` (see [Island of Tex Dockerfile](https://gitlab.com/islandoftex/images/texlive/-/blob/72240db12e00510972aeea19cd0a08edc22c4152/Dockerfile.base#L24))
    lldb:
      summary: Next-generation debugger from the LLVM project.
      group: recommended
      description: |
        LLDB is a modern debugger that is part of the LLVM project. It is
        designed to be highly modular and supports debugging of C, C++, and
        Objective-C programs. LLDB is recommended for developers who use
        Clang and LLVM toolchains.
      url:
        docs: https://lldb.llvm.org/
        package: https://packages.ubuntu.com/noble/lldb
        source: https://github.com/llvm/llvm-project
    llvm:
      summary: Collection of modular and reusable compiler and toolchain technologies.
      group: essential
      description: |
        LLVM is a collection of modular and reusable compiler and toolchain
        technologies. It is used to develop compiler front ends and back
        ends. LLVM is essential for projects that require custom compiler
        development or advanced code analysis tools.
      url:
        docs: https://llvm.org/docs/
        package: https://packages.ubuntu.com/noble/llvm
        source: https://github.com/llvm/llvm-project
    locales:
      summary: GNU C Library locale data and generation tools.
      group: essential
      description: |
        The 'locales' package provides the infrastructure for
        managing language and regional settings on Ubuntu systems.
        It includes utilities like 'locale' and 'locale-gen' to
        display and generate locale data, respectively. These
        settings influence various aspects of system behavior,
        such as language, character encoding, and formatting of
        dates and numbers. This package is essential for
        configuring and supporting internationalization in
        applications and the system environment.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man7/locale.7.html
        package: https://packages.ubuntu.com/noble/locales
        source: https://salsa.debian.org/glibc-team/glibc
      post_install: |
        # Ensure at least the en_US.UTF-8 UTF-8 locale is available = common need for both applications and things like the agnoster ZSH theme.
        # - https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/common-utils/main.sh#L145C5-L150C7
        if ! grep -o -E '^\s*en_US.UTF-8\s+UTF-8' /etc/locale.gen > /dev/null; then
            echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen;
            locale-gen;
        fi
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    lsb-release:
      summary: Linux Standard Base version reporting utility.
      group: essential
      description: |
        The 'lsb-release' package provides the 'lsb_release' command,
        which outputs distribution-specific information. In Ubuntu
        Noble, it offers a minimal implementation that retrieves data
        from '/etc/os-release'. It is recommended for scripts and
        tools that need to identify the distribution.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/lsb_release.1.html
        package: https://packages.ubuntu.com/noble/lsb-release
        source: https://launchpad.net/ubuntu/+source/lsb-release-minimal
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    lsof:
      summary: List open files.
      group: recommended
      description: |
        Lists information about files opened by processes. Useful for
        debugging and monitoring, but not essential for all environments.
      url:
        docs: https://man7.org/linux/man-pages/man8/lsof.8.html
        package: https://packages.ubuntu.com/noble/lsof
        source: https://github.com/lsof-org/lsof
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    make:
      summary: Utility for directing compilation.
      group: required
      description: |
        Make is a build automation tool that automatically builds executable
        programs and libraries from source code by reading files called
        Makefiles. It's required for compiling software from source.
      url:
        docs: https://www.gnu.org/software/make/manual/
        source: https://git.savannah.gnu.org/git/make.git
    man-db:
      summary: On-disk database and utilities for Unix manual pages.
      group: essential
      description: |
        Installs and manages the manual page database and utilities
        such as `man`. It allows users to read documentation about
        installed commands, libraries, and APIs. It is essential for
        accessing reference material in CLI environments.
      url:
        docs: https://man7.org/linux/man-pages/man1/man.1.html
        package: https://packages.ubuntu.com/noble/man-db
        source: https://salsa.debian.org/man-db-team/man-db
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    manpages:
      summary: Unix manual pages for user-level commands.
      group: recommended
      description: |
        Provides a large collection of manual pages describing standard
        user commands, file formats, and tools. Recommended for user and
        developer reference, but not strictly necessary to run software.
      url:
        docs: https://man7.org/linux/man-pages/
        package: https://packages.ubuntu.com/noble/manpages
        source: https://salsa.debian.org/manpages-team/manpages
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    manpages-dev:
      summary: Developer-oriented manpages for C programming and system APIs.
      group: recommended
      description: |
        Contains man pages for C library functions, system calls,
        headers, and development tools. Recommended for programmers and
        developers working on C/C++ or system-level code who want to
        look up function definitions and usage.
      url:
        docs: https://man7.org/linux/man-pages/
        package: https://packages.ubuntu.com/noble/manpages-dev
        source: https://salsa.debian.org/manpages-team/manpages-dev
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    mercurial:
      summary: Scalable distributed version control system.
      group: required
      description: |
        A distributed version control system like Git.
        Mercurial is needed for building certain packages
        from source code.
      url:
        docs: https://www.mercurial-scm.org/guide
    moreutils:
      summary: Collection of additional Unix utilities complementing core tools.
      group: recommended
      description: |
        The 'moreutils' package offers a suite of command-line utilities
        that extend the functionality of standard Unix tools.
        It is required for TypeScript, and includes
        programs like 'chronic', 'combine', 'errno', 'ifdata', 'ifne',
        'isutf8', 'lckdo', 'mispipe', 'parallel', 'pee', 'sponge', 'ts',
        'vidir', 'vipe', and 'zrun'. These tools are designed to handle
        specific tasks more efficiently or provide functionality not
        available in the traditional core utilities. For instance, 'sponge'
        allows for safe in-place editing of files, and 'parallel' enables
        the execution of jobs in parallel. While not essential for all
        environments, 'moreutils' is recommended for users seeking enhanced
        command-line capabilities.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/moreutils.1.html
        package: https://packages.ubuntu.com/noble/moreutils
        source: https://launchpad.net/ubuntu/noble/+source/moreutils
    nano:
      summary: Small, friendly text editor inspired by Pico.
      group: essential
      description: |
        GNU nano is a user-friendly, terminal-based text editor
        designed as a free replacement for Pico. It offers features
        like syntax highlighting, undo/redo, line numbering, and
        search-and-replace with regex support. Its simplicity makes
        it ideal for editing configuration files and writing scripts,
        making it an essential tool for system administrators and
        developers working in command-line environments.
      url:
        docs: https://www.nano-editor.org/docs.php
        package: https://packages.ubuntu.com/noble/nano
        source: https://git.savannah.gnu.org/git/nano.git
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    ncdu:
      summary: Interactive disk usage analyzer with ncurses interface.
      group: recommended
      description: |
        ncdu (NCurses Disk Usage) is a terminal-based disk usage
        analyzer that provides a fast and user-friendly interface
        for exploring directory sizes. It allows users to navigate
        through directories, sort by size, and delete files or
        directories directly from the interface. This tool is
        particularly useful for identifying large files and
        directories that consume significant disk space. While not
        essential for all environments, it is recommended for users
        who need an efficient way to manage disk usage.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/ncdu.1.html
        package: https://packages.ubuntu.com/noble/ncdu
        source: https://g.blicky.net/ncdu.git/
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    netbase:
      summary: Basic TCP/IP networking configuration.
      group: required
      description: |
        netbase provides essential networking configuration files such as
        /etc/services, /etc/protocols, and /etc/rpc. These files are
        fundamental for the proper operation of network services and are
        required by various networking tools and daemons to function
        correctly.
    openssh-client:
      summary: Secure shell client for encrypted network connections.
      group: required
      description: |
        The OpenSSH client provides secure encrypted communications
        between hosts over an insecure network.
        It is commonly used for remote login and command execution.
        In development containers, it facilitates secure access
        to remote servers, code repositories, and other network resources.
      url:
        docs: https://www.openssh.com/manual.html
    patch:
      summary: Apply a diff file to an original.
      group: essential
      description: |
        Patch is a utility that applies changes to files based on differences
        described in a diff file. It's essential for applying updates or
        modifications to source code during development.
      url:
        docs: https://www.gnu.org/software/diffutils/manual/
        source: https://savannah.gnu.org/git/?group=diffutils
    perl:
      summary: Highly capable, feature-rich programming language.
      group: essential
      dependents: [ tex ]
      description: |
        Perl is a versatile programming language known for its text
        processing capabilities. It supports multiple programming
        paradigms and is widely used for system administration, web
        development, and more. It's essential for many scripts and
        tools in Unix-like environments.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/perl.1.html
    procps:
      summary: Utilities for monitoring and managing system processes.
      group: essential
      description: |
        The procps package includes command-line utilities such as ps,
        top, vmstat, and others for monitoring and managing system
        processes. These tools are vital for observing system performance,
        diagnosing issues, and managing processes within development
        environments.
      url:
        source: https://gitlab.com/procps-ng/procps
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    psmisc:
      summary: Utilities for managing processes on Unix systems.
      group: recommended
      description: |
        The 'psmisc' package provides a set of utilities for
        managing processes, including 'killall', 'fuser',
        'pstree', and 'peekfd'. These tools assist in
        identifying and controlling processes and their
        resource usage. It is recommended for users who need
        additional tools beyond the basic process management
        commands.
      url:
        docs: https://man7.org/linux/man-pages/man1/killall.1.html
        package: https://packages.ubuntu.com/noble/psmisc
        source: https://gitlab.com/psmisc/psmisc
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    python-is-python3:
      summary: Symlink /usr/bin/python to Python 3 interpreter.
      group: required
      dependents: [ tex ]
      description: |
        This package creates a symbolic link from /usr/bin/python to the
        default Python 3 interpreter. It ensures compatibility with scripts
        and tools that invoke 'python' expecting Python 3, aligning with
        modern conventions and reducing ambiguity in environments where
        both Python 2 and Python 3 may be present.
    python3:
      summary: Default Python 3 interpreter package for Ubuntu Noble.
      group: required
      dependents: [ tex ]
      description: |
        This package provides the default Python 3 interpreter for Ubuntu
        24.04 LTS (Noble Numbat), currently Python 3.12. It includes the
        standard interpreter and essential components, serving as the
        foundation for Python 3 development and execution in the system.
      url:
        docs: https://docs.python.org/3/
    python3-dev:
      summary: Header files and static libraries for Python 3 development.
      group: essential
      description: |
        The 'python3-dev' package provides the header files and static
        libraries necessary for building Python 3 modules and extensions.
        It is essential for developing Python C extensions and embedding
        Python in C applications.
      url:
        docs: https://docs.python.org/3/extending/
        package: https://packages.ubuntu.com/noble/python3-dev
        source: https://github.com/python/cpython
    python3-pip:
      summary: Python package installer for Python 3.
      group: essential
      description: |
        python3-pip is the standard package manager for Python 3,
        enabling the installation and management of Python packages
        from the Python Package Index (PyPI) and other indexes. It
        provides the 'pip3' command-line tool, which allows users to
        install, upgrade, and remove Python packages. This package is
        essential for Python development environments, facilitating
        the integration of third-party libraries and tools necessary
        for various projects.
      url:
        docs: https://pip.pypa.io/en/stable/
        package: https://packages.ubuntu.com/noble/python3-pip
        source: https://github.com/pypa/pip
    python3-pip-whl:
      summary: Wheel archive of the pip installer for Python.
      group: required
      description: |
        The 'python-pip-whl' package provides the pip installer for Python
        in the form of a wheel (.whl) archive. This package is used during
        the bootstrapping process of pip in Python environments, allowing
        for the installation of pip without requiring an existing pip
        installation. It is essential for setting up Python package
        management in environments where pip is not yet available.
      url:
        docs: https://pip.pypa.io/en/stable/
        package: https://packages.ubuntu.com/noble/python-pip-whl
        source: https://github.com/pypa/pip
    python3-pygments:
      summary: Syntax highlighting package written in Python 3.
      group: recommended
      dependents: [ tex ]
      description: |
        Pygments is a generic syntax highlighter suitable for use in code
        hosting, documentation, and other applications requiring code
        formatting. This package provides the Python 3 version of Pygments,
        supporting a wide range of programming languages and markup formats.
      url:
        docs: https://pygments.org/docs/
        package: https://packages.ubuntu.com/noble/python3-pygments
        source: https://github.com/pygments/pygments
    rsync:
      summary: Fast, versatile tool for local and remote file synchronization.
      group: required
      dependents: [ tex ]
      description: |
        rsync is a powerful utility for efficiently transferring and
        synchronizing files across local and remote systems. It employs a
        delta-transfer algorithm that minimizes data transfer by only
        sending differences between source and destination files.
        rsync supports various features, including compression, recursion,
        symbolic link preservation, and SSH-based encrypted transfers.
        It is widely used for backups, mirroring, and as an enhanced
        alternative to traditional copy commands. Given its capabilities
        and common usage in development and deployment workflows,
        rsync is considered essential in many environments.
      url:
        docs: https://rsync.samba.org/documentation.html
        source: https://github.com/WayneD/rsync
    software-properties-common:
      summary: Manage software repositories and PPAs.
      group: required
      description: |
        The 'software-properties-common' package provides an abstraction
        of the used apt repositories. It allows you to easily manage your
        distribution and independent software vendor software sources. It
        includes the 'add-apt-repository' command-line tool. This package
        is essential for adding and managing PPAs and other software
        sources.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/add-apt-repository.1.html
        package: https://packages.ubuntu.com/noble/software-properties-common
        source: https://git.launchpad.net/software-properties
      post_install: |
        add-apt-repository universe;
    sq:
      summary: Secure messaging and encryption tool.
      group: required
      description: |
        A command-line tool for secure messaging and encryption,
        providing functionalities for key management and encrypted
        communication.
      url:
        source: https://github.com/sqproject/sq
    sqlite3:
      summary: Command-line interface for SQLite 3.
      group: essential
      description: |
        The 'sqlite3' package provides a command-line interface for
        interacting with SQLite 3 databases. It allows users to create,
        modify, and query SQLite databases directly from the terminal.
        This package is essential for developers and administrators who
        need to manage SQLite databases.
      url:
        docs: https://www.sqlite.org/docs.html
        package: https://packages.ubuntu.com/noble/sqlite3
        source: https://www.sqlite.org/src
    strace:
      summary: Diagnostic tool for tracing system calls.
      group: recommended
      description: |
        strace is used to monitor and debug interactions between programs
        and the Linux kernel by tracing system calls and signals. It's a
        vital tool for diagnosing runtime issues, especially in debugging,
        security auditing, and reverse engineering. Recommended for
        developers and sysadmins.
      url:
        docs: https://man7.org/linux/man-pages/man1/strace.1.html
        package: https://packages.ubuntu.com/noble/strace
        source: https://github.com/strace/strace
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    sudo:
      summary: Execute commands with elevated privileges.
      group: required
      description: |
        The 'sudo' package provides the 'sudo' command, allowing
        authorized users to execute commands with the security
        privileges of another user, typically the superuser. It is
        essential for performing administrative tasks without logging
        in as the root user, thereby enhancing system security and
        auditability. In Ubuntu, the root account is disabled by
        default, making 'sudo' indispensable for system management.
      url:
        docs: https://man7.org/linux/man-pages/man8/sudo.8.html
        package: https://packages.ubuntu.com/noble/sudo
        source: https://launchpad.net/ubuntu/+source/sudo
    swig:
      summary: Tool for generating scripting language interfaces to C/C++ code.
      group: required
      description: |
        SWIG (Simplified Wrapper and Interface Generator) is a tool that
        connects programs written in C and C++ with various high-level
        programming languages, including Python, Perl, Ruby, and others.
        It automates the generation of the necessary wrapper code,
        facilitating the integration of C/C++ code into scripting languages.
        In Ubuntu 24.04 (Noble), the 'swig' package provides version 4.0,
        which includes improved features and broader language support
        compared to previous versions. This package is required for
        installing projects that require interfacing C/C++ code with scripting languages.
      url:
        docs: https://www.swig.org/Doc4.0/
        package: https://packages.ubuntu.com/noble/swig
        source: https://github.com/swig/swig
    tar:
      summary: GNU tar – archiving utility for combining multiple files into a single archive.
      group: essential
      dependents: [ git ]
      description: |
        GNU tar is a standard Unix utility used to create, maintain, modify, and extract files from archives. It supports various compression methods, including gzip, bzip2, and xz, facilitating efficient storage and distribution of files. Commonly used for backups and software packaging, tar is an essential tool in Unix-like environments.
      url:
        docs: https://man7.org/linux/man-pages/man1/tar.1.html
        package: https://packages.ubuntu.com/noble/tar
        source: https://launchpad.net/ubuntu/+source/tar
    tk-dev:
      summary: Development files for the Tk GUI toolkit.
      group: essential
      description: |
        tk-dev provides the header files and libraries necessary for
        developing applications using the Tk GUI toolkit, which is often
        used with the Tcl scripting language. It is essential for building
        graphical applications that utilize Tk for their user interface.
      url:
        docs: https://www.tcl.tk/doc/
        package: https://packages.ubuntu.com/noble/tk-dev
        source: https://core.tcl-lang.org/tk
    tree:
      summary: Display directories and files in a tree-like format.
      group: recommended
      description: |
        The 'tree' command provides a recursive, depth-indented listing
        of files and directories, visualizing the structure in a
        tree-like format. It is particularly useful for understanding
        complex directory hierarchies and for documentation purposes.
        While not essential for all environments, it is recommended for
        users who need to visualize directory structures effectively.
      url:
        docs: https://man7.org/linux/man-pages/man1/tree.1.html
        package: https://packages.ubuntu.com/noble/tree
        source: https://gitlab.com/OldManProgrammer/unix-tree
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    tzdata:
      summary: Time zone and daylight-saving time data.
      group: required
      description: |
        tzdata provides the time zone and daylight-saving time data used by
        the system to correctly handle time conversions and representations.
        It's essential for applications that rely on accurate timekeeping,
        ensuring consistency across different regions and systems.
    unixodbc-dev:
      summary: Development files for the unixODBC ODBC driver manager.
      group: essential
      description: |
        Provides the headers and static libraries
        necessary for developing applications that utilize the unixODBC
        driver manager. It is required for Microsoft SQL Server,
        and includes files like 'sql.h' and 'sqlext.h',
        enabling compilation of programs that interface with various
        databases through the ODBC API. This package is essential for
        building software that requires database connectivity via ODBC,
        ensuring compatibility across different database systems.
      url:
        docs: https://www.unixodbc.org/doc/
        package: https://packages.ubuntu.com/noble/unixodbc-dev
        source: https://github.com/lurcher/unixODBC
    unzip:
      summary: De-archiver for .zip files.
      group: required
      description: |
        Unzip is a utility for extracting files from .zip archives. It's
        essential for handling compressed files, especially when dealing with
        source code or resources distributed in .zip format.
      url:
        docs: https://infozip.sourceforge.net/UnZip.html
        package: https://packages.ubuntu.com/noble/unzip
        source: https://github.com/Info-ZIP/UnZip
    uuid-dev:
      summary: Development files for UUID generation library.
      group: essential
      description: |
        uuid-dev provides the headers and static libraries for developing
        applications that generate and manipulate Universally Unique
        Identifiers (UUIDs). It is essential for building software that
        requires unique identifiers, such as database keys or session tokens.
      url:
        docs: https://man7.org/linux/man-pages/man3/uuid.3.html
        package: https://packages.ubuntu.com/noble/uuid-dev
        source: https://github.com/util-linux/util-linux
    valgrind:
      summary: Instrumentation framework for building dynamic analysis tools.
      group: recommended
      description: |
        Valgrind is a programming tool for memory debugging, memory leak
        detection, and profiling. It helps to detect memory management and
        threading bugs, making it recommended for developers who need to
        ensure the correctness and performance of their applications.
      url:
        docs: https://valgrind.org/docs/manual/manual.html
        package: https://packages.ubuntu.com/noble/valgrind
        source: https://sourceware.org/git/valgrind.git
    vim:
      summary: Vi IMproved – enhanced vi text editor.
      group: essential
      description: |
        Vim is a highly configurable text editor built to make creating
        and changing any kind of text very efficient. It is an improved
        version of the Unix editor vi and is widely used by developers for
        editing source code. It is essential in CLI-based development
        environments.
      url:
        docs: https://vimhelp.org/
        package: https://packages.ubuntu.com/noble/vim
        source: https://github.com/vim/vim
    wget:
      summary: Non-interactive network downloader.
      group: required
      description: |
        A command-line utility for downloading files from the web,
        supporting HTTP, HTTPS, and FTP protocols. It's particularly useful
        for automated scripts and tasks that require fetching resources
        without user interaction, making it a staple in many development
        and deployment workflows.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/wget.1.html
        source: https://www.gnu.org/software/wget/
    xtail:
      summary: Monitor multiple files like `tail -f`, even if they are rotated.
      group: recommended
      description: |
        xtail allows users to watch the growth of multiple files at once,
        much like `tail -f`, but with support for files that get rotated
        (like logs). It's recommended for monitoring log files and useful
        in debugging and operations environments.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/xtail.1.html
        package: https://packages.ubuntu.com/noble/xtail
        source: https://github.com/pbrady/xtail
    xz-utils:
      summary: Utilities for .xz compression.
      group: essential
      description: |
        XZ Utils provide tools for compressing and decompressing files using
        the .xz format, which utilizes the LZMA2 compression algorithm. It's
        essential for handling .xz compressed files, commonly used in source
        distributions.
      url:
        docs: https://tukaani.org/xz/
        source: https://git.tukaani.org/?p=xz.git
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    zip:
      summary: Command-line utility for creating ZIP archives.
      group: essential
      description: |
        The 'zip' package provides the 'zip' command-line utility, which
        allows users to compress files and directories into ZIP archive
        files. It supports various features, including recursive directory
        compression, exclusion patterns, and encryption. The utility is
        widely used for packaging files for distribution, backup, and
        efficient storage. Its compatibility with other ZIP tools across
        different operating systems makes it a versatile choice for file
        compression needs in development and production environments.
      url:
        docs: https://manpages.ubuntu.com/manpages/noble/en/man1/zip.1.html
        package: https://packages.ubuntu.com/noble/zip
        source: https://launchpad.net/ubuntu/noble/+source/zip
    zlib1g:
      summary: Compression library implementing the deflate algorithm.
      group: required
      description: |
        The 'zlib1g' package provides the zlib compression library, which
        implements the deflate compression algorithm used in gzip and
        other compression tools. It is widely used by applications for
        data compression and decompression. This package is required for
        the operation of many software packages that handle compressed
        data.
      url:
        docs: https://zlib.net/manual.html
        package: https://packages.ubuntu.com/noble/zlib1g
        source: https://github.com/madler/zlib
      notes: |
        Included in the [`common-utils`](https://github.com/devcontainers/features/blob/main/src/common-utils/main.sh) devcontainer feature.
    zlib1g-dev:
      summary: Development files for the zlib compression library.
      group: essential
      dependents: [ git ]
      description: |
        This package provides the headers and static libraries for zlib, a
        compression library implementing the deflate algorithm. It's
        essential for developing applications that require data compression.
      url:
        docs: https://zlib.net/manual.html
        source: https://github.com/madler/zlib
    zsh:
      summary: Z Shell – advanced interactive shell.
      group: recommended
      description: |
        Zsh is a powerful and highly customizable Unix shell that
        incorporates features from bash, ksh, and tcsh. It offers
        advanced features like improved tab completion, spell
        correction, and theming support. While not essential for
        system operation, it is a popular alternative for users
        seeking enhanced interactive shell experiences.
      url:
        docs: https://zsh.sourceforge.io/Doc/
        package: https://packages.ubuntu.com/noble/zsh
        source: https://sourceforge.net/p/zsh/code/ci/master/tree/
  environment:
    base:
      conda:
        conda-build:
          description: |
            Tool for building conda packages.
          url:
            docs: https://conda.io/projects/conda-build
            package: https://anaconda.org/conda-forge/conda-build
          notes: |
            For proper functioning, it is strongly recommended to
            install conda-build in the conda base environment.
            See the [conda-build documentation](https://docs.conda.io/projects/conda-build/en/stable/install-conda-build.html)
            for more information.
    pybuild:
      pip:
        build:
          spec:
            version: '>=1.2.2'
          url:
            docs: https://build.pypa.io/
            package: https://pypi.org/project/build/
            source: https://github.com/pypa/build
        twine:
          url:
            docs: https://twine.readthedocs.io/
            package: https://pypi.org/project/twine/
            source: https://github.com/pypa/twine
        readme-renderer:
          spec:
            version: '>=44'
            extras: [ md ]
          url:
            package: https://pypi.org/project/readme-renderer/
            source: https://github.com/pypa/readme_renderer
      variable:
        log_level:
          summary: Log level for the versioningit tool during build.
          description: |
            See the [versioningit documentation](https://versioningit.readthedocs.io/en/stable/configuration.html#log-level-environment-variable)
            for more information.
          key: VERSIONINGIT_LOG_LEVEL
          value: DEBUG
    versioning:
      pip:
        versioning:
          spec: |
            #{{
              spec = get("pypkg_main.dependency.build.versioning.install.pip")
              out = {}
              for k, v in spec.items():
                if k == "spec":
                  out["full"] = v
                elif k not in ("homepage",):
                  out[k] = v
              return out
            }}#
    type_check:
      pip:
        mypy:
          spec:
            version: ==1.15.0
            extras: [ reports ]
          url:
            docs: https://mypy.readthedocs.io/
            package: https://pypi.org/project/mypy/
            source: https://github.com/python/mypy
      data:
        cache_path: ${{ local.cache.path }}$/mypy
        report_path: ${{ local.report.path }}$/mypy
      file:
        mypy_config:
          name: Mypy Configuration
          summary: >-
            Mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html)
            in [pyproject.toml](https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml) format.
          type: toml
          path: .config/mypy.toml
          content:
            tool:
              mypy:
                # Import discovery
                packages: [ '${{ pypkg_main.import_name }}$' ]
                # Configuring warnings
                warn_return_any: true
                # Miscellaneous strictness flags
                strict: true
                # Configuring error messages
                show_error_context: true
                show_column_numbers: true
                show_error_code_links: true
                pretty: true
                color_output: true
                # Incremental mode
                cache_dir: ${{ devcontainer_main.environment.type_check.data.cache_path }}$
                # Advanced options
                show_traceback: true
                raise_exceptions: true
                # Report generation
                any_exprs_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                html_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                linecount_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                linecoverage_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                lineprecision_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                txt_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                xml_report: ${{ devcontainer_main.environment.type_check.data.report_path }}$
                # Miscellaneous
                verbosity: 2
      task:
        typecheck:
          name: Type Check
          summary: Run type checking with Mypy.
          process:
            - mypy
            - --package ${{ pypkg_main.import_name }}$
            - --package ${{ pypkg_test.import_name }}$
            # https://mypy.readthedocs.io/en/stable/installed_packages.html#using-installed-packages-with-mypy-pep-561
            - --python-executable /opt/conda/envs/${{ __temp__.conda_env_name.app }}$/bin/python
            - --config-file ${{ devcontainer_main.environment.type_check.file.mypy_config.path }}$
            - --install-types
            - --non-interactive
    codecov:
      conda:
        rust:
          notes: |
            Required for the `codecov` package.
      pip:
        codecov-cli:
          spec:
            version: ==10.0.1
          url:
            docs: https://docs.codecov.com/docs/the-codecov-cli
            package: https://pypi.org/project/codecov/
            source: https://github.com/codecov/codecov-cli
      file:
        codecov_config:
          name: Codecov Configuration
          summary: >-
            Codecov [configuration file](https://docs.codecov.com/docs/codecov-yaml)
            in YAML format.
          description: |
            [Codecov](https://about.codecov.io/) is an online platform
            that provides test coverage metrics for your project.
            After [signing up on Codecov](https://docs.codecov.com/docs/quick-start),
            these configurations will automatically control the generation of coverage reports
            and the submission of these reports to Codecov.
            For a full reference, see the
            [Codecov YAML reference](https://docs.codecov.com/docs/codecovyml-reference).
          type: yaml
          path: .github/.codecov.yml
          path_schema:
            description: |
              CodeCov only looks for a `codecov.yml` or `.codecov.yml` file
              either in the root of the repository, or in `.github/` and `dev/` directories.
              (cf. [CodeCov documentation](https://docs.codecov.com/docs/codecov-yaml#can-i-name-the-file-codecovyml)).
            pattern: ^(.github/|dev/)?.?codecov.yml$
          content:
            coverage:
              precision: 2
              round: nearest
              range: "90...100"
              status:
                project:
                  default:
                    target: 100%
                    threshold: 5%
            comment:
              layout: "header, diff, flags, files"
              require_changes: false
              behavior: default
          validator: validate_codecov_yaml
    pylint:
      conda:
        pylint:
          spec:
            version: ==3.3.4
          url:
            docs: https://pylint.readthedocs.io/
            package: https://anaconda.org/conda-forge/pylint
            source: https://github.com/pylint-dev/pylint
        pyenchant:
          description: |
            Spellchecking library for Python.
            This is an optional dependency of `pylint`,
            which is not included in the conda package.
          spec:
            version: ==3.2.2
          url:
            docs: https://pyenchant.github.io/pyenchant/
            package: https://anaconda.org/conda-forge/pyenchant
            source: https://github.com/pyenchant/pyenchant/
        enchant:
          description: |
            Spellchecking library.
            This is the underlying library for `pyenchant`.
          spec:
            version: ==2.8.2
          url:
            docs: https://rrthomas.github.io/enchant/
            package: https://anaconda.org/conda-forge/enchant
            source: https://github.com/rrthomas/enchant/
    pre_commit:
      conda:
        pre-commit:
          description: |
            Framework for managing and maintaining
            multi-language hooks for formatting and linting.
          spec:
            version: ==4.1.0
          url:
            docs: https://pre-commit.com/
            package: https://anaconda.org/conda-forge/pre_commit
            source: https://github.com/pre-commit/pre-commit
      variable:
        cache_dir:
          summary: Directory to store the cache for pre-commit hooks.
          key: PRE_COMMIT_HOME
          value: ${{ local.cache.path }}$/pre-commit
      file:
        pre_commit_config:
          name: Pre-Commit Configuration
          summary: >-
            Pre-Commit [configuration file](https://pre-commit.com/#configuration).
          type: yaml
          path: .config/pre-commit.yaml
          content:
            default_language_version:
              python: python3
            minimum_pre_commit_version: 4.0.0
            repos:
              - repo: https://github.com/pre-commit/pre-commit-hooks
                rev: v5.0.0
                hooks:
                  - id: check-ast
                    # https://github.com/pre-commit/pre-commit-hooks#check-ast
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-case-conflict
                    # https://github.com/pre-commit/pre-commit-hooks#check-case-conflict
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-json
                    # https://github.com/pre-commit/pre-commit-hooks#check-json
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-shebang-scripts-are-executable
                    # https://github.com/pre-commit/pre-commit-hooks#check-shebang-scripts-are-executable
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-symlinks
                    # https://github.com/pre-commit/pre-commit-hooks#check-symlinks
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-toml
                    # https://github.com/pre-commit/pre-commit-hooks#check-toml
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-xml
                    # https://github.com/pre-commit/pre-commit-hooks#check-xml
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: destroyed-symlinks
                    # https://github.com/pre-commit/pre-commit-hooks?tab=readme-ov-file#destroyed-symlinks
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: end-of-file-fixer
                    # https://github.com/pre-commit/pre-commit-hooks#end-of-file-fixer
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: fix-byte-order-marker
                    # https://github.com/pre-commit/pre-commit-hooks?tab=readme-ov-file#fix-byte-order-marker
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: mixed-line-ending
                    # https://github.com/pre-commit/pre-commit-hooks#mixed-line-ending
                    stages: [ pre-commit, manual ]
                    args: [ --fix, auto ]
                    verbose: true
                  - id: no-commit-to-branch
                    # https://github.com/pre-commit/pre-commit-hooks#no-commit-to-branch
                    stages: [ pre-commit ]
                    args:
                      - --branch
                      - '${{ branch.main.name }}$'
                      - --pattern
                      - '${{ branch.release.name }}$.*'
                      - --pattern
                      - '${{ branch.pre.name }}$.*'
                    verbose: true
                  - id: pretty-format-json
                    # https://github.com/pre-commit/pre-commit-hooks?tab=readme-ov-file#pretty-format-json
                    stages: [ pre-commit, manual ]
                    args: [ --autofix, --indent, '3' ]
                    verbose: true
                  - id: trailing-whitespace
                    # https://github.com/pre-commit/pre-commit-hooks#trailing-whitespace
                    stages: [ pre-commit, manual ]
                    args: [ --markdown-linebreak-ext=md ]
                    verbose: true
              - repo: https://github.com/astral-sh/ruff-pre-commit
                rev: v0.11.0
                hooks:
                  - id: ruff
                    stages: [ pre-commit, manual ]
                    args:
                      - --verbose
                      - --config
                      - '${{ devcontainer_main.environment.pre_commit.file.ruff_config.path }}$'
                      - --exit-non-zero-on-fix  # DO NOT CHANGE - Required for RepoDynamics CI
                    types_or: [ python, pyi, jupyter ]
                    verbose: true
                  - id: ruff-format
                    stages: [ pre-commit, manual ]
                    args: [ --config, '${{ devcontainer_main.environment.pre_commit.file.ruff_config.path }}$' ]
                    types_or: [ python, pyi, jupyter ]
                    verbose: true
        pre_commit_config_ci:
          name: Pre-Commit Configuration for CI
          summary: >-
            Pre-Commit [configuration file](https://pre-commit.com/#configuration)
            for use in CI pipeline.
          type: yaml
          path: .config/pre-commit-ci.yaml
          content: |-
            #{{
              local_config = get("devcontainer_main.environment.pre_commit.file.pre_commit_config.content")
              return local_config | {"exclude": r"^\.github/workflows/[^/]+\.(?i:ya?ml)$"}
            }}#
        ruff_config:
          name: Ruff Configuration
          summary: >-
            Ruff [configuration file](https://docs.astral.sh/ruff/settings/)
            in TOML format.
          type: toml
          path: .config/ruff.toml
          content:
            cache-dir: ${{ local.cache.path }}$/ruff
            fix: true
            line-length: 100
            output-format: grouped
            required-version: '>=0.11,<0.12'
            show-fixes: true
            src:
              - '${{ pypkg_main.path.source }}$'
              - '${{ pypkg_test.path.source }}$'
            target-version: >-
              #{{
                major, minor = get("pypkg_main.python.version.minors")[0].split(".")
                return f"py{major}{minor}"
              }}#
            format:
              docstring-code-format: true
            lint:
              allowed-confusables: [ '–' ]
              exclude:
                - .manager/**/*.py
              ignore:
                - PLR1711  # https://docs.astral.sh/ruff/rules/useless-return/
                # Rules conflicting with the formatter (see: https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules)
                - W191
                - E501
                - E111
                - E114
                - E117
                - D206
                - D300
                - Q000
                - Q001
                - Q002
                - Q003
                - COM812
                - COM819
                - ISC001
                - ISC002
              per-file-ignores:
                .devcontainer/script/**:
                  - T201
                  - S603
                  - S607
                .github/**:
                  - T201
                  - S603
                  - S607
                '${{ pypkg_test.path.source }}$/**':
                  - S101
                template/test/src/**:
                  - S101
                '${{ web.path.source }}$/conf.py':
                  - TRY003  # https://docs.astral.sh/ruff/rules/raise-vanilla-args/#raise-vanilla-args-try003
                # https://docs.astral.sh/ruff/rules/#flake8-print-t20
                '${{ pypkg_main.path.import }}$/__main__.py':
                  - T20
                '${{ pypkg_test.path.import }}$/__main__.py':
                  - T20
                '${{ pypkg_test.path.import }}$/__init__.py':
                  - T20
                template/pkg/src/new_pyproject/__main__.py:
                  - T20
                template/test/src/new_pyproject_testsuite/__main__.py:
                  - T20
                template/pkg/src/new_pyproject/__init__.py:
                  - T20
                  - D104
                template/test/src/new_pyproject_testsuite/__init__.py:
                  - T20
                  - D104
                template/.control/hooks/cca.py:
                  - ARG002
              select:
                # https://docs.astral.sh/ruff/rules
                - F      # pyflakes
                - E      # pycodestyle error
                - W      # pycodestyle warning
                - C90    # mccabe
                - I      # isort
                - N      # pep8-naming
                - D      # pydocstyle
                - UP     # pyupgrade
                - YTT    # flake8-2020
                - ANN    # flake8-annotations
                - ASYNC  # flake8-async
                - S      # flake8-bandit
                - BLE    # flake8-blind-except
                - FBT    # flake8-boolean-trap
                - B      # flake8-bugbear
                - A      # flake8-builtins
                - COM    # flake8-commas
                - C4     # flake8-comprehensions
                - DTZ    # flake8-datetimez
                - T10    # flake8-debugger
                - EM     # flake8-errmsg
                - EXE    # flake8-executable
                - FA     # flake8-future-annotations
                - ISC    # flake8-implicit-str-concat
                - ICN    # flake8-import-conventions
                - LOG    # flake8-logging
                - G      # flake8-logging-format
                - PIE    # flake8-pie
                - T20    # flake8-print
                - PYI    # flake8-pyi
                - PT     # flake8-pytest-style
                - Q      # flake8-quotes
                - RSE    # flake8-raise
                - RET    # flake8-return
                - SLF    # flake8-self
                - SLOT   # flake8-slot
                - SIM    # flake8-simplify
                - TID    # flake8-tidy-imports
                - TCH    # flake8-type-checking
                - INT    # flake8-gettext
                - ARG    # flake8-unused-arguments
                - PTH    # flake8-use-pathlib
                - TD     # flake8-todos
                - FIX    # flake8-fixme
                - ERA    # eradicate
                - PD     # pandas-vet
                - PGH    # pygrep-hooks
                - PL     # pylint
                - E      # error
                - R      # refactor
                - W      # warning
                - TRY    # tryceratops
                - FLY    # flynt
                - NPY    # numpy
                - PERF   # perflint
                - FURB   # refurb
                - RUF    # ruff-specific rules
              flake8-annotations:
                allow-star-arg-any: true
                mypy-init-return: true
                suppress-dummy-args: true
                suppress-none-returning: true
              flake8-comprehensions:
                allow-dict-calls-with-keyword-arguments: true
              flake8-type-checking:
                quote-annotations: true
              pydocstyle:
                convention: numpy
              pylint:
                max-args: 10
                max-public-methods: 50
                max-returns: 10
              mccabe:
                max-complexity: 15
    jupyter:
      task:
        jupyterlab:
          name: Open JupyterLab
          script: |
            jupyter-lab / --ContentsManager.allow_hidden=True --IdentityProvider.token=''
      conda:
        jupyterlab:
          description: |
            JupyterLab is a web-based interactive development environment for Jupyter notebooks,
            code, and data.
          url:
            docs: https://jupyterlab.readthedocs.io
            package: https://anaconda.org/conda-forge/jupyterlab
            source: https://github.com/jupyterlab/jupyterlab
        jupyterlab-git:
          description: |
            Git extension for JupyterLab.
          url:
            package: https://anaconda.org/conda-forge/jupyterlab-git
            source: https://github.com/jupyterlab/jupyterlab-git
        jupyterlab-myst:
          description: |
            JupyterLab extension for rendering MyST markdown.
          url:
            docs: https://jupyter-book.github.io/jupyterlab-myst/
            package: https://anaconda.org/conda-forge/jupyterlab-myst
            source: https://github.com/jupyter-book/jupyterlab-myst
        ipywidgets:
          description: |
            Interactive widgets for the Jupyter notebook.
          url:
            docs: https://ipywidgets.readthedocs.io
            package: https://anaconda.org/conda-forge/ipywidgets
            source: https://github.com/jupyter-widgets/ipywidgets
        nb_conda_kernels:
          description: |
            Package for managing conda environment-based kernels inside of Jupyter.
          notes: |
            Each conda environment that has `ipykernel` installed
            will be available as a kernel in Jupyter.
            See also:
            - https://github.com/jupyterlab/jupyterlab/issues/12544#issuecomment-1125754909
            - https://ipython.readthedocs.io/en/stable/install/kernel_install.html#kernels-for-different-environments
            - https://stackoverflow.com/questions/53004311/how-to-add-conda-environment-to-jupyter-lab
          url:
            package: https://anaconda.org/conda-forge/nb_conda_kernels
            source: https://github.com/anaconda/nb_conda_kernels
        qtconsole:
          description: |
            Jupyter QtConsole is a terminal-based console for Jupyter.
          url:
            docs: https://qtconsole.readthedocs.io
            package: https://anaconda.org/conda-forge/qtconsole
            source: https://github.com/jupyter/qtconsole
    anaconda:
      conda:
        anaconda-client:
          description: |
            Client for uploading packages and managing channels in Anaconda.
          spec:
            version: '>=1.13'
          url:
            docs: https://www.anaconda.com/docs/tools/anaconda-org/user-guide/getting-started-with-anaconda-client
            package: https://anaconda.org/conda-forge/anaconda-client
            source: https://github.com/anaconda/anaconda-client
    website:
      conda:
        sphinx:
          spec:
            version: ==8.1.3
          url:
            docs: https://www.sphinx-doc.org/
            package: https://anaconda.org/conda-forge/sphinx
            source: https://github.com/sphinx-doc/sphinx
          data:
            sphinx_config:
              project: ${{ name }}$
              author: ${{ team.owner.name.full }}$
              project_copyright: ${{ copyright }}$
              needs_sphinx: '8.1'
              today_fmt: '%b %d, %Y'
              numfig: true
              numfig_secnum_depth: 3
              pygment_style: default
              show_authors: true
              exclude_patterns:
                - "Thumbs.db"
                - ".DS_Store"
                - ".ipynb_checkpoints"
                - "README.md"
              trim_footnote_reference_space: true
              math_eqref_format: Eq. {number}
              math_number_all: true
              math_numfig: true
              math_numsep: .
              nitpicky: true
              maximum_signature_line_length: 80
              root_doc: index
              templates_path:
                - _templates  # Ref: https://www.sphinx-doc.org/en/master/development/templating.html
              show_warning_types: true
              html_title: ${{ name }}$
              html_short_title: ${{ name }}$
              html_baseurl: ${{ web.url.base }}$
              html_favicon: ${{ web.file.icon.rel_path }}$
              html_sidebars:
                "${{ web.page.blog.path }}$/**":
                  - ablog/postcard.html
                  - ablog/recentposts.html
                  - ablog/tagcloud.html
                  - ablog/categories.html
                  - ablog/archives.html
                  - ablog/authors.html
              html_static_path:
                - _static
                # Due to an issue with the PyData Sphinx Theme,
                #    the logo files used in the navbar must be explicitly
                #    added to the root of static path, since PyData always looks there,
                #    regardless of the set path.
                #    Refs:
                #    - https://github.com/pydata/pydata-sphinx-theme/issues/1325
                #    - https://github.com/pydata/pydata-sphinx-theme/issues/1328
                #    - https://github.com/pydata/pydata-sphinx-theme/issues/1385
                - '${{ web.file.logo_simple_light.rel_path }}$'
                - '${{ web.file.logo_simple_dark.rel_path }}$'
              html_css_files:
                - https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css
              html_js_files:
                - https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js
              html_secnumber_suffix: ". "
              html_extra_path: [ ]
              html_use_opensearch: ${{ web.url.base }}$
              html_show_sphinx: false
              html_math_renderer: mathjax
              html_context:
                # Used by the Giscus template to extract page title
                pp_title_sep: ${{ devcontainer_main.environment.website.conda.sphinx.data.sphinx_config.html_secnumber_suffix }}$
              html_last_updated_fmt: '%b %d, %Y'
              numfig_format:
                code-block: Code %s
                figure: Figure %s
                section: Section
                table: Table %s
              language: en
              latex_engine: lualatex
              latex_elements:
                papersize: a4paper
                pointsize: 11pt
                figure_align: htbp
                fontpkg: |
                  \setmainfont{DejaVu Serif}
                  \setsansfont{DejaVu Sans}
                  \setmonofont{DejaVu Sans Mono}
                preamble: |
                  \usepackage[titles]{tocloft}
                  \usepackage{fontspec}
                  \cftsetpnumwidth {1.25cm}\cftsetrmarg{1.5cm}
                  \setlength{\cftchapnumwidth}{0.75cm}
                  \setlength{\cftsecindent}{\cftchapnumwidth}
                  \setlength{\cftsecnumwidth}{1.25cm}
                fncychap: '\usepackage[Bjornstrup]{fncychap}'
                printindex: '\footnotesize\raggedright\printindex'
              latex_theme: manual
              latex_show_urls: footnote
              latex_show_pagerefs: true
              latex_logo: ${{ web.file.logo_full_raster.rel_path }}$
              python_display_short_literal_types: true
              python_maximum_signature_line_length: 80
              # ----- Builtin Extensions ------
              # https://www.sphinx-doc.org/en/master/usage/extensions/index.html#built-in-extensions
              extensions:
                - sphinx.ext.duration
                - sphinx.ext.graphviz
                - sphinx.ext.inheritance_diagram
                # Add links to external documentation:
                # Also required for the ABlog extension.
                # - https://ablog.readthedocs.io/en/stable/index.html#getting-started
                - sphinx.ext.intersphinx
                # Add external links to source code:
                # For configuration see `linkcode_resolve` function in `conf.py`.
                - sphinx.ext.linkcode
              # Config for sphinx.ext.intersphinx:
              # - https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html
              intersphinx_mapping:
                # When `intersphinx_registry` (see `env` key) is used,
                # you can specify keys without values;
                # these will be automatically filled in by the registry.
                python: [ 'https://docs.python.org/3/', null ]
                numpy: null
                scipy: null
                matplotlib: null
        pydata-sphinx-theme:
          spec:
            version: ==0.16.1
          url:
            docs: https://pydata-sphinx-theme.readthedocs.io/
            package: https://anaconda.org/conda-forge/pydata-sphinx-theme
            source: https://github.com/pydata/pydata-sphinx-theme
          data:
            sphinx_config:
              html_theme: pydata_sphinx_theme
              html_theme_options:
                # ---- Section Layout ----
                # https://pydata-sphinx-theme.readthedocs.io/en/stable/user_guide/layout.html#references
                # -- Header --
                navbar_start: [ navbar-logo ]  # header left
                navbar_center: [ navbar-nav ]  # header center
                navbar_persistent: [ search-button, theme-switcher, user_login_button ]  # header right persistent
                navbar_end: [ navbar-icon-links ]  # header right
                navbar_align: left  # alignment of `navbar_center`: {"left", "right", "content"}
                # -- Article Header --
                article_header_start: [ breadcrumbs ]  # article header left
                article_header_end: [ ]  # article header right
                # -- Article Footer --
                article_footer_items: [ ]  # article footer
                # -- Primary Sidebar (left) --
                primary_sidebar_end: [ ]  # left sidebar bottom
                # -- Secondary Sidebar (right) --
                secondary_sidebar_items:
                  - page-toc
                  - last-updated
                  - edit-this-page
                # -- Content Footer --
                content_footer_items: [ user_login_dialog ]
                # -- Footer --
                footer_start: [ footer_badges ]  # footer left
                footer_center: [ ]  # footer center
                footer_end: [ quicklinks ]  # footer right
                # ---- General ----
                show_prev_next: True
                show_nav_level: 1
                navigation_depth: 5
                show_toc_level: 5
                header_links_before_dropdown: 7
                icon_links:
                  - name: Source Repository
                    icon: fa-brands fa-github
                    url: ${{ repo.url.home }}$
                  - name: Issues
                    icon: fa-regular fa-circle-dot
                    url: ${{ repo.url.issues.home }}$
                  - name: Pull Requests
                    icon: fa-solid fa-code-pull-request
                    url: ${{ repo.url.pulls.home }}$
                  - name: Discussions
                    icon: fa-solid fa-comments
                    url: ${{ repo.url.discussions.home }}$
                  - name: License
                    icon: fa-solid fa-copyright
                    url: ${{ web.page.license.url }}$
                icon_links_label: External links
                use_edit_page_button: true
                announcement: ${{ web.announcement.url }}$
                search_bar_text: Search ${{ name }}$
                back_to_top_button: true
                logo:
                  image_light: _static/simple_light.svg
                  image_dark: _static/simple_dark.svg
                  alt_text: ${{ name }}$
                pygments_light_style: default  # Code highlighting color themes. See: https://pygments.org/styles/
                pygments_dark_style: monokai   # https://pydata-sphinx-theme.readthedocs.io/en/stable/user_guide/styling.html#configure-pygments-theme
                sidebarwidth: 270
                sidebar_includehidden: True
                # ---- Analytics ----
                analytics:
                  google_analytics_id: G-0X66W6TGL2
              html_context:
                github_user: ${{ repo.owner }}$
                github_repo: ${{ repo.name }}$
                github_version: ${{ repo.default_branch }}$
                doc_path: ${{ web.path.source }}$
                default_mode: auto  # Default theme mode: {'light', 'dark', 'auto'}
        # ---- Third-Party Sphinx Extensions ----
        # Resources:
        # - https://www.sphinx-doc.org/en/master/usage/extensions/index.html#third-party-extensions
        myst-nb:
          description: Adding MyST Markdown and Jupyter support to Sphinx.
          spec:
            version: ==1.2.0
          url:
            docs: https://myst-parser.readthedocs.io/
            package: https://anaconda.org/conda-forge/myst-nb
            source: https://github.com/executablebooks/MyST-Parser
          notes: |
            MyST-NB is built on top of [MyST-Parser](https://myst-parser.readthedocs.io/)
            and exposes all of its functionalities. It also includes support for Jupyter Notebooks.
            When using MyST-NB, MyST-Parser must not be included separately.
          data:
            sphinx_config:
              extensions: [ myst_nb ]
              # ---- MyST Parser Configurations ----
              # Ref: https://myst-parser.readthedocs.io/en/latest/configuration.html
              myst_enable_extensions: # https://myst-parser.readthedocs.io/en/latest/syntax/optional.html
                - amsmath
                - attrs_inline
                - attrs_block
                - colon_fence
                - deflist
                - dollarmath
                - fieldlist
                - html_admonition
                - html_image
                - linkify
                - replacements
                - smartquotes
                - substitution
                - tasklist
              myst_links_external_new_tab: true
              myst_heading_anchors: 6
              myst_fence_as_directive: [ mermaid ]  # https://github.com/mgaitan/sphinxcontrib-mermaid?tab=readme-ov-file#markdown-support
              myst_linkify_fuzzy_links: false
        sphinx-design:
          description: Adding responsive web components, such as grids, cards, tabs, etc.
          spec:
            version: ==0.6.1
          url:
            docs: https://sphinx-design.readthedocs.io/
            package: https://anaconda.org/conda-forge/sphinx-design
            source: https://github.com/executablebooks/sphinx-design
          data:
            sphinx_config:
              extensions: [ sphinx_design ]
              sd_fontawesome_latex: true
        sphinx-external-toc:
          description: Adding external table of contents to Sphinx.
          spec:
            version: ==1.0.1
          url:
            docs: https://sphinx-external-toc.readthedocs.io
            package: https://anaconda.org/conda-forge/sphinx-external-toc
            source: https://github.com/executablebooks/sphinx-external-toc
          data:
            sphinx_config:
              extensions: [ sphinx_external_toc ]
              suppress_warnings: [ etoc.toctree ]
              external_toc_path: ${{ file_web_toc.data.rel_path }}$
              external_toc_exclude_missing: false
        ablog:
          description: Adding a news blog to the website.
          spec:
            version: ==0.11.12
          url:
            docs: https://ablog.readthedocs.io/
            package: https://anaconda.org/conda-forge/ablog
            source: https://github.com/sunpy/ablog
          data:
            sphinx_config:
              # https://ablog.readthedocs.io/en/stable/manual/ablog-configuration-options.html
              extensions: [ ablog, sphinx.ext.intersphinx ]
              blog_baseurl: ${{ web.url.base }}$
              blog_default_author: owner
              blog_feed_archives: true
              blog_path: ${{ web.page.blog.path }}$/list
              blog_post_pattern:
                - ${{ web.page.blog.path }}$/post/*.md
              post_show_prev_next: false
              blog_title: ${{ name }}$ News
              fontawesome_included: true
              post_always_section: true
              post_auto_image: 1
              blog_authors: |
                #{{
                  web_url = get("web.url.home")
                  blog_authors = {}
                  for person_id, person in get("team").items():
                      if "website" in person:
                          url = person["website"]
                      else:
                          for contact_type in ("github", "twitter", "linkedin", "researchgate", "orcid", "email"):
                              if contact_type in person:
                                  url = person[contact_type]["url"]
                                  break
                          else:
                              url = web_url
                      blog_authors[person_id] = [person["name"]["full"], url]
                  return blog_authors
                }}#
        sphinx-copybutton:
          description: Adding a copy button to code blocks.
          spec:
            version: ==0.5.2
          url:
            docs: https://sphinx-copybutton.readthedocs.io/
            package: https://anaconda.org/conda-forge/sphinx-copybutton
            source: https://github.com/executablebooks/sphinx-copybutton
          data:
            sphinx_config:
              extensions: [ sphinx_copybutton ]
        sphinxext-opengraph:
          description: |
            Generating [Open Graph](https://ogp.me/) metadata for each page.
          spec:
            version: ==0.9.1
          url:
            docs: https://sphinxext-opengraph.readthedocs.io/
            package: https://anaconda.org/conda-forge/sphinxext-opengraph
            source: https://github.com/wpilibsuite/sphinxext-opengraph/
          data:
            sphinx_config:
              extensions: [ sphinxext.opengraph ]
              ogp_site_url: ${{ web.url.base }}$
              ogp_use_first_image: true
              ogp_enable_meta_description: true
              ogp_social_cards:
                image: _static/simple_light.svg
                line_color: ${{ theme.color.primary.light }}$
        sphinxcontrib-bibtex:
          description: Adding BibTeX-style citations.
          spec:
            version: ==2.6.3
          url:
            docs: https://sphinxcontrib-bibtex.readthedocs.io/
            package: https://anaconda.org/conda-forge/sphinxcontrib-bibtex
            source: https://github.com/mcmtroffaes/sphinxcontrib-bibtex
          data:
            sphinx_config:
              extensions: [ sphinxcontrib.bibtex ]
              bibtex_bibfiles: [ refs.bib ]
              bibtex_default_style: plain
              bibtex_reference_style: label
        sphinx-togglebutton:
          description: Adding toggle buttons to admonitions and other content.
          spec:
            version: ==0.3.2
          url:
            docs: https://sphinx-togglebutton.readthedocs.io/
            package: https://anaconda.org/conda-forge/sphinx-togglebutton
            source: https://github.com/executablebooks/sphinx-togglebutton
          data:
            sphinx_config:
              extensions: [ sphinx_togglebutton ]
              # https://sphinx-togglebutton.readthedocs.io/en/latest/use.html#change-the-button-hint-text
              togglebutton_hint: show details
              togglebutton_hint_hide: hide details
        sphinxcontrib-mermaid:
          description: Adding Mermaid diagrams and charts.
          spec:
            version: ==1.0.0
          url:
            docs: https://sphinxcontrib-mermaid-demo.readthedocs.io/en/stable/
            package: https://anaconda.org/conda-forge/sphinxcontrib-mermaid
            source: https://github.com/mgaitan/sphinxcontrib-mermaid
          data:
            sphinx_config:
              extensions: [ sphinxcontrib.mermaid ]
        sphinx-thebe:
          description: Make code cells interactive in Sphinx.
          spec:
            version: ==0.3.1
          url:
            docs: https://sphinx-thebe.readthedocs.io
            package: https://anaconda.org/conda-forge/sphinx-thebe
            source: https://github.com/executablebooks/sphinx-thebe
          data:
            sphinx_config:
              extensions: [ sphinx_thebe ]
        # ---- Non-extension Dependencies ----
        myst-parser:
          description: Adding MyST Markdown functionalities to Sphinx.
          notes: |
            This is added as a dependency and not an extension
            because the MyST-NB extension (a superset of MyST-Parser) is used as an extension,
            which already includes MyST-Parser.
            However, here we specifically include MyST-Parser to ensure the correct version is installed.
          spec:
            version: ==4.0.1
          url:
            docs: https://myst-parser.readthedocs.io/
            package: https://anaconda.org/conda-forge/myst-parser
            source: https://github.com/executablebooks/MyST-Parser
        linkify-it-py:
          description: |
            Linkify extension for MyST Markdown to automatically convert URLs to hyperlinks.
          spec:
            version: ==2.0.3
          url:
            docs: https://myst-parser.readthedocs.io/en/latest/syntax/optional.html#linkify
            package: https://anaconda.org/conda-forge/linkify-it-py
        librsvg:
          description: |
            Library for rendering SVG files and using them
            in PDF (via LaTeX) builds done by latexmk.
          spec:
            version: ==2.58.4
          url:
            docs: https://wiki.gnome.org/Projects/LibRsvg
            package: https://anaconda.org/conda-forge/librsvg
            source: https://gitlab.gnome.org/GNOME/librsvg
        libffi:
          description: |
            Library for handling Foreign Function Interface (FFI) calls.
            This is a dependency of `CairoSVG`, which is used by `sphinxcontrib-svg2pdfconverter`.
          spec:
            version: ==3.4.6
          url:
            docs: https://sourceware.org/libffi/
            package: https://anaconda.org/conda-forge/libffi
            source: https://github.com/libffi/libffi
        cairo:
          description: |
            Library for rendering 2D graphics.
            This is a dependency of `CairoSVG`, which is used by `sphinxcontrib-svg2pdfconverter`.
          spec:
            version: ==1.18.2
          url:
            docs: https://cairographics.org/
            package: https://anaconda.org/conda-forge/cairo
            source: https://gitlab.freedesktop.org/cairo/cairo
        intersphinx-registry:
          description: |
            Registry of intersphinx mappings for external documentation.
          url:
            package: https://anaconda.org/conda-forge/intersphinx-registry
            source: https://github.com/Quansight-labs/intersphinx_registry
      pip:
        # ---- Third-Party Sphinx Extensions ----
        sphinx-last-updated-by-git:
          description: Adding page-specific last-updated dates to each page.
          spec:
            version: ==0.3.8
          url:
            docs: https://sphinx-last-updated-by-git.readthedocs.io/
            package: https://pypi.org/project/sphinx-last-updated-by-git/
            source: https://github.com/mgeier/sphinx-last-updated-by-git
          data:
            sphinx_config:
              extensions: [ sphinx_last_updated_by_git ]
        sphinxcontrib-svg2pdfconverter:
          description: Converting SVG images to PNG for LaTeX.
          spec:
            version: ==1.2.3
            extras: [ CairoSVG ]
          url:
            package: https://pypi.org/project/sphinxcontrib-svg2pdfconverter/
            source: https://github.com/missinglinkelectronics/sphinxcontrib-svg2pdfconverter
          data:
            sphinx_config:
              extensions: [ sphinxcontrib.rsvgconverter ]
          notes: |
            This doesn't work on `latex_logo`;
            see [nbsphinx](https://nbsphinx.readthedocs.io/en/latest/markdown-cells.html).
        sphinx-tippy:
          description: Adding rich hover tooltips to content.
          spec:
            version: ==0.4.3
          url:
            docs: https://sphinx-tippy.readthedocs.io
            package: https://pypi.org/project/sphinx_tippy/
            source: https://github.com/sphinx-extensions2/sphinx-tippy
          data:
            sphinx_config:
              extensions: [ sphinx_tippy ]
              tippy_props:
                placement: auto-start  # https://atomiks.github.io/tippyjs/v6/all-props/#placement
                maxWidth: 500  # https://atomiks.github.io/tippyjs/v6/all-props/#maxwidth
                theme: material  # https://atomiks.github.io/tippyjs/v6/all-props/#theme
                interactive: true  # https://atomiks.github.io/tippyjs/v6/all-props/#interactive
                delay: [ 200, 500 ]  # https://atomiks.github.io/tippyjs/v6/all-props/#delay
                duration: [ 200, 100 ]  # https://atomiks.github.io/tippyjs/v6/all-props/#duration
        sphinx-notfound-page:
          description: Handling relative links in the custom 404 page.
          spec:
            version: ==1.1.0
          url:
            docs: https://sphinx-notfound-page.readthedocs.io/
            package: https://pypi.org/project/sphinx-notfound-page/
            source: https://github.com/readthedocs/sphinx-notfound-page
          data:
            sphinx_config:
              extensions: [ notfound.extension ]
              notfound_urls_prefix: /${{ repo.name }}$/
        jsonschema-autodoc:
          url:
            package: https://pypi.org/project/jsonschema-autodoc/
          data:
            sphinx_config:
              extensions: [ jsonschema_autodoc.sphinx ]
        # ---- Non-extension Dependencies ----
        sphinx-autobuild:
          description: Automatically rebuilding the documentation when changes are made.
          spec:
            version: ==2024.10.03
          url:
            package: https://pypi.org/project/sphinx-autobuild/
            source: https://github.com/sphinx-doc/sphinx-autobuild
        pygments-git:
          description: |
            Pygments lexer for Git files and outputs.
          spec:
            version: ==1.8.0
          url:
            package: https://pypi.org/project/pygments-git/
            source: https://github.com/adamchainz/pygments-git
      task:
        build:
          name: Build Website
          description: Build the website using Sphinx.
          process: [ bash, '${{ file_script_web_build.path }}$' ]
        live:
          name: Live Website Preview
          description: |
            Start a live preview server for the website.
            This will automatically rebuild the website when changes are made.
          process: [ bash, '${{ file_script_web_livehtml.path }}$' ]
  task:
    project_manager:
      name: Project Management
      summary: Main project management CLI.
      alias: project
      process:
        - ${{ __temp__.conda_env_name.manager }}$
        - proman
        - $@
    build-oj-paper:
      # https://github.com/openjournals/inara
      name: Build Open-Journals Paper
      description: |
        Build paper using the Open-Journals Inara service.
        For publishing to JOSE or ReScience C (instead of JOSS),
        set the `JOURNAL` environment variable to `jose` or `resciencec`, respectively.
      script: |
        docker exec -it ${{ devcontainer.docker-compose.config.services.openjournals.container_name }}$ \
          inara -o pdf -p -v $1
      notes: |
        This uses the [inara](https://github.com/openjournals/inara/blob/main/Dockerfile) Docker image.
        See the entry [script](https://github.com/openjournals/inara/blob/main/scripts/entrypoint.sh)
        for more details.
  volume:
    globalrc:
      name: Global Shell Configuration
      path: /etc/globalrc
      content: |
        # Set $USER to current user if not already set.
        # - Ref: https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/common-utils/scripts/rc_snippet.sh#L1
        if [ -z "${USER}" ]; then export USER=$(whoami); fi

        # Ensure that "$HOME/.local/bin" is in $PATH
        # - Ref: https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/common-utils/scripts/rc_snippet.sh#L2
        if [[ "${PATH}" != *"$HOME/.local/bin"* ]]; then export PATH="${PATH}:$HOME/.local/bin"; fi

        # Source conda and mamba activation scripts.
        . "${{ devcontainer_main.var.conda.conda_script }}$"
        . "${{ devcontainer_main.var.conda.mamba_script }}$"

        # Activate conda environment.
        mamba activate ${{ devcontainer_main.var.conda.activate }}$

        # Set the default git editor if not already set
        # - Ref: https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/common-utils/scripts/rc_snippet.sh#L16-L25
        if [ -z "$(git config --get core.editor)" ] && [ -z "${GIT_EDITOR}" ]; then
            if  [ "${TERM_PROGRAM}" = "vscode" ]; then
                if [[ -n $(command -v code-insiders) &&  -z $(command -v code) ]]; then
                    export GIT_EDITOR="code-insiders --wait"
                else
                    export GIT_EDITOR="code --wait"
                fi
            fi
        fi
    bashenv:
      name: Bash Environment
      path: /etc/bash/bashenv
      content: |
        # Set XDG base directories
        export XDG_CACHE_HOME="${HOME}/.cache"
        export XDG_CONFIG_HOME="${HOME}/.config"
        export XDG_DATA_HOME="${HOME}/.local/share"
        export XDG_STATE_HOME="${HOME}/.local/state"

        # Source project tasks file.
        . "${{ devcontainer_main.container.workspaceFolder }}$/${{ devcontainer_main.path.tasks_local }}$"

        # From default zshenv file created by the `zsh-common` apt package.
        if [[ -z "$PATH" || "$PATH" == "/bin:/usr/bin" ]]; then
            export PATH="/usr/local/bin:/usr/bin:/bin:/usr/games"
        fi
    bash_profile:
      name: Global Shell Profile
      summary: System-wide profile for all Bourne-compatible shells.
      path: /etc/profile
      content: |
        if [ "${PS1-}" ]; then
            # The shell is interactive.
            if [ "${BASH-}" ] && [ "$BASH" != "/bin/sh" ]; then
                # The shell is bash.
                if [ -f /etc/bash.bashrc ]; then
                    # Source the system-wide bashrc file.
                    . /etc/bash.bashrc
                fi
            else
                # The shell is not bash.
                # Set the prompt to a simple $ or #.
                if [ "$(id -u)" -eq 0 ]; then
                    PS1='# '
                else
                    PS1='$ '
                fi
            fi
        fi

        if [ -d /etc/profile.d ]; then
            for i in /etc/profile.d/*.sh; do
                if [ -r $i ]; then
                    . $i
                fi
            done
            unset i
        fi
      description: |
        This is the system-wide profile file for all Bourne-compatible shells
        (e.g. bash, zsh, sh).
        It is sourced by all Bourne-compatible shells when they start up.
        It is intended for system-wide settings that should be applied to all users
        and all Bourne-compatible shells.

        The full order of reading shell startup files is as follows:
        1. `/etc/profile`
        2. `/etc/bash.bashrc` (if bash)
        3. `/etc/profile.d/*.sh`
    bashrc:
      path: /etc/bash.bashrc
      content: |
        # #{{ return "=" * 50 }}#
        # ${{ name }}$
        # #{{ return "=" * 50 }}#
        # This section is automatically generated.

        # If not running interactively, don't do anything
        [ -z "$PS1" ] && return

        # Set source marker
        export ${{ devcontainer_main.var.bash.global_bashrc_source_marker }}$=1

        # Source global rc
        . "${{ devcontainer_main.volume.globalrc.path }}$"

        # Source theme
        . "${{ devcontainer_main.volume.bash_theme.path }}$"

        # Shell Options
        # =============
        # Check the window size after each command
        # and update the values of LINES and COLUMNS if necessary.
        shopt -s checkwinsize

        # Bash Completion
        # ===============
        # Enable bash completion in interactive shells.
        if ! shopt -oq posix; then
            if [ -f /usr/share/bash-completion/bash_completion ]; then
                . /usr/share/bash-completion/bash_completion
            elif [ -f /etc/bash_completion ]; then
                . /etc/bash_completion
            fi
        fi

        # SUDO Hint
        if [ ! -e "$HOME/.sudo_as_admin_successful" ] && [ ! -e "$HOME/.hushlogin" ]; then
            case " $(groups) " in
                *\ admin\ *|*\ sudo\ *)
                    if [ -x /usr/bin/sudo ]; then
                        cat <<EOF
        To run a command as administrator (user "root"), use "sudo <command>".
        See "man sudo_root" for details.

        EOF
                    fi
                    ;;
            esac
        fi

        # Use the command-not-found package if available.
        if [ -x /usr/lib/command-not-found -o -x /usr/share/command-not-found/command-not-found ]; then
          function command_not_found_handle {
                  # check because c-n-f could've been removed in the meantime
                        if [ -x /usr/lib/command-not-found ]; then
              /usr/lib/command-not-found -- "$1"
                          return $?
                        elif [ -x /usr/share/command-not-found/command-not-found ]; then
              /usr/share/command-not-found/command-not-found -- "$1"
                          return $?
            else
              printf "%s: command not found\n" "$1" >&2
              return 127
            fi
          }
        fi

        # #{{ return "=" * 50 }}#
        # END OF ${{ name }}$ SECTION
        # #{{ return "=" * 50 }}#
    bash_theme:
      name: Bash Theme
      summary: Bash theme for all users.
      path: /etc/bash/bash_theme
      content: |
        # Bash Theme
        # - Ref: https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/common-utils/scripts/bash_theme_snippet.sh

        __bash_prompt() {
            local userpart='`export XIT=$? \
                && [ ! -z "${GITHUB_USER:-}" ] && echo -n "\[\033[0;32m\]@${GITHUB_USER:-} " || echo -n "\[\033[0;32m\]\u " \
                && [ "$XIT" -ne "0" ] && echo -n "\[\033[1;31m\]➜" || echo -n "\[\033[0m\]➜"`'
            local gitbranch='`\
                if [ "$(git config --get devcontainers-theme.hide-status 2>/dev/null)" != 1 ] && [ "$(git config --get codespaces-theme.hide-status 2>/dev/null)" != 1 ]; then \
                    export BRANCH="$(git --no-optional-locks symbolic-ref --short HEAD 2>/dev/null || git --no-optional-locks rev-parse --short HEAD 2>/dev/null)"; \
                    if [ "${BRANCH:-}" != "" ]; then \
                        echo -n "\[\033[0;36m\](\[\033[1;31m\]${BRANCH:-}" \
                        && if [ "$(git config --get devcontainers-theme.show-dirty 2>/dev/null)" = 1 ] && \
                            git --no-optional-locks ls-files --error-unmatch -m --directory --no-empty-directory -o --exclude-standard ":/*" > /dev/null 2>&1; then \
                                echo -n " \[\033[1;33m\]✗"; \
                        fi \
                        && echo -n "\[\033[0;36m\]) "; \
                    fi; \
                fi`'
            local lightblue='\[\033[1;34m\]'
            local removecolor='\[\033[0m\]'
            PS1="${userpart} ${lightblue}\w ${gitbranch}${removecolor}\$ "
            unset -f __bash_prompt
        }
        __bash_prompt
        export PROMPT_DIRTRIM=4

        # Check if the terminal is xterm
        if [[ "$TERM" == "xterm" ]]; then
            # Function to set the terminal title to the current command
            preexec() {
                local cmd="${BASH_COMMAND}"
                echo -ne "\033]0;${USER}@${HOSTNAME}: ${cmd}\007"
            }

            # Function to reset the terminal title to the shell type after the command is executed
            precmd() {
                echo -ne "\033]0;${USER}@${HOSTNAME}: ${SHELL}\007"
            }

            # Trap DEBUG signal to call preexec before each command
            trap 'preexec' DEBUG

            # Append to PROMPT_COMMAND to call precmd before displaying the prompt
            PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND; }precmd"
        fi
    zshenv:
      name: Global Zsh Environment
      summary: Zsh `zshenv` startup file for all users.
      path: ${{ devcontainer_main.var.zsh.global_config_dir }}$/zshenv
      content: |
        # Source bashenv
        emulate sh -c 'source "${{ devcontainer_main.volume.bashenv.path }}$"'

        # Set ZDOTDIR
        ZDOTDIR="${XDG_CONFIG_HOME}/zsh"
      description: |
        This file is universally loaded by all Zsh shell invocations
        (login/non-login, interactive/non-interactive).
        It is the first startup file that is loaded,
        and is intended for global settings
        that should be applied to all users and Zsh sessions.
        If the -f flag is present or if the NO_RCS option is
        set within this file, all other initialization files
        are skipped.

        This file should contain commands to set the command
        search path, plus other important environment variables.
        It should not contain commands that produce output
        or assume the shell is attached to a tty.

        The full order of reading Zsh startup files is as follows:
        1. `/etc/zsh/zshenv`
        2. `$ZDOTDIR/.zshenv`
        3. `/etc/zsh/zprofile` (if login shell)
        4. `$ZDOTDIR/.zprofile` (if login shell)
        5. `/etc/zsh/zshrc` (if interactive shell)
        6. `$ZDOTDIR/.zshrc` (if interactive shell)
        7. `/etc/zsh/zlogin` (if login shell)
        8. `$ZDOTDIR/.zlogin` (if login shell)

        If `$ZDOTDIR` is not set, it defaults to `$HOME` (i.e., the user's home directory).
        This clobbers the user's home directory, and is against the
        [XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/latest/).
        It is [recommended](https://wiki.archlinux.org/title/XDG_Base_Directory#Partial)
        to set `XDG_CONFIG_HOME` and then set `$ZDOTDIR` to `$XDG_CONFIG_HOME/zsh`.
        This [can be done](https://www.reddit.com/r/zsh/comments/iq89wr/comment/g4soljs/)
        in this file, so that $ZDOTDIR is automatically set for all users.

        Note that here we assume the global config directory is `/etc/zsh`.
        This is the case for most Linux distributions.
        However, Red Hat-based distributions and macOS use `/etc/` instead
        (cf. [`common-utils` Devcontainer Feature](https://github.com/devcontainers/features/blob/8895eb3d161d28ada3a8de761a83135e811cae3d/src/common-utils/main.sh#L510-L514))

        References:
        - [Startup/Shutdown Files, Zsh docs](https://zsh.sourceforge.io/Doc/Release/Files.html#Files)
        - [Startup/Shutdown Files, ArchWiki Zsh](https://wiki.archlinux.org/title/Zsh#Startup/Shutdown_files)
        - [How Do Zsh Configuration Files Work? freeCodeCamp 2024](https://www.freecodecamp.org/news/how-do-zsh-configuration-files-work/)
    zprofile:
      name: Global Zsh Profile
      summary: Zsh `zprofile` startup file for all users.
      path: ${{ devcontainer_main.var.zsh.global_config_dir }}$/zprofile
      type: txt
      content: |
        test -f /etc/profile && emulate sh -c 'source /etc/profile'
      description: |
        This is the second system-wide Zsh startup file that is loaded
        after `zshenv`.
        It is sourced only for login shells (i.e. shells
        invoked with "-" as the first character of argv[0], and
        shells invoked with the -l flag).

        In most cases (e.g. [Arch Linux](https://gitlab.archlinux.org/archlinux/packaging/packages/zsh/-/blob/main/zprofile)),
        this file only contains a single command to source `/etc/profile`,
        which is the system-wide profile file for all Bourne-compatible shells (e.g. Bash, Dash, etc.).
    zshrc:
      path: /etc/zsh/zshrc
      content: |
        # #{{ return "=" * 50 }}#
        # ${{ name }}$
        # #{{ return "=" * 50 }}#
        # This section is automatically generated.

        # Set source marker
        export ${{ devcontainer_main.var.zsh.global_zshrc_source_marker }}$=1

        # Source global rc
        . "${{ devcontainer_main.volume.globalrc.path }}$"

        # From default zshrc file created by the `zsh-common` apt package.
        # ================================================================
        READNULLCMD=${PAGER:-/usr/bin/pager}

        # An array to note missing features to ease diagnosis in case of problems.
        typeset -ga debian_missing_features

        if [[ -z "${DEBIAN_PREVENT_KEYBOARD_CHANGES-}" ]] &&
          [[ "$TERM" != 'emacs' ]]
        then

            typeset -A key
            key=(
                BackSpace  "${terminfo[kbs]}"
                Home       "${terminfo[khome]}"
                End        "${terminfo[kend]}"
                Insert     "${terminfo[kich1]}"
                Delete     "${terminfo[kdch1]}"
                Up         "${terminfo[kcuu1]}"
                Down       "${terminfo[kcud1]}"
                Left       "${terminfo[kcub1]}"
                Right      "${terminfo[kcuf1]}"
                PageUp     "${terminfo[kpp]}"
                PageDown   "${terminfo[knp]}"
            )

            function bind2maps () {
                local i sequence widget
                local -a maps

                while [[ "$1" != "--" ]]; do
                    maps+=( "$1" )
                    shift
                done
                shift

                sequence="${key[$1]}"
                widget="$2"

                [[ -z "$sequence" ]] && return 1

                for i in "${maps[@]}"; do
                    bindkey -M "$i" "$sequence" "$widget"
                done
            }

            bind2maps emacs             -- BackSpace   backward-delete-char
            bind2maps       viins       -- BackSpace   vi-backward-delete-char
            bind2maps             vicmd -- BackSpace   vi-backward-char
            bind2maps emacs             -- Home        beginning-of-line
            bind2maps       viins vicmd -- Home        vi-beginning-of-line
            bind2maps emacs             -- End         end-of-line
            bind2maps       viins vicmd -- End         vi-end-of-line
            bind2maps emacs viins       -- Insert      overwrite-mode
            bind2maps             vicmd -- Insert      vi-insert
            bind2maps emacs             -- Delete      delete-char
            bind2maps       viins vicmd -- Delete      vi-delete-char
            bind2maps emacs viins vicmd -- Up          up-line-or-history
            bind2maps emacs viins vicmd -- Down        down-line-or-history
            bind2maps emacs             -- Left        backward-char
            bind2maps       viins vicmd -- Left        vi-backward-char
            bind2maps emacs             -- Right       forward-char
            bind2maps       viins vicmd -- Right       vi-forward-char

            # Make sure the terminal is in application mode, when zle is
            # active. Only then are the values from $terminfo valid.
            if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
                function zle-line-init () {
                    emulate -L zsh
                    printf '%s' ${terminfo[smkx]}
                }
                function zle-line-finish () {
                    emulate -L zsh
                    printf '%s' ${terminfo[rmkx]}
                }
                zle -N zle-line-init
                zle -N zle-line-finish
            else
                for i in {s,r}mkx; do
                    (( ${+terminfo[$i]} )) || debian_missing_features+=($i)
                done
                unset i
            fi

            unfunction bind2maps

        fi # [[ -z "$DEBIAN_PREVENT_KEYBOARD_CHANGES" ]] && [[ "$TERM" != 'emacs' ]]

        zstyle ':completion:*:sudo:*' command-path /usr/local/sbin \
                                                  /usr/local/bin  \
                                                  /usr/sbin       \
                                                  /usr/bin        \
                                                  /sbin           \
                                                  /bin            \
                                                  /usr/X11R6/bin

        (( ${+aliases[run-help]} )) && unalias run-help
        autoload -Uz run-help

        # If you don't want compinit called here, place the line
        # skip_global_compinit=1
        # in your $ZDOTDIR/.zshenv
        if (( ${${(@f)"$(</etc/os-release)"}[(I)ID*=*ubuntu]} )) &&
          [[ -z "$skip_global_compinit" ]]; then
          autoload -U compinit
          compinit
        fi

        # #{{ return "=" * 50 }}#
        # END OF ${{ name }}$ SECTION
        # #{{ return "=" * 50 }}#
      description: |
        References:
        - [Oh My Zsh settings](https://github.com/ohmyzsh/ohmyzsh/wiki/Settings)
        - [Oh My Zsh zshrc templates](https://github.com/ohmyzsh/ohmyzsh/blob/master/templates)
  file:
    apt_install_script:
      status: inactive
      name: APT Installation Script
      summary: Script to install packages using apt-get.
      type: exec
      path: ${{ devcontainer_main.path.apt.root }}$/install.sh
    conda_install_script:
      status: inactive
      name: Conda Installation Script
      summary: Script to install conda and mamba on the system.
      type: exec
      path: ${{ devcontainer_main.path.conda.root }}$/install.sh
      description: |
        References:
        - [Miniforge Devcontainer Feature](https://github.com/rocker-org/devcontainer-features/tree/main/src/miniforge)
        - [Miniconda Devcontainer image](https://github.com/devcontainers/images/tree/main/src/miniconda)
    conda_env_install_script:
      status: inactive
      name: Conda Environment Installation Script
      summary: Script to install conda environment on the system.
      type: exec
      path: ${{ devcontainer_main.path.conda.root }}$/install-envs.sh
    git_install_script:
      status: inactive
      name: Git Installation Script
      summary: Script to install Git on the system.
      type: exec
      path: ${{ devcontainer_main.path.environment }}$/git/install.sh
    oh_my_zsh_install_script:
      status: inactive
      name: Oh My Zsh Installation Script
      summary: Script to install [Oh My Zsh](https://github.com/ohmyzsh/ohmyzsh) on the system.
      path: ${{ devcontainer_main.path.environment }}$/oh-my-zsh/install.sh
      type: exec
      description: |
        References:
        - [Oh My Zsh installation guide](https://github.com/ohmyzsh/ohmyzsh?tab=readme-ov-file#manual-installation)
        - [Oh My Zsh installation script](https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh)
        - [Powerlevel10k theme](https://github.com/romkatv/powerlevel10k?tab=readme-ov-file#installation)
      notes: |
        [ZSH](https://www.zsh.org) must be installed on the system
        (cf [Oh My Zsh docs](https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH)).
    texlive_install_script:
      status: inactive
      name: TeX Live Installation Script
      summary: Script to install TeX Live on the system.
      type: exec
      path: ${{ devcontainer_main.path.environment }}$/texlive/install.sh
      description: |
        References:
        - [TeX Live installer documentation](https://www.tug.org/texlive/doc/install-tl.html)
        - [TeX Live Installation Guide](https://www.tug.org/texlive/doc/texlive-en/texlive-en.html#x1-140003)
        Examples:
        - [Island of TeX Docker image](https://gitlab.com/islandoftex/images/texlive)
        - [github.com/xu-cheng/latex-docker](https://github.com/xu-cheng/latex-docker)
        - [github.com/scottkosty/install-tl-ubuntu](https://github.com/scottkosty/install-tl-ubuntu)
        - [texlive-batch-installation](https://github.com/maxnoe/texlive-batch-installation)
    texlive_install_profile:
      name: TeX Live Installation Profile
      summary: Profile for installing TeX Live.
      type: txt
      path: ${{ devcontainer_main.path.environment }}$/texlive/install.profile
      data:
        scheme: scheme-full
        path:
          system:
            texdir: /usr/local/texlive
            texmflocal: /usr/local/texlive/texmf
            texmfsysconfig: /usr/local/texlive/texmf-config
            texmfsysvar: /usr/local/texlive/texmf-var
          user:
            texmfhome: ~/texlive/texmf
            texmfconfig: ~/texlive/texmf-config
            texmfvar: ~/texlive/texmf-var
        instopt:
          adjustpath: 0
          adjustrepo: 1
          letter: 0
          portable: 0
          write18_restricted: 1
        tlpdbopt:
          # Number of backups to keep (default: 1)
          autobackup: 0
          # Directory for backups (default: tlpkg/backups)
          backupdir: tlpkg/backups
          # Generate formats at installation or update (default: 1)
          create_formats: 1
          # (Windows) Create Start menu shortcuts (default: 1)
          desktop_integration: 1
          # (Windows) Change file associations (default: 1)
          file_assocs: 1
          # Run tlmgr generate updmap after maps have changed (default: 0)
          generate_updmap: 0
          # Install documentation files (default: 1)
          install_docfiles: 0
          # Install source files (default: 1)
          install_srcfiles: 0
          # Run postinst code blobs (default: 1)
          post_code: 1
          # Destination for symlinks for binaries (default: /usr/local/bin)
          sys_bin:  /usr/local/bin
          # Destination for symlinks for info docs (default: /usr/local/share/info)
          sys_info: /usr/local/share/info
          # Destination for symlinks for man pages (default: /usr/local/share/man)
          sys_man:  /usr/local/share/man
          # (Windows) Install for all users (default: 1)
          w32_multi_user: 1
      content: |
        #{{
          data = get(".data")
          final_data = {"selected_scheme": data["scheme"]}
          for path_type in ("system", "user"):
            for path_key, path in data.get("path", {}).get(path_type, {}).items():
              final_data[path_key.upper()] = path
          for opt_type in ("instopt", "tlpdbopt"):
            for opt_key, opt in data.get("tlpdbopt", {}).items():
              final_data[f"{opt_type}_{opt_key}"] = opt
          return "\n".join([f"{key} {value}" for key, value in sorted(final_data.items())])
        }}#
      description: |
        Notes:
        - For a full list of collections included in each scheme,
          see the corresponding `.tlpsrc` file with the same name as the scheme
          at https://tug.org/svn/texlive/trunk/Master/tlpkg/tlpsrc/.
          For example, for the `scheme-full` scheme, see
          https://tug.org/svn/texlive/trunk/Master/tlpkg/tlpsrc/scheme-basic.tlpsrc?view=markup.
          Similarly, for a full list of packages included in each collection,
          see the corresponding `.tlpsrc` file at the same location.
          For example, for the `collection-basic` collection, see
          https://tug.org/svn/texlive/trunk/Master/tlpkg/tlpsrc/collection-basic.tlpsrc?view=markup.
        References:
        - [TeX Live installer documentation](https://www.tug.org/texlive/doc/install-tl.html#PROFILES)
        Examples:
        - [github.com/xu-cheng/latex-docker](https://github.com/xu-cheng/latex-docker/blob/master/texlive.profile)
        - [github.com/scottkosty/install-tl-ubuntu](https://github.com/scottkosty/install-tl-ubuntu/blob/master/example.profile)
dois: |
    #{{
      out = []
      preferred = get("file_citation_cff.content.preferred_citation", {})
      preferred_doi = preferred.get("doi")
      name = get("name")
      if preferred_doi:
        description = f"{name} paper in {preferred.get("journal") or preferred.get("publisher")}"
        out.append({"value": preferred_doi, "description": description})
      zenodo_concept_doi = get("zenodo.concept.doi")
      if zenodo_concept_doi:
        description = f"{name} immutable record on Zenodo"
        out.append({"value": zenodo_concept_doi, "description": description})
      latest_doi = get("file_citation_cff.content.doi")
      if latest_doi:
        description = f"{name} latest release (v{get("file_citation_cff.content.version")})"
        out.append({"value": latest_doi, "description": description})
      return out
    }}#
file_binder_conda:
  name: Binder Conda Environment File
  summary: >-
    [`environment.yml`](https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment)
    file for the Binder configuration.
  type: txt
  path: ${{ workflow.binder.path.config }}$/environment.yml
  content: |
    #{{ return hook.binder_config_file("conda") }}#
file_binder_apt:
  name: Binder APT Environment File
  summary: >-
    [`apt.txt`](https://repo2docker.readthedocs.io/en/latest/config_files.html#apt-txt-install-packages-with-apt-get)
    file for the Binder configuration.
  type: txt
  path: ${{ workflow.binder.path.config }}$/apt.txt
  content: |
    #{{ return hook.binder_config_file("apt") }}#
file_binder_postbuild:
  name: Binder Post Build Environment File
  summary: >-
    [`postBuild`](https://repo2docker.readthedocs.io/en/latest/config_files.html#postbuild-run-code-after-installing-the-environment)
    file for the Binder configuration.
  type: txt
  path: ${{ workflow.binder.path.config }}$/postBuild
  content: |
    #{{ return hook.binder_config_file("bash") }}#
file_pixi_manifest:
 # https://pixi.sh/latest/reference/pixi_manifest/
 name: Pixi Manifest
 summary: |
   The Pixi manifest file in TOML format.
 type: toml
 path: pixi.toml
 content:
   project:
     name: ${{ name }}$
     version: '#{{ return manager.changelog.current_public.get("version") }}#'
     authors: |
       #{{
         return [
           f"{author["name"]["full"]}{f" <{author["email"]["id"]}>" if "email" in author else ""}"
           for author in manager.user.members_with_role_types("Author", active_only=True)
         ]
       }}#
     description: '#{{ return get("title") }}#'
     license: '#{{ return get("license.expression") }}#'
     license-file: |
       #{{
         license_components = list(get("license.component", {}).values())
         if not license_components:
           return
         return license_components[0]["path"]["text_plain"]
       }}#
     readme: '#{{ return get("file_readme.path") }}#'
     homepage: '#{{ return get("web.url.home") }}#'
     repository: ${{ repo.url.home }}$
     documentation: ${{ .homepage }}$
     platforms: [ "win-64", "linux-64", "osx-64", "osx-arm64" ]
     channels: [ "conda-forge" ]
   environments:
     prod-py312:
       features: []
       solve-group: ""
 content_setting:
   filter:
     no_value:
       jsonpath: $.project.*
file_readme:
  name: Repository README
  summary: >-
    GitHub repository [`README`](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes)
    file.
  type: md
  path: README.md
  path_schema:
    description: |
      The file must be named `README` (case-sensitive) and placed either in the
      `.github` directory, the `docs` directory, or the root of the repository,
      and can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
      If more than one of such files are present, the order of precedence is
      `.github`, then root, and finally the `docs` directory.
    pattern: ^(?:|.github/|docs/)README(?i:.(txt|md|rst))?$
    examples:
      - README
      - README.md
      - .github/README.txt
      - docs/README.rst
  content:
    body:
      - class: block_image
        src: ${{ web.file.logo_full_light.url }}$
        src_dark: ${{ web.file.logo_full_dark.url }}$
        title: Welcome to ${{ name }}$! Click to visit our website and learn more.
        alt: '${{ name }}$: ${{ title }}$'
        align: center
        width: 100%
        link: ${{ web.url.home }}$
      - class: menu
        items:
          - text: Intro
            link: ${{ web.page.intro.url }}$
            title: Introduction and Background
          - text: Manual
            link: ${{ web.page.manual.url }}$
            title: User Manual
          - text: News
            link: ${{ web.page.blog.url }}$
            title: Latest News and Releases
          - text: Contribute
            link: ${{ web.page.contribute.url }}$
            title: How to Contribute
          - text: About
            link: ${{ web.page.about.url }}$
            title: About the Project
          - text: Help
            link: ${{ web.page.help.url }}$
            title: Get Help and Support
        line_top_width: 100%
        line_bottom_width: 100%
        style: for-the-badge
        color: ${{ theme.color.primary.light }}$
        color_dark: ${{ theme.color.primary.dark }}$
        height: 33px
        attrs_container:
          align: center
      - - class: badge
          service: static
          label: Keywords
          args:
            message: ${{ keywords[0] }}$
          style: ${{ theme.badge.style }}$
          height: ${{ theme.badge.height }}$
          color: ${{ theme.badge.color.blue }}$
          label_color: ${{ theme.badge.color.grey }}$
        - '&nbsp;'
        - class: buttons
          items: ${{ keywords[1:] }}$
          style: ${{ theme.badge.style }}$
          height: ${{ theme.badge.height }}$
          color: ${{ theme.badge.color.blue }}$
      - class: paragraph
        content: ${{ abstract }}$
        attrs:
          align: justify
      - class: badges
        service: static
        style: ${{ theme.badge.style }}$
        height: ${{ theme.badge.height }}$
        color: ${{ theme.badge.color.blue }}$
        label_color: ${{ theme.badge.color.grey }}$
        separator: ${{ theme.badge.separator }}$
        items:
          - |
            *{{
              #{{
                out = []
                doi = get("zenodo.concept.doi")
                if doi:
                  zenodo = {
                    "label": "DOI",
                    "args": {"message": doi},
                    "logo": "zenodo",
                    "logo_type": "name",
                    "color": "#1682D4",
                    "link": f"https://doi.org/{doi}"
                  }
                  out.append(zenodo)
                if get("pypkg_main.pypi.publishable") and get("workflow.publish.pypi"):
                  pypi = {
                    "label": "pip install ",
                    "args": {"message": get("pypkg_main.name").lower()},
                    "logo": f"{get("web.path.source")}/_media/logo_ext/pypi.png",
                    "logo_type": "file",
                    "logo_media_type": "png",
                    "color": "#3775A9",
                    "link": get("pypkg_main.pypi.url.home"),
                  }
                  out.append(pypi)
                publish_conda = get("workflow.publish.conda-forge") or get("workflow.publish.anaconda")
                if publish_conda:
                  conda = {
                    "label": "conda install",
                    "args": {"message": f"{get("pypkg_main.name").lower()} -c {publish_conda["index"]["channel"].lower()}"},
                    "logo": "anaconda",
                    "logo_type": "name",
                    "logo_color": "#44A833",
                    "color": "#44A833",
                    "link": get("pypkg_main.conda.url.home"),
                  }
                  out.append(conda)
                publish_docker = get("workflow.binder")
                if publish_docker:
                  index = publish_docker["index"]
                  docker = {
                      "label": "docker pull",
                      "args": {"message": f"{index["registry"]}/{index["namespace"]}/{index["name"]}:latest".lower()},
                      "logo": "docker",
                      "logo_type": "name",
                      "color": "#2496ED",
                      "logo_color": "#2496ED",
                      "link": index["url"]["home"],
                    }
                  out.append(docker)
                if get("workflow.publish.github"):
                  github = {
                    "label": "GitHub",
                    "args": {"message": get("repo.name")},
                    "logo": "github",
                    "logo_type": "name",
                    "color": "#181717",
                    "link": get("repo.url.releases.home"),
                  }
                  out.append(github)
                return out
              }}#
            }}*
          - service: binder
            endpoint: github
            label: Binder
            args:
              message: try online
              user: ${{ repo.owner }}$
              repo: ${{ repo.name }}$
              ref: ${{ repo.default_branch }}$
            color: "#579ACA"
            label_color: ${{ theme.badge.color.grey }}$
    sections:
      - heading: Highlights
        body:
          - class: highlights
            items: ${{ highlights }}$
            button:
              style: for-the-badge
              color: [ '${{ theme.color.primary.light }}$', '${{ theme.color.secondary.light }}$' ]
              color_dark: [ '${{ theme.color.primary.dark }}$', '${{ theme.color.secondary.dark }}$' ]
              height: 30px
              align: left
            attrs_p:
              align: justify
      - heading: >-
          #{{
            if manager.changelog.current_public.get("phase") == "dev":
              return "Upcoming Release"
            return "Latest Release"
          }}#
        body: ${{ __temp__.changelog.body }}$
        sections: ${{ __temp__.changelog.sections }}$
      - heading: Statistics
        body:
          - class: table
            rows:
              - - <b>Project</b>
                - - class: badges
                    style: ${{ theme.badge.style }}$
                    height: ${{ theme.badge.height }}$
                    color: ${{ theme.badge.color.blue }}$
                    separator: ${{ theme.badge.separator }}$
                    service: github
                    args:
                      user: ${{ repo.owner }}$
                      repo: ${{ repo.name }}$
                    items:
                      - endpoint: created_at
                        label: 🗓 Creation Date
                      - endpoint: contributors
                        label: 🧑‍💻️ Contributors
                      - endpoint: language_count
                        label: 🔠 Programming Languages
                      - endpoint: top_language
                        logo: ${{ web.path.source }}$/_media/logo_ext/python.svg
                        logo_type: file
                        logo_media_type: svg+xml
                      - endpoint: repo_size
                        label: 🚚 Repo Size
                      - endpoint: code_size
                        label: 🚛 Code Size
              - - <b>Health</b>
                - - class: badges
                    service: github
                    style: ${{ theme.badge.style }}$
                    height: ${{ theme.badge.height }}$
                    separator: ${{ theme.badge.separator }}$
                    args:
                      user: ${{ repo.owner }}$
                      repo: ${{ repo.name }}$
                    items:
                      - service: codecov
                        endpoint: coverage
                        args:
                          vcs_name: github
                      - service: librariesio
                        endpoint: source_rank
                        args:
                          platform: pypi
                          package: ${{ pypkg_main.name }}$
                      - service: librariesio
                        endpoint: dependency_status
                        args:
                          platform: pypi
                          package: ${{ pypkg_main.name }}$
                        label: Package Dependencies
                      - service: librariesio
                        endpoint: dependency_status_github
                        args:
                          platform: github
                          package: ""
                        label: Repository Dependencies
                      - service: website
                        args:
                          url: ${{ web.url.home }}$
                          up_message: online
                          up_color: '#00802b'
                          down_message: offline
                          down_color: '#AF1F10'
                        label: Website
              - - <b>Standards</b>
                - - class: badges
                    service: static
                    style: ${{ theme.badge.style }}$
                    height: ${{ theme.badge.height }}$
                    separator: ${{ theme.badge.separator }}$
                    items:
                      - label: Testing
                        args:
                          message: Pytest
                        color: "#0A9EDC"
                        logo: pytest
                        logo_color: "#0A9EDC"
                        logo_type: name
                        link: https://github.com/pytest-dev/pytest/
                      - label: Type Checking
                        args:
                          message: mypy
                        color: "#2A6DB2"
                        logo: ${{ web.path.source }}$/_media/logo_ext/mypy.svg
                        logo_type: file
                        logo_media_type: svg+xml
                        link: https://github.com/python/mypy
                      - label: Lint
                        args:
                          message: Ruff
                        color: "#D7FF64"
                        logo: ruff
                        logo_type: name
                        logo_color: "#D7FF64"
                        link: https://github.com/astral-sh/ruff
                      - label: Security
                        args:
                          message: CodeQL
                        color: "#181717"
                        logo: github
                        logo_type: name
                        link: https://codeql.github.com/
                      - label: Code Style
                        args:
                          message: Black
                        color: "#000"
                        logo: ${{ web.path.source }}$/_media/logo_ext/black.png
                        logo_type: file
                        logo_media_type: png
                        link: https://github.com/psf/black
              - - <b>Downloads</b>
                - - - |
                      *{{
                        #{{
                          if not get("pypkg_main.pypi.publishable"):
                            return []
                          badges = {
                            "class": "badges",
                            "style": get("theme.badge.style"),
                            "height": get("theme.badge.height"),
                            "color": get("theme.badge.color.blue"),
                            "separator": 1,
                            "service": "pypi",
                            "endpoint": "downloads",
                            "args": {"package": get("pypkg_main.name")},
                            "logo": "",
                            "label": "",
                            "items": [
                              {
                                "service": "pepy",
                                "endpoint": "total_downloads",
                                "label": "PyPI",
                                "logo": f"{get("web.path.source")}/_media/logo_ext/pypi.png",
                                "logo_type": "file",
                                "logo_media_type": "png",
                              },
                            ] + [{"args": {"period": period}} for period in ("m", "w", "d")]
                          }
                          return [badges, "&nbsp;" * get("theme.badge.separator")]
                        }}#
                      }}*
                    - |
                      *{{
                        #{{
                          conda = get("workflow.publish.conda-forge") or get("workflow.publish.anaconda")
                          if not conda:
                            return []
                          badge = {
                            "class": "badge",
                            "style": get("theme.badge.style"),
                            "height": get("theme.badge.height"),
                            "color": get("theme.badge.color.blue"),
                            "service": "conda",
                            "endpoint": "downloads",
                            "args": {"channel": conda.get("index", {}).get("channel", "conda-forge").lower(), "package": get("pypkg_main.name").lower()},
                            "label": "Conda",
                            "logo": "anaconda",
                            "logo_color": "#44A833",
                          }
                          return [badge, "&nbsp;" * get("theme.badge.separator")]
                        }}#
                      }}*
                    - class: badge
                      style: ${{ theme.badge.style }}$
                      height: ${{ theme.badge.height }}$
                      color: ${{ theme.badge.color.blue }}$
                      service: github
                      endpoint: downloads_all_releases
                      label: GitHub
                      args:
                        user: ${{ repo.owner }}$
                        repo: ${{ repo.name }}$
              - - <b>Users</b>
                - - class: badges
                    style: ${{ theme.badge.style }}$
                    height: ${{ theme.badge.height }}$
                    color: ${{ theme.badge.color.blue }}$
                    separator: ${{ theme.badge.separator }}$
                    service: librariesio
                    args:
                      platform: pypi
                      package: ${{ pypkg_main.name }}$
                    items:
                      - endpoint: dependents
                        label: Dependent Packages
                      - endpoint: dependents
                        args:
                          repo: true
                        label: Dependent Repositories
              - |
                *{{
                  #{{
                    out = []
                    label_data = [("Total", None)] + [
                      (badge_label, get(f"label.type.label.{label_type}.name"))
                      for badge_label, label_type in (
                        (f"{get(f"theme.icon.fix")} Bug Fixes", "fix"),
                        (f"{get(f"theme.icon.feat")} New Features", "feat"),
                        (f"{get(f"theme.icon.change")} Breaking Changes", "change"),
                      )
                    ]
                    repo_owner = get("repo.owner")
                    repo_name = get("repo.name")
                    color_open = get("theme.badge.color.red")
                    color_closed = get("theme.badge.color.green")
                    style = get("theme.badge.style")
                    height = get("theme.badge.height")
                    separator = get("theme.badge.separator")
                    for title, issue_kind in (
                      ("Issues", "issues"),
                      ("PRs", "pulls"),
                    ):
                      badges = []
                      for badge_label, issue_label in label_data:
                        badges_config = {
                          "class": "badges",
                          "service": "github",
                          "endpoint": "issue_count",
                          "args": {"user": repo_owner, "repo": repo_name, "kind": issue_kind, "label": issue_label},
                          "style": style,
                          "height": height,
                          "separator": 0,
                          "items": [
                            {"args": {"state": "open"}, "label": badge_label, "color": color_open},
                            {"args": {"state": "closed"}, "label": "", "color": color_closed},
                          ],
                        }
                        badges.extend([badges_config, "&nbsp;" * separator])
                      out.append([f"<b>{title}</b>", [badges]])
                    return out
                  }}#
                }}*
              - - <b>Commits</b>
                - - class: badges
                    style: ${{ theme.badge.style }}$
                    height: ${{ theme.badge.height }}$
                    color: ${{ theme.badge.color.blue }}$
                    separator: ${{ theme.badge.separator }}$
                    service: github
                    endpoint: commit_activity
                    args:
                      user: ${{ repo.owner }}$
                      repo: ${{ repo.name }}$
                    items:
                      - args:
                          interval: t
                        label: Total
                        logo: git
                        logo_type: name
                        logo_color: "#F05032"
                      - args:
                          interval: y
                        label: ""
                      - args:
                          interval: m
                        label: ""
                      - args:
                          interval: w
                        label: ""
                      - endpoint: commits_since_latest_release
                        label: Since Latest Release
                      - endpoint: last_commit
                        label: Last
              - - <b>Discussions</b>
                - - class: badges
                    style: ${{ theme.badge.style }}$
                    height: ${{ theme.badge.height }}$
                    color: ${{ theme.badge.color.blue }}$
                    separator: ${{ theme.badge.separator }}$
                    service: github
                    endpoint: discussion_search_hits
                    args:
                      user: ${{ repo.owner }}$
                      repo: ${{ repo.name }}$
                    items:
                      - |
                        *{{
                          #{{
                            return [
                              {
                                "args": {"query": f'category:"{category["name"]}"'},
                                "label": f"{category["emoji"]} {category["name"]}",
                                "title": category["description"],
                              } for category in get("discussion.category", {}).values()
                            ]
                          }}#
                        }}*
              - - <b>Community</b>
                - - class: badges
                    style: ${{ theme.badge.style }}$
                    height: ${{ theme.badge.height }}$
                    color: ${{ theme.badge.color.blue }}$
                    separator: ${{ theme.badge.separator }}$
                    service: github
                    args:
                      user: ${{ repo.owner }}$
                      repo: ${{ repo.name }}$
                    logo: github
                    items:
                      - endpoint: forks
                      - endpoint: stars
                      - endpoint: watchers
              - - <b>DevOps</b>
                - - class: badges
                    style: ${{ theme.badge.style }}$
                    height: ${{ theme.badge.height }}$
                    separator: ${{ theme.badge.separator }}$
                    service: github
                    args:
                      user: ${{ repo.owner }}$
                      repo: ${{ repo.name }}$
                    items:
                      - endpoint: workflow_status
                        logo: github
                        logo_type: name
                        args:
                          workflow: main.yaml
                        label: CI
                      - |
                        *{{
                          #{{
                            import jinja2

                            out = []
                            for platform in ("pypi", "testpypi"):
                              env = get(f"workflow.publish.{platform}.env")
                              if env:
                                for pkg_key in ("pypkg_main", "pypkg_test"):
                                  pkg_name = get(f"{pkg_key}.name")
                                  if pkg_name:
                                    env_name = jinja2.Template(env["name"]).render(
                                      pkg={"name": pkg_name}
                                    )
                                    badge = {
                                      "endpoint": "deployment_status",
                                      "args": {"environment": env_name},
                                      "logo": f"{get("web.path.source")}/_media/logo_ext/pypi.png",
                                      "logo_type": "file",
                                      "logo_media_type": "png",
                                    }
                                    out.append(badge)
                            for platform in ("zenodo", "zenodo_sandbox"):
                              env = get(f"workflow.publish.{platform}.env")
                              if env:
                                badge = {
                                  "endpoint": "deployment_status",
                                  "args": {"environment": env["name"]},
                                  "logo": "zenodo",
                                  "logo_type": "name",
                                }
                                out.append(badge)
                            github_env = get("workflow.publish.github.env")
                            if github_env:
                              badge = {
                                "endpoint": "deployment_status",
                                "args": {"environment": github_env["name"]},
                                "logo": "github",
                                "logo_type": "name",
                              }
                              out.append(badge)
                            web_env = get("workflow.web.env")
                            if web_env:
                              badge = {
                                "endpoint": "deployment_status",
                                "args": {"environment": web_env["name"]},
                                "logo": "github",
                                "logo_type": "name",
                              }
                              out.append(badge)
                            rtd_name = get("tool.readthedocs.config.workflow.name")
                            if rtd_name:
                              badge = {
                                "service": "readthedocs",
                                "endpoint": "build_status",
                                "args": {"name": rtd_name},
                                "label": "CD ReadTheDocs",
                              }
                              out.append(badge)
                            return out
                          }}#
                        }}*
      - heading: Acknowledgements
        body:
          - ${{ name }}$ was developed in [Volkamer Lab](https://volkamerlab.org/).
    footer:
      - class: thematic_break
      - class: badges
        style: for-the-badge
        items:
          - service: dynamic
            args:
              url: ${{ control.url.metadata }}$
              query: '$.copyright'
            label: ${{ name }}$
            color: ${{ theme.color.primary.light }}$
            logo: ${{ web.file.icon.path }}$
            logo_type: file
            color_dark: ${{ theme.color.primary.dark }}$
            logo_dark: ${{ web.file.icon.path }}$
            logo_type_dark: file
            link: ${{ team.owner.github.url }}$
            title: '${{ name }}$: Copyright ${{ copyright }}$'
            alt: ${{ .title }}$
            align: left
          - service: static
            args:
              message: ${{ license.expression }}$
            label: SPDX License Identifier
            color: "#4398CC"
            logo: spdx
            logo_color: "#4398CC"
            link: ${{ web.page.license.url }}$
            title: 'SPDX-License-Identifier: ${{ license.expression }}$'
            alt: 'SPDX-License-Identifier: ${{ license.expression }}$'
            align: right
file_coc:
  name: Code of Conduct
  type: md
  summary: >-
    GitHub [`CODE_OF_CONDUCT`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-code-of-conduct-to-your-project)
    community health file.
  notes: |
    For "Code of conduct" to be marked as complete in the repository's community profile,
    GitHub only accepts the
    [Contributor Covenant](https://www.contributor-covenant.org/version/2/0/code_of_conduct.html)
    and the [Citizen Code of Conduct](http://stumptownsyndicate.org/).
  path: CODE_OF_CONDUCT.md
  path_schema:
    description: |
      The file must be named `CODE_OF_CONDUCT` (case-sensitive)
      and placed either in the `.github` directory, the `docs` directory,
      or the root of the repository.
      It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
    pattern: ^(?:|.github/|docs/)CODE_OF_CONDUCT(?i:.(txt|md|rst))?$
    examples:
      - CODE_OF_CONDUCT
      - CODE_OF_CONDUCT.md
      - docs/CODE_OF_CONDUCT.txt
      - .github/CODE_OF_CONDUCT.MD
  content:
    class: covenant_code_of_conduct
    contact_name: |
      #{{
        return manager.user.members_with_role_ids(
          "coc",
          active_only=True,
        )[0]["email"]["id"]
      }}#
    contact_url: |
      #{{
        return manager.user.members_with_role_ids(
          "coc",
          active_only=True,
        )[0]["email"]["url"]
      }}#
file_contributing:
  name: Contribution Guide
  type: md
  summary: >-
    GitHub [`CONTRIBUTING`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors)
    community health file.
  path: CONTRIBUTING.md
  path_schema:
    description: |
      The file must be named `CONTRIBUTING` (case-insensitive)
      and placed either in the `.github` directory, the `docs` directory,
      or the root of the repository. It can have the extensions `.txt`, `.md`, or `.rst`.
    pattern: ^(?:|.github/|docs/)(?i:CONTRIBUTING(?:.(txt|md|rst))?)$
    examples:
      - CONTRIBUTING
      - CONTRIBUTING.md
      - contributing.rst
      - docs/CONTRIBUTING.txt
      - .github/contributing.md
  content:
    heading: ${{ name }}$ Contributing Guidelines
    body:
      - class: paragraph
        attrs:
          align: justify
        content: |
          Welcome to the <em>${{ name }}$</em> community!
          We are excited to have you here,
          and grateful that you are considering contributing.
          ${{ name }}$ is a free and open-source project that evolves with the needs of its users,
          and can only grow through the help of great members like you.
    sections:
      - heading: How To Contribute
        body:
          - class: paragraph
            attrs:
              align: justify
            content: |
              To keep all our project documentation organized and easy to find, the complete
              <a href="${{ web.page.contribute.url }}$">contribution guide</a> is hosted on our website.
    footer: ${{ file_readme.content.footer }}$
file_governance:
  name: Governance
  type: md
  summary: >-
    GitHub [`GOVERNANCE`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/)
    community health file.
  path: GOVERNANCE.md
  path_schema:
    description: |
      The file must be named `GOVERNANCE` (case-sensitive)
      and placed either in the `.github` directory, the `docs` directory,
      or the root of the repository.
      It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
    pattern: ^(?:|.github/|docs/)GOVERNANCE(?i:.(txt|md|rst))?$
    examples:
      - GOVERNANCE
      - GOVERNANCE.md
      - docs/GOVERNANCE.txt
      - .github/GOVERNANCE.md
  content:
    heading: Project Governance
    footer: ${{ file_readme.content.footer }}$
file_security:
  name: Security Policy
  type: md
  summary: >-
    GitHub [`SECURITY`](https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository)
    community health file.
  path: SECURITY.md
  path_schema:
    description: |
      The file must be named `SECURITY` (case-sensitive)
      and placed either in the `.github` directory, the `docs` directory,
      or the root of the repository.
      It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
    pattern: ^(?:|.github/|docs/)SECURITY(?i:.(txt|md|rst))?$
    examples:
      - SECURITY
      - SECURITY.md
      - docs/SECURITY.txt
      - .github/SECURITY.md
  content:
    heading: Security Policy
    footer: ${{ file_readme.content.footer }}$
file_support:
  name: Support Resources
  type: md
  summary: >-
      GitHub [`SUPPORT`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-support-resources-to-your-project)
      community health file.
  path: SUPPORT.md
  path_schema:
    description: |
      The file must be named `SUPPORT` (case-sensitive)
      and placed either in the `.github` directory, the `docs` directory,
      or the root of the repository.
      It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
    pattern: ^(?:|.github/|docs/)SUPPORT(?i:.(txt|md|rst))?$
    examples:
      - SUPPORT
      - SUPPORT.md
      - docs/SUPPORT.txt
      - .github/SUPPORT.md
  content:
    heading: Support Resources
    footer: ${{ file_readme.content.footer }}$
file_codeowners:
  name: CODEOWNERS
  summary: >-
    [`CODEOWNERS`](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners) file.
  description: |
    If present, a CODEOWNERS file is automatically maintained at the given [`path`](#ccc-code-owners-path),
    using file ownership information defined for team members.
    For each pull request, GitHub will then automatically add the owners of each
    modified file in that pull request as reviewers.
    Note that you can also assign issue-form-specific review tasks to each role
    (cf. [`ccc.role.*.assignment.review`](#ccc-role---assignment-review)).

    :::{admonition} Considerations
    :class: important

    - Code owners must have write permissions to the repository.
    - For code owners to be automatically requested for reviews, protection rules for
      [requiring pull request reviews](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches#require-pull-request-reviews-before-merging)
      must be enabled.
    :::
  path: .github/CODEOWNERS
  path_schema:
    description: |
      The file must be named `CODEOWNERS` (case-sensitive, without extension)
      and placed either in the `.github` directory, the `docs` directory,
      or the root of the repository.
    enum:
      - CODEOWNERS
      - .github/CODEOWNERS
      - docs/CODEOWNERS
    pattern: ^(?:|.github/|docs/)CODEOWNERS$
  type: txt
  content: >-
    #{{ return hook.file_codeowners() }}#
file_sphinx_conf:
  name: Sphinx Configuration
  summary: Sphinx configuration file for the website.
  type: json
  path: ${{ web.path.source }}$/conf.json
  content: |
    #{{
      import pyserials as ps

      out = {}
      for pkg_manager in ("conda", "pip"):
        for pkg in get(f"devcontainer_main.environment.website.{pkg_manager}", {}).values():
          sphinx_conf = pkg.get("data", {}).get("sphinx_config")
          if sphinx_conf:
            ps.update.recursive_update(
              source=out,
              addon=sphinx_conf,
              undefined_existing="raise"
            )
      return out
    }}#
  jsonschema:
    schema:
      $ref: https://jsonschemata.repodynamics.com/config/sphinx
file_script_web_build:
  name: Website Build Script
  summary: Script to build the website using Sphinx.
  path: ${{ devcontainer_main.path.root }}$/script/website_build.sh
  type: txt
  data:
    tar_path: ${{ web.path.build }}$/website.tar
    sphinx_build_options: --verbose --show-traceback --keep-going --color --nitpicky --jobs auto
    sphinx_builder: dirhtml
  content: |
    SPHINX_COMMON_OPTIONS="${{ .data.sphinx_build_options }}$"
    sphinx-build -M ${{ .data.sphinx_builder }}$ ${{ web.path.source }}$ ${{ web.path.build }}$ $SPHINX_COMMON_OPTIONS

    # Create a tarball of the built website according to GitHub Pages requirements.
    # Ref: https://github.com/actions/upload-pages-artifact/blob/main/action.yml
    tar \
      --dereference --hard-dereference \
      --directory "${{ web.path.build }}$/dirhtml" \
      -cvf "${{ .data.tar_path }}$" \
      --exclude=.git \
      --exclude=.github \
      --exclude=".[^/]*" \
      .
  notes: |
    References:
    - [`sphinx-build` options](https://www.sphinx-doc.org/en/master/man/sphinx-build.html)
    - [Sphinx builders](https://www.sphinx-doc.org/en/master/usage/builders/index.html)
    - [Sphinx Makefile template](https://github.com/sphinx-doc/sphinx/blob/master/sphinx/templates/quickstart/Makefile.new.jinja)
file_script_web_livehtml:
  name: Website Live Preview Script
  summary: Script to start a live preview server for the website.
  path: ${{ devcontainer_main.path.root }}$/script/website_livehtml.sh
  type: txt
  content: |
    sphinx-autobuild \
      ${{ web.path.source }}$ \
      ${{ web.path.build }}$ \
      ${{ file_script_web_build.data.sphinx_build_options }}$ \
      -a -b=${{ file_script_web_build.data.sphinx_builder }}$ --open-browser --delay 0
  notes: |
    References:
    - [`sphinx-autobuild` options](https://github.com/sphinx-doc/sphinx-autobuild/blob/main/README.rst)
file_citation_cff:
  name: CFF Citation
  summary: >-
    [`CITATION.cff`](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files) file.
  description: |
    Citation file for the project
    in the [Citation File Format](https://citation-file-format.github.io/) (CFF).
    Current schema version is [CFF v1.2.0](https://github.com/citation-file-format/citation-file-format/blob/main/schema-guide.md).
  type: yaml
  path: CITATION.cff  # GitHub only supports `CITATION.cff` at root.
  content:
    message: Please cite ${{ name }}$ using the following references.
    title: |-
      #{{
        name = get("name")
        title = get("title")
        return f"{name}: {title}" if title else name
      }}#
    authors: |-
      #{{
        # Get all members and contributors with the role type "Author".
        authors = manager.user.members_with_role_types(
          "Author", active_only=True
        ) + manager.changelog.current_public.contributors_with_role_types("Author", member=False)
        # Transform each author data into a CFF person/entity object.
        return [hook.create_cff_person_or_entity(author) for author in authors]
      }}#
    contact: |-
      #{{
          return [
            hook.create_cff_person_or_entity(member) for member in manager.user.members_with_role_types(
              "ContactPerson",
              active_only=True,
            )
          ]
      }}#
    doi: |
      #{{
        # Get the latest DOI from the last/current public release on Zenodo.
        curr_changelog = manager.changelog.current_public
        return curr_changelog.get("release", {}).get(
          "zenodo_sandbox" if curr_changelog.get("ongoing") else "zenodo", {}
        ).get("doi")
      }}#
    version: >-
      #{{ return manager.changelog.current_public.get("version") }}#
    date-released: >-
      #{{ return manager.changelog.current_public.get("date") }}#
    commit: >-
      #{{ return manager.changelog.current_public.get("commit", {}).get("sha") }}#
    identifiers:
      - |
        *{{
          #{{
            out = []
            concept_doi = get("zenodo.concept.doi")
            if concept_doi:
              entry = {
                "type": "doi",
                "value": concept_doi,
                "description": "Persistent DOI of the project as a whole."
              }
              out.append(entry)
            return out
          }}#
        }}*
    license: |-
      #{{
        return [
          component["id"] for component in get("license.component", {}).values()
          if component["type"] == "license" and not component["custom"]
        ]
      }}#
    url: >-
      #{{ return get("web.url.home") or get("repo.url.home") }}#
    type: software
    keywords: >-
      #{{ return get("keywords") }}#
    abstract: >-
      #{{ return get("abstract") }}#
    repository-code: ${{ repo.url.home }}$
    repository-artifact: ${{ repo.url.releases.home }}$
    repository: null
    cff-version: 1.2.0
  content_setting:
    filter:
      remove_nulls:
        # Remove all top-level keys with `null` values (created by templates).
        # This removes optional values that are not set, keeping the file valid.
        jsonpath: "$.*"
    order:
      - message
      - preferred-citation
      - doi
      - commit
      - version
      - date-released
      - license
      - license-url
      - url
      - repository
      - repository-artifact
      - repository-code
      - identifiers
      - type
      - title
      - authors
      - contact
      - abstract
      - keywords
      - references
      - cff-version
  jsonschema:
    schema: !ext https://citation-file-format.github.io/1.2.0/schema.json
file_funding_github:
  name: GitHub Funding
  summary: GitHub [`FUNDING.yml`](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/displaying-a-sponsor-button-in-your-repository) file.
  status: inactive  # Change to "active" to enable the file.
  description: |
    Configurations for GitHub to display a sponsor button in the repository.
    Clicking on the button opens the ***Sponsor this project*** section,
    where a list of links to the specified funding platforms is displayed to the user.
  type: yaml
  path: .github/FUNDING.yml
  path_schema:
    description: |
      GitHub only recognizes this file at `.github/FUNDING.yml`.
    pattern: ^\.github/FUNDING\.yml$
  jsonschema:
    schema:
      $ref: https://jsonschemata.repodynamics.com/config/github/funding
  content:
    # See the schema or the GitHub documentation for the supported funding platforms.
    github:
      - ${{ team.owner.github.id }}$
file_web_toc:
  name: Website Table of Contents
  summary: Central table of contents definition for the entire website.
  description: |
    This file is used by the
    [Sphinx-External-TOC](https://github.com/executablebooks/sphinx-external-toc)
    extension to define the structure of the website.
  type: yaml
  data:
    rel_path: .toc.yaml
  path: ${{ web.path.source }}$/${{ .data.rel_path }}$
  content:
    root: index
    defaults:
      hidden: true
    entries:
      - file: intro/index
        title: Intro
        options:
          numbered: true
        entries:
          - file: intro/motivation/index
          - file: intro/overview/index
          - file: intro/background/index
            entries:
              - file: intro/background/methodologies/index
              - file: intro/background/github/index
              - file: intro/background/python/index
                entries:
                  - file: intro/background/python/pypi/index
                  - file: intro/background/python/pip/index
                  - file: intro/background/python/packaging/index
                  - file: intro/background/python/governance/index
              - file: intro/background/conda/index
                entries:
                  - file: intro/background/conda/packaging/index
              - file: intro/background/versioning/index
              - file: intro/background/jsonpath/index
              - file: intro/background/yaml/index
              - file: intro/background/toml/index
              - file: intro/background/jinja/index
              - file: intro/background/markdown/index
          - file: intro/glossary/index
          - file: intro/references/index
      - file: manual/index
        title: Manual
        options:
          numbered: true
        entries:
          - file: manual/install/index
            entries:
              - file: manual/install/new/index
              - file: manual/install/existing/index
              - file: manual/install/upgrade/index
              - file: manual/install/common/index
          - file: manual/quickstart/index
          - file: manual/config/index
            entries:
              - file: manual/config/location/index
              - file: manual/config/structure/index
              - file: manual/config/options/index
              - file: manual/config/synchronization/index
              - file: manual/config/outputs/index
              - file: manual/config/templating/index
              - file: manual/config/inheritance/index
              - file: manual/config/hooks/index
              - file: manual/config/caching/index
      - file: api/index
        title: API
        entries:
          - file: api/metadata/index
          - file: api/local/index
          - file: api/changelog/index
          - file: api/variables/index
          - file: api/contributors/index
          - file: api/cache/index
          - file: api/refs/index
      - file: news/index
        title: News
        entries:
          - glob: news/post/**
      - file: contribute/index
        title: Contribute
        options:
          numbered: true
        entries:
          - file: contribute/feedback/index
            entries:
              - file: contribute/feedback/security/index
              - file: contribute/feedback/bug/index
          - file: contribute/develop/index
          - file: contribute/support/index
      - file: about/index
        title: About
        options:
          numbered: true
        entries:
          - file: about/citation/index
          - file: about/contact/index
          - file: about/license/index
            entries:
              - glob: about/license/*/index
      - file: help/index
        title: Help
        options:
          numbered: true
        entries:
          - file: help/website/index
            entries:
              - file: help/website/tips/index
              - file: help/website/api/index
highlights:
  - title: Ready to Use
    description: |
      ${{ name }}$ is fully preconfigured and easily installable
      in both new and existing repositories via a GitHub repository template.
      Most users only need to invest a few minutes filling project-specific information
      in the provided configuration files.
      PyPackIT then takes over, setting up the repository
      and generating a complete infrastructure and fully automated development workflow for the project.
      This leaves users with only few tasks throughout the software development life cycle,
      such as adding application code, unit-tests, and minimal documentation content.
  - title: Cloud Native Development
    description: |
      ${{ name }}$ is a cloud-based solution that integrates with GitHub
      and uses GitHub Actions to automate the entire software development process.
      It provides a cloud-native development environment that
      eliminates the need for initial setup and configuration,
      enabling users to immediately begin with the actual
      implementation of software, even directly from the web browser.
      All integration, testing, and deployment tasks are automatically carried out on the cloud,
      facilitating Agile development and ensuring the consistent enforcement of best practices.
  - title: Continuous Configuration Automation
    description: |
      ${{ name }}$ offers a centralized user interface
      for automatic configuration, customization, and management
      of the entire project, and even multiple projects at once.
      Based on DevOps practices like Infrastructure-as-Code,
      ${{ name }}$'s control center consolidates all project configurations
      into a unified data structure, supporting both declarative definitions
      and dynamic data generation at runtime via built-in templating, scripting,
      and online retrieval features.
      Configurations are automatically applied to related components,
      eliminating redundancy and rendering the entire project dynamic.
  - title: Continuous Integration & Deployment
    description: |
      ${{ name }}$'s CI/CD pipelines automate tasks such as code analysis,
      style formatting, type checking, refactoring, testing, dependency monitoring,
      versioning, build, containerization, release, and distribution,
      with support for multiple indexing repositories including PyPI, Anaconda,
      Zenodo, GitHub Releases, and all Docker registries.
      These Continuous software engineering pipelines eliminate the need for dedicated integration
      and deployment teams, while increasing control, integrity, scalability, security,
      and transparency of the Agile development process.
  - title: Continuous Refactoring & Testing
    description: |
      ${{ name }}$ provides Continuous pipelines that
      periodically perform automated testing, refactoring, and maintenance tasks
      such as testing previous releases with up-to-date dependencies,
      refactoring code according to the latest standards,
      upgrading development tools and project infrastructure,
      and cleaning up the repository and its development environment.
      ${{ name }}$ can automatically submit issue tickets and pull requests
      for applying updates and fixes, thus maintaining
      the health of the project and ensuring its long-term sustainability.
  - title: Issue Management
    description: |
      ${{ name }}$ automatically maintains the project's issue tracking system,
      providing type-specific submission forms that are
      kept up-to-date with project information.
      These collect user inputs in a structured format,
      allowing ${{ name }}$ to automate issue management activities
      such as ticket formatting, labeling, bug triage, task assignment,
      documentation, issue–commit linkage, and progress reports.
      Users can also command ${{ name }}$ to perform specific tasks using semantic comments and labels,
      eliminating all repetitive issue management activities.
  - title: Version Control
    description: |
      ${{ name }}$ fully integrates with Git and GitHub
      to automate version control tasks like branching,
      versioning, tagging, commit management, and merging.
      Based on well-established models such as Git Flow,
      ${{ name }}$ adopts a specialized branching strategy and version scheme
      for simultaneous development and deployment of multiple orthogonal release candidates,
      ${{ name }}$'s strategy enables rapid project evolution according to Agile
      and Continuous software engineering methodologies,
      while ensuring availability and long-term support of earlier releases.
  - title: Python Application
    description: |
      ${{ name }}$ supports Python applications with extension modules and non-Python dependencies.
      It enables deployment as a Python package, a Conda package,
      and/or a Docker image to cloud services such as PyPI,
      Anaconda, Docker registries, and BinderHub instances.
      ${{ name }}$ includes a build-ready package skeleton with essential source files
      and automatically maintained configuration files customized for the project.
      Users only need to add application code in the provided source files,
      while ${{ name }}$ automates all integration, packaging, and deployment tasks.
  - title: Test Suite
    description: |
      ${{ name }}$'s fully automated testing infrastructure enables the
      immediate adoption of test-driven development methodologies,
      requiring users to only provide test cases in the provided skeleton files.
      Testing is then automatically performed at various phases of the development life cycle,
      while generating comprehensive reports and coverage metrics
      to improve awareness of software health status.
      The test suite is automatically packaged and distributed along each release,
      allowing for local verification of software functionality and performance by its users.
  - title: Documentation Website
    description: |
      ${{ name }}$ includes a fully designed website
      filled with automatically generated documentation such as
      project information, package metadata, installation guides,
      API reference, changelogs, release notes,
      contribution guides, and citation data.
      The website is automatically deployed to GitHub Pages and Read The Docs platforms,
      and can be easily customized via the control center with no web development knowledge.
      ${{ name }}$ can also dynamically generate standalone documents in various Markdown formats,
      such as READMEs for different repositories.
  - title: Copyright & Licensing
    description: |
      ${{ name }}$ incorporates the System Package Data Exchange (SPDX) license standard
      and supports all SPDX License List licenses and exceptions, as well as user-defined ones.
      Projects can define complex licenses simply by providing an SPDX license expression.
      ${{ name }}$ will then automatically retrieve
      the necessary data from the SPDX database,
      customize it with project-specific information,
      generate visually appealing and syntactically valid license files and copyright notices,
      and integrate license information into all project components and releases.
  - title: Security & Transparency
    description: |
      ${{ name }}$ improves project security while supporting community collaboration
      by incorporating security measures like branch and tag protection rulesets,
      vulnerability scanning, dependency monitoring, and private security advisories.
      All provided GitHub Actions workflows and applications are developed
      according to the latest security standards
      to prevent unauthorized access, data breaches, and code injection attacks.
      To ensure that ${{ name }}$ is highly secure and transparent,
      most of its infrastructure is natively implemented and self-contained.
issue:
  blank_enabled: false
  contact_links:
    - name: '🎓️  Learn More'
      about: Not sure where to start? Read our contribution guide to learn more.
      url: ${{ web.page.contribute.url }}$
    - name: '💬  Contact Us'
      about: Have another inquiry or need help? Contact us directly!
      url: ${{ web.page.contact.url }}$
  __temp__:
    # Body Templates
    body_fix_api:
      - '*{{ issue.__temp__.header_bug }}*'
      - '*{{ issue.__temp__.address_api }}*'
      - ${{ issue.__data__.issue_summary }}$
      - type: textarea
        id: test_case
        attributes:
          label: Test Case
          description: >-
            Please provide a [test case](https://docs.pytest.org/en/stable/getting-started.html)
            that demonstrates the bug:

            - At the top of the code block below,
            add the minimum number of imports required to reproduce the bug.

            - Replace the ellipsis (`...`) in the `test` function with a
            [Minimal Reproducible Example](https://stackoverflow.com/help/minimal-reproducible-example) (MRE).
            Use [`assert` statements](https://docs.pytest.org/en/stable/how-to/assert.html)
            to specify the expected results.
          value: |
            import ${{ .__data__.python_api_names[0] }}$


            def test():
                ...
          render: python
        validations:
          required: true
    body_fix_cli:
      - '*{{ issue.__temp__.header_bug }}*'
      - '*{{ issue.__temp__.address_cli }}*'
      - ${{ issue.__data__.issue_summary }}$
      - type: textarea
        id: test_case
        attributes:
          label: Test Case
          description: >-
            Please provide a [test case](https://docs.pytest.org/en/stable/getting-started.html)
            that demonstrates the bug:

            - In the `test` function below,
            replace the value of `command` with the
            exact command that is causing the problem.

            - Replace the value of `expected_return_code`
            with the expected return code of the command.

            - Replace the value of `expected_output` with the expected output of the command.
            Use [`assert` statements](https://docs.pytest.org/en/stable/how-to/assert.html)
            to specify the expected results.

            - If the command has side effects,
            add further [`assert` statements](https://docs.pytest.org/en/stable/how-to/assert.html)
            to specify the expected results.
          value: |
            import subprocess


            def test():
                command = ""
                expected_return_code = 0
                expected_output = b""

                result = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                assert result.returncode == expected_return_code
                assert result.stdout == expected_output
          render: python
        validations:
          required: true
    body_fix_gui:
      - '*{{ issue.__temp__.header_bug }}*'
      - '*{{ issue.__temp__.address_gui }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.mre_generic }}$
      - ${{ issue.__data__.stderr_optional }}$
    body_fix_setup:
      - '*{{ issue.__temp__.header_bug }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.mre_generic }}$
      - ${{ issue.__data__.stderr_optional }}$
    body_feat_api:
      - '*{{ issue.__temp__.header_feature }}*'
      - '*{{ issue.__temp__.address_api }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_feat_cli:
      - '*{{ issue.__temp__.header_feature }}*'
      - '*{{ issue.__temp__.address_cli }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_feat_gui:
      - '*{{ issue.__temp__.header_feature }}*'
      - '*{{ issue.__temp__.address_gui }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_change_api:
      - '*{{ issue.__temp__.header_breaking }}*'
      - '*{{ issue.__temp__.address_api }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_change_cli:
      - '*{{ issue.__temp__.header_breaking }}*'
      - '*{{ issue.__temp__.address_cli }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_change_gui:
      - '*{{ issue.__temp__.header_breaking }}*'
      - '*{{ issue.__temp__.address_gui }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_fix_doc:
      - '*{{ issue.__temp__.header }}*'
      - ${{ issue.__data__.verify_bug }}$
      - '*{{ issue.__data__.agreements }}*'
      - ${{ issue.__data__.heading_bug_report }}$
      - ${{ issue.__data__.version }}$
      - '*{{ issue.__temp__.address_doc }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.mre_generic }}$
    body_feat_doc:
      - '*{{ issue.__temp__.header }}*'
      - ${{ issue.__data__.verify_feat }}$
      - '*{{ issue.__data__.agreements }}*'
      - ${{ issue.__data__.heading_feature_request }}$
      - ${{ issue.__data__.version }}$
      - '*{{ issue.__temp__.address_doc }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_change_doc:
      - '*{{ issue.__temp__.header }}*'
      - ${{ issue.__data__.verify_change }}$
      - '*{{ issue.__data__.agreements }}*'
      - ${{ issue.__data__.heading_change_request }}$
      - ${{ issue.__data__.version }}$
      - '*{{ issue.__temp__.address_doc }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_refactor:
      - '*{{ issue.__temp__.header }}*'
      - '*{{ issue.__data__.agreements }}*'
      - ${{ issue.__data__.heading_change_request }}$
      - ${{ issue.__data__.version }}$
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_config:
      - '*{{ issue.__temp__.header }}*'
      - '*{{ issue.__data__.agreements }}*'
      - ${{ issue.__data__.heading_change_request }}$
      - ${{ issue.__data__.version }}$
      - '*{{ issue.__temp__.address_config }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_devops:
      - '*{{ issue.__temp__.header }}*'
      - '*{{ issue.__data__.agreements }}*'
      - ${{ issue.__data__.heading_change_request }}$
      - ${{ issue.__data__.version }}$
      - '*{{ issue.__temp__.address_config }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_maintenance:
      - '*{{ issue.__temp__.header }}*'
      - '*{{ issue.__data__.agreements }}*'
      - ${{ issue.__data__.heading_change_request }}$
      - ${{ issue.__data__.version }}$
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    # Body Header Templates
    header_bug:
      - '*{{ issue.__temp__.header }}*'
      - ${{ issue.__data__.verify_bug }}$
      - '*{{ issue.__data__.agreements }}*'
      - '*{{ issue.__data__.environment }}*'
      - ${{ issue.__data__.heading_bug_report }}$
      - ${{ issue.__data__.version }}$
    header_feature:
      - '*{{ issue.__temp__.header }}*'
      - ${{ issue.__data__.verify_feat }}$
      - '*{{ issue.__data__.agreements }}*'
      - ${{ issue.__data__.heading_feature_request }}$
      - ${{ issue.__data__.version }}$
    header_breaking:
      - '*{{ issue.__temp__.header }}*'
      - ${{ issue.__data__.verify_change }}$
      - '*{{ issue.__data__.agreements }}*'
      - ${{ issue.__data__.heading_change_request }}$
      - ${{ issue.__data__.version }}$
    header:
      - type: markdown
        attributes:
          value: >-
            <p align="justify">
              Thank you for providing feedback on ${{ name }}$;
              we greatly appreciate your contribution!
              Before submitting a ticket,
              please take a moment to review and accept our terms and conditions.
            </p>
      - type: markdown
        attributes:
          value: |
            <br>

            ## 🤝 Terms and Conditions
      - type: markdown
        attributes:
          value: |
            ### ⛔ Choosing the Right Form

            <p align="justify">
              Please note that this form is specifically for ${{ .__temp__.purpose }}$,
              For other types of issues and requests, select the appropriate form
              from the <a href="${{ repo.url.issues.chooser }}$">issue template chooser</a>.
              If you are unsure about which form to choose or have another inquiry,
              please open a discussion in our <a href="${{ repo.url.discussions.home }}$">discussion forum</a>.
            </p>
    # Template Chooser Descriptions
    description_bug: >-
      Report problems and errors in
      ${{ .__data__.pkg_name }}$'s ${{ .__data__.pkg_entry_name }}$.
    description_feat: >-
      Request backward-compatible improvements and new functionalities
      in ${{ .__data__.pkg_name }}$'s ${{ .__data__.pkg_entry_name }}$.
    description_break: >-
      Request backward-incompatible changes to
      ${{ .__data__.pkg_name }}$'s ${{ .__data__.pkg_entry_name }}$.
    # Form Purpose
    purpose_bug: >-
      reporting a <b>non-security-related bug in
      ${{ .__data__.pkg_name }}$'s ${{ .__data__.pkg_entry_name }}$</b>,
      i.e. an unexpected behavior or result
      in ${{ .__data__.pkg_name }}$'s ${{ .__data__.pkg_entry_description }}$.
    purpose_feat: >-
      requesting a <b>backward-compatible improvement</b> or <b>new functionality</b> in
      ${{ .__data__.pkg_name }}$'s ${{ .__data__.pkg_entry_name }}$,
      i.e. a non-breaking change (that is not a bug fix) in
      ${{ .__data__.pkg_name }}$'s ${{ .__data__.pkg_entry_description }}$.
    purpose_break: >-
      requesting a <b>backward-incompatible change</b> in
      ${{ .__data__.pkg_name }}$'s ${{ .__data__.pkg_entry_name }}$,
      i.e. a breaking change in behaviour or functionalities of
      ${{ .__data__.pkg_name }}$'s ${{ .__data__.pkg_entry_description }}$.
    # Address
    address_api:
      - type: dropdown
        id: entrypoint
        attributes:
          label: API Entry Point
          description: Please select the relevant API entry point.
          multiple: false
          options: ${{ .__data__.python_api_names }}$
          default: 0
        validations:
          required: true
      - type: input
        id: endpoint
        attributes:
          label: Fully Qualified Name
          description: >-
            Please provide the fully qualified name (minus the entry point)
            of the relevant API endpoint.
            For example, for a method at
            `${{ .__data__.python_api_names[0] }}$.module_name.ClassName.method_name`
            in the entry point `${{ .__data__.python_api_names[0] }}$`,
            you should write `module_name.ClassName.method_name`.
          placeholder: module_name.ClassName.method_name
        validations:
          required: true
    address_cli:
      - type: dropdown
        id: entrypoint
        attributes:
          label: CLI Entry Point
          description: Please select the relevant CLI entry point.
          multiple: false
          options: ${{ .__data__.cli_names }}$
          default: 0
        validations:
          required: true
    address_gui:
      - type: dropdown
        id: entrypoint
        attributes:
          label: GUI Entry Point
          description: Please select the affected GUI entry point.
          multiple: false
          options: ${{ .__data__.gui_names }}$
          default: 0
        validations:
          required: true
    address_doc:
      - type: input
        id: url
        attributes:
          label: URL
          description: >-
            Please provide the URL of the relevant web page or repository file.
          placeholder: ${{ web.url.home }}$
        validations:
          required: true
    address_config:
      - type: input
        id: url
        attributes:
          label: URL
          description: >-
            Please provide the URL of the relevant configuration file in the repository.
          placeholder: ${{ repo.url.blob }}$/${{ control.path.config }}$
        validations:
          required: true
      - type: input
        id: jsonpath
        attributes:
          label: Path
          description: >-
            Please provide the JSONPath expression to the relevant configuration field.
          placeholder: $.license.expression
        validations:
          required: true
    labels:
      - [ commit, '${{ ..commit }}$' ]
      - [ release, '#{{ return get(f"commit.release.{get("..commit")}").get("action", "local") }}#' ]
  __data__:
    title_pkg: ' ${{ theme.icon.pkg }}$ App'
    title_doc: ' ${{ theme.icon.docs }}$ Docs'
    title_test: ' ${{ theme.icon.test }}$ Tests'
    title_api: ' ${{ theme.icon.api }}$ API'
    title_cli: ' ${{ theme.icon.cli }}$ CLI'
    title_gui: ' ${{ theme.icon.gui }}$ GUI'
    title_setup: ' ${{ theme.icon.setup }}$ Setup'
    title_bug: ' ${{ theme.icon.fix }}$ Bug Report'
    title_feat: ' ${{ theme.icon.feat }}$ Feature Request'
    title_breaking: ' ${{ theme.icon.change }}$ Change Request'
    heading_bug_report:
      type: markdown
      attributes:
        value: |
          <br>

          ## 🐞 Bug Report
    heading_feature_request:
      type: markdown
      attributes:
        value: |
          <br>

          ## ✨ Feature Request
    heading_change_request:
      type: markdown
      attributes:
        value: |
          <br>

          ## 💥 Change Request
    agreements:
      - type: markdown
        attributes:
          value: |
            ### ℹ️ Choosing the Right Title

            <p align="justify">Please write a concise and descriptive title and
            use relevant keywords to help others find the issue.</p>
      - type: markdown
        attributes:
          value: '### ✅ Agreements'
      - type: checkboxes
        id: terms
        attributes:
          label: >-
            To submit an issue, please agree to the following terms and conditions:
          options:
            - label: >-
                I confirm that I am following ${{ name }}$'s
                [Contribution Guidelines](${{ web.page.contribute.url }}$).
              required: true
            - label: >-
                I agree to follow ${{ name }}$'s
                [Code of Conduct](${{ file_coc.url }}$).
              required: true
      - type: markdown
        attributes:
          value: '### 🧑‍💻️ Collaboration'
      - type: checkboxes
        id: collab
        attributes:
          label: |
            Thank you again for filling out this issue ticket.
            If you are willing to collaborate on its design and implementation,
            please select the option below.
          options:
            - label: >-
                I am willing to collaborate on this issue and submit a pull request.
              required: false
    environment:
      - type: markdown
        attributes:
          value: |
            <br>

            ## 🎛 Environment Specifications
      - type: dropdown
        id: os
        attributes:
          label: Operating System
          description: |
            Please select all operating systems on which you have encountered the bug.
          multiple: true
          options: ${{ project.os_names }}$
        validations:
          required: true
      - type: dropdown
        id: python_versions
        attributes:
          label: Python Version
          description: |
            Please select all Python versions in which you have encountered the bug.
          multiple: true
          options: ${{ project.python_versions }}$
          default: 0
        validations:
          required: true
      - type: dropdown
        id: package_manager
        attributes:
          label: Package Manager
          description: |
            Please select the package manager used to download and install ${{ name }}$.
          multiple: false
          options: ${{ project.package_managers }}$
          default: 0
        validations:
          required: true
      - type: textarea
        id: environment
        attributes:
          label: Environment
          description: >-
            Please provide the details of all installed packages and their exact versions
            in the environment where you have encountered the bug. Follow the instructions below
            based on the package manager you have selected:

            1. **`pip`**: Run `pip freeze > requirements.txt` in your terminal within the environment,
            and copy the contents of the generated `requirements.txt` file here.

            2. **`conda`**: Run `conda env export > environment.yml` in your terminal within the environment
            (or alternatively `conda env export -n {YOUR_ENVIRONMENT_NAME} > environment.yml`),
            and copy the contents of the generated `environment.yml` file here.
          render: yaml
        validations:
          required: true
    version:
      type: dropdown
      id: version
      attributes:
        label: Version
        description: |
          Please select all relevant ${{ name }}$ versions.
        multiple: true
        options: ${{ project.versions }}$
        default: 0
      validations:
        required: true
    issue_summary:
      type: textarea
      id: summary
      attributes:
        label: Summary
        description: Please provide a summary of the issue.
      validations:
        required: true
      changelog: true
    mre_generic:
      type: textarea
      id: mre
      attributes:
        label: Minimal Reproducible Example (MRE)
        description: >-
          Please provide an exact step-by-step instruction to reproduce the problem.
          You can also include screenshots/recordings by dragging and dropping them here.
        placeholder: |
          1. ...
          2. ...
          3. ...
      validations:
        required: true
    stderr_optional:
      type: textarea
      id: stderr
      attributes:
        label: Error Message
        description: If applicable, provide the full traceback of the error message.
        render: shell
      validations:
        required: false
    proposal:
      type: textarea
      id: proposal
      attributes:
        label: Proposal
        description: Please describe your proposal in detail.
      validations:
        required: true
      changelog: true
    verify_bug:
      type: markdown
      attributes:
        value: |
          ### ⚠️ Verifying the Bug

          <p align="justify">
            Before submitting a report, please make sure that you are following our
            <a href="${{ web.page.contribute.url }}$">Bug Report Guidelines</a> to verify that:
          </p>

          - <p align="justify">The issue you are experiencing is in fact a bug, and not a documented expected behavior.</p>
          - <p align="justify">The bug is reproducible in the latest version of the release, and has not yet been reported.</p>
    verify_feat:
      type: markdown
      attributes:
        value: |
          ### ⚠️ Verifying the Request

          <p align="justify">
            Before submitting a report, please make sure that you are following our
            <a href="${{ web.page.contribute.url }}$">Feature Request Guidelines</a> to verify that:
          </p>

          - <p align="justify">Your request is for a backward-compatible change, and not a breaking change or a bug fix.</p>
          - <p align="justify">The request is not implemented in the latest version of the release, and has not yet been filed.</p>
    verify_change:
      type: markdown
      attributes:
        value: |
          ### ⚠️ Verifying the Request

          <p align="justify">
            Before submitting a report, please make sure that you are following our
            <a href="${{ web.page.contribute.url }}$">Change Request Guidelines</a> to verify that:
          </p>

          - <p align="justify">Your request is for a backward-incompatible change, and not a new feature, improvement, or bug fix.</p>
          - <p align="justify">The request is not implemented in the latest version of the release, and has not yet been filed.</p>
    custom_pkg_api:
      pkg_name: ${{ pypkg_main.name }}$
      pkg_entry_name: 'API'
      pkg_entry_description: 'Python application programming interface'
      python_api_names: ${{ project.python_api_names }}$
    custom_pkg_cli:
      pkg_name: ${{ pypkg_main.name }}$
      pkg_entry_name: 'CLI'
      pkg_entry_description: 'command-line interface'
      cli_names: ${{ project.cli_names }}$
    custom_pkg_gui:
      pkg_name: ${{ pypkg_main.name }}$
      pkg_entry_name: 'GUI'
      pkg_entry_description: 'graphical user interface'
      gui_names: ${{ project.gui_names }}$
    custom_test_api:
      pkg_name: ${{ pypkg_test.name }}$
      pkg_entry_name: 'API'
      pkg_entry_description: 'Python application programming interface'
      python_api_names: ${{ project.test_python_api_names }}$
    custom_test_cli:
      pkg_name: ${{ pypkg_test.name }}$
      pkg_entry_name: 'CLI'
      pkg_entry_description: 'command-line interface'
      cli_names: ${{ project.test_cli_names }}$
    custom_test_gui:
      pkg_name: ${{ pypkg_test.name }}$
      pkg_entry_name: 'GUI'
      pkg_entry_description: 'graphical user interface'
      gui_names: ${{ project.test_gui_names }}$
  protocol:
    config:
      default:
        pr_title: '{{ data.summary }}'
    template:
      body:
        - |
          {%- for label in form.id_labels + form.labels -%}
          {{
            mdit.element.badge(
              service="static",
              label=label.prefix,
              args={"message": label.suffix if label.prefix else label.name},
              style=ccc.theme.badge.style,
              color=label.color,
              label_color=ccc.theme.badge.color.grey,
              height=ccc.theme.badge.height,
            ).source()
          }}{{ "&nbsp;" * ccc.theme.badge.separator }}
          {%- endfor -%}
          {%- set versions = labels["version"] | map(attribute='suffix') | join(' | ') -%}
          {{
            mdit.element.badge(
              service="static",
              label=labels["version"][0].prefix,
              args={"message": versions},
              style=ccc.theme.badge.style,
              color=labels["version"][0].color,
              label_color=ccc.theme.badge.color.grey,
              height=ccc.theme.badge.height,
            ).source()
          }}
      sections:
        - heading: Status
          body:
            - class: badges
              style: ${{ theme.badge.style }}$
              height: ${{ theme.badge.height }}$
              label_color: ${{ theme.badge.color.grey }}$
              separator: ${{ theme.badge.separator }}$
              args:
                user: ${{ repo.owner }}$
                repo: ${{ repo.name }}$
                kind: issues
                number: '{{ issue.number }}'
              items:
                - service: static
                  label: State
                  args:
                    message: '{{ issue.state }}'
                  color: >-
                    {{ ccc.theme.badge.color.green if issue.state == "open" else ccc.theme.badge.color.red }}
                - service: static
                  label: Last Status
                  args:
                    message: '{{ status_label.suffix }}'
                  title: '{{ status_label.description }}'
                  color: >-
                    {{ status_label.color if status_label.color is defined else ccc.label.status.color }}
                - service: github
                  endpoint: issue_details
                  label: Last Update
                  args:
                    property: last-update
                - service: github
                  endpoint: issue_details
                  label: Comments
                  args:
                    property: comments
            - |
              {%- for id in ["triage", "planning", "requirement_analysis", "design"] -%}
              - [{{ "X" if status_label.id > id else " " }}] {{ id.replace("_", " ").title() }}
              {% endfor -%}
              {%- if pull_requests %}
              The implementation, testing, and deployment are tracked in the following PRs:
              {% for pull in pull_requests -%}
              - [{{ "X" if pull.merged else " " }}] #{{ pull.number }} (branch: [`{{ pull.head.name }}`]({{ pull.head.url.homepage }}))
              {% endfor -%}
              {%- endif -%}
        - heading: User Requirements Document (URD)
          body:
            - class: badges
              style: ${{ theme.badge.style }}$
              height: ${{ theme.badge.height }}$
              label_color: ${{ theme.badge.color.grey }}$
              separator: ${{ theme.badge.separator }}$
              args:
                user: ${{ repo.owner }}$
                repo: ${{ repo.name }}$
                kind: issues
                number: '{{ issue.number }}'
              items:
                - service: static
                  label: Issue Type
                  args:
                    message: '{{ form.name }}'
                  title: '{{ form.description }}'
                  color: ${{ theme.badge.color.blue }}$
                - service: github
                  endpoint: issue_details
                  label: Submitted
                  args:
                    property: age
                  color: ${{ theme.badge.color.blue }}$
                - service: static
                  label: Submitted By
                  args:
                    message: '{{ issue.user.name.full }}'
                  link: '{{ issue.user.github.url }}'
                  color: ${{ theme.badge.color.blue }}$
            - |
              ### Summary

              {% if input.endpoint -%}
              {{
                mdit.element.badge(
                  service="static",
                  label="Endpoint",
                  args={"message": input.entrypoint + "." + input.endpoint},
                  style=ccc.theme.badge.style,
                  color=ccc.theme.badge.color.blue,
                  label_color=ccc.theme.badge.color.grey,
                  height=ccc.theme.badge.height,
                ).source()
              }}{{ "&nbsp;" * ccc.theme.badge.separator }}
              {%- elif input.entrypoint -%}
              {{
                mdit.element.badge(
                  service="static",
                  label="Endpoint",
                  args={"message": input.entrypoint},
                  style=ccc.theme.badge.style,
                  color=ccc.theme.badge.color.blue,
                  label_color=ccc.theme.badge.color.grey,
                  height=ccc.theme.badge.height,
                ).source()
              }}{{ "&nbsp;" * ccc.theme.badge.separator }}
              {%- endif -%}
              {%- if input.url %}
              {{
                mdit.element.badge(
                  service="static",
                  label="URL",
                  args={"message": input.url},
                  style=ccc.theme.badge.style,
                  color=ccc.theme.badge.color.blue,
                  label_color=ccc.theme.badge.color.grey,
                  height=ccc.theme.badge.height,
                  link=input.url,
                ).source()
              }}{{ "&nbsp;" * ccc.theme.badge.separator }}
              {%- endif %}
              {%- if input.jsonpath %}
              {{
                mdit.element.badge(
                  service="static",
                  label="JSON Path",
                  args={"message": input.jsonpath},
                  style=ccc.theme.badge.style,
                  color=ccc.theme.badge.color.blue,
                  label_color=ccc.theme.badge.color.grey,
                  height=ccc.theme.badge.height,
                  link=input.url,
                ).source()
              }}{{ "&nbsp;" * ccc.theme.badge.separator }}
              {%- endif %}

              {{ input.summary }}

              {% if input.proposal -%}
              ### Proposal

              {{ input.proposal }}
              {%- endif %}

              {% if input.test_case -%}
              ### Test Case

              ```python
              {{ input.test_case }}
              ```
              {%- endif %}

              {% if input.mre -%}
              ### Minimal Reproducible Example

              {{ input.mre }}
              {%- endif %}

              {% if input.stderr -%}
              ### Output Log

              ```bash
              {{ input.stderr }}
              ```
              {%- endif %}

              {% if input.environment -%}
              ### Test Environment

              {%- set os_names = input.os | join(' | ') -%}
              {%- set py_vers = input.python_versions | join(' | ') -%}
              {{
                mdit.element.badges(
                  service="static",
                  style=ccc.theme.badge.style,
                  color=ccc.theme.badge.color.red,
                  label_color=ccc.theme.badge.color.grey,
                  height=ccc.theme.badge.height,
                  items=[
                    {
                      "label": "⚙️ Operating Systems",
                      "args": {"message": os_names},
                    },
                    {
                      "label": "Python Versions",
                      "args": {"message": py_vers},
                      "logo": ccc.web.path.source + "_media/logo_ext/python.svg",
                      "logo_type": "file",
                      "logo_media_type": "svg+xml",
                    },
                    {
                      "label": ccc.theme.icon.pkg + " Package Manager",
                      "args": {"message": input.package_manager},
                    },
                  ]
                )
              }}

              <details><summary><b>Environment</b></summary>

              ```yaml
              {{ input.environment }}
              ```

              </details>
              {%- endif %}
        - heading: Triage
          body: |
            {{ data.triage }}
        - heading: Plan
          body: |
            {{ data.summary }}

            {{ data.description }}
        - heading: Software Requirements Specification (SRS)
          body: |
            {{ data.srs }}
        - heading: Timeline
          body: |
            <div align="center">

            {{ data.timeline }}

            </div>

            {{ config }}

            {{ inputs }}
    data:
      summary:
        value: "\n\n**TBD**\n\n"
        changelog: true
      description:
        value: "\n\n\n"
        changelog: true
      triage:
        value: "\n\n**TBD**\n\n"
      plan:
        value: "\n\n**TBD**\n\n"
      srs:
        value: "\n\n**TBD**\n\n"
      timeline:
        value: >-

          |    Date    |   Time   |              Actor               |                      Description                      |

          | ---------- | -------- | -------------------------------- | ----------------------------------------------------- |
        template: |
          {%- macro make_entry(actor, description) -%}
            | {{ now.strftime("%Y.%m.%d") }} | {{ now.strftime("%H:%M:%S") }} | {{ "{:<32}".format(actor) }} | {{ "{:<53}".format(description) }} |
          {%- endmacro -%}

          {%- macro make_description() -%}
            {%- if action == "assigned" -%}
              {%- if event == "issues" -%}
                Issue assigned to {{ assignee.md_name }}.
              {%- elif event == "pull_request" -%}
                Pull request assigned to {{ assignee.md_name }}.
              {%- endif -%}
            {%- elif action == "unassigned" -%}
              {%- if event == "issues" -%}
                Issue unassigned from {{ assignee.md_name }}.
              {%- elif event == "pull_request" -%}
                Pull request unassigned from {{ assignee.md_name }}.
              {%- endif -%}
            {%- elif action == "review_requested" -%}
              Review assigned to {{ requested_reviewer.md_name }}.
            {%- elif action == "review_request_removed" -%}
              Review unassigned from {{ requested_reviewer.md_name }}.
            {%- elif action == "synchronize" -%}
              New commits pushed to [{{ pull_request.head.name }}]({{ pull_request.head.url.homepage }}) (CI [{{ context.run_id }}]({{ context.run_url }})).
            {%- elif action == "labeled" -%}
              {%- set category = label.category -%}
              {%- if category == "type" -%}
                  Type set to `{{ label.suffix }}`.
              {%- elif category == "scope" -%}
                  Scope set to `{{ label.suffix }}`.
              {%- elif category == "version" -%}
                    Target version set to `{{ label.suffix }}`.
              {%- elif category == "branch" -%}
                    Target branch set to `{{ label.suffix }}`.
              {%- elif category == "status" -%}
                {%- set status = label.id or label.id -%}
                {%- if status == "triage" -%}
                  Entered the triage phase.
                {%- elif status == "rejected" -%}
                  Rejected and closed.
                {%- elif status == "duplicate" -%}
                  Marked as duplicate and closed.
                {%- elif status == "invalid" -%}
                  Marked as invalid and closed.
                {%- elif status == "planning" -%}
                  Entered the planning phase.
                {%- elif status == "requirement_analysis" -%}
                  Entered the requirement analysis phase.
                {%- elif status == "design" -%}
                  Entered the design phase.
                {%- elif status == "implementation" -%}
                  Entered the implementation phase.
                {%- elif status == "testing" -%}
                  Entered the testing phase.
                {%- elif status == "deploy_alpha" -%}
                  Deployed as alpha release.
                {%- elif status == "deploy_beta" -%}
                  Deployed as beta release.
                {%- elif status == "deploy_rc" -%}
                  Deployed as release candidate.
                {%- elif status == "deploy_final" -%}
                  Deployed as final release.
                {%- else -%}
                  Status changed to {{ status }}.
                {%- endif -%}
              {%- endif -%}
            {%- elif action == "opened" -%}
              {%- if event == "issues" -%}
                Issue ticket #{{ issue.number }} submitted by {{ issue.user.md_name }}.
              {%- elif event == "pull_request" -%}
                Pull request #{{ pull_request.number }} opened from branch [{{ pull_request.head.name }}]({{ pull_request.head.url.homepage }}) to branch [{{ pull_request.base.name }}]({{ pull_request.base.url.homepage }}) by {{ pull_request.user.md_name }}.
              {%- endif -%}
            {%- endif -%}
          {%- endmacro -%}
          {%- set description = make_description() -%}
          {{ "\n" ~ make_entry(sender.md_name, description) if description else "" -}}
  forms:
    # Package
    - id: pkg_api_fix
      id_labels:
        - [ type, fix ]
        - [ scope, pkg ]
        - [ component, api ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.python_api_names")) }}#'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_api }}$${{ issue.__data__.title_bug }}$
      description: ${{ issue.__temp__.description_bug }}$
      __data__: ${{ issue.__data__.custom_pkg_api }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_bug }}$
      body: ${{ issue.__temp__.body_fix_api }}$
    - id: pkg_cli_fix
      id_labels:
        - [ type, fix ]
        - [ scope, pkg ]
        - [ component, cli ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.cli_names")) }}#'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_cli }}$${{ issue.__data__.title_bug }}$
      description: ${{ issue.__temp__.description_bug }}$
      __data__: ${{ issue.__data__.custom_pkg_cli }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_bug }}$
      body: ${{ issue.__temp__.body_fix_cli }}$
    - id: pkg_gui_fix
      id_labels:
        - [ type, fix ]
        - [ scope, pkg ]
        - [ component, gui ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.gui_names")) }}#'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_gui }}$${{ issue.__data__.title_bug }}$
      description: ${{ issue.__temp__.description_bug }}$
      __data__: ${{ issue.__data__.custom_pkg_gui }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_bug }}$
      body: ${{ issue.__temp__.body_fix_gui }}$
    - id: pkg_build_fix
      id_labels:
        - [ type, fix ]
        - [ scope, pkg ]
        - [ component, build ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_setup }}$${{ issue.__data__.title_bug }}$
      description: Report problems in downloading, installation, or initialization of ${{ pypkg_main.name }}$.
      __temp__:
        purpose: >-
          reporting a <b>non-security-related bug in ${{ name }}$'s setup process</b>,
          i.e. an unexpected behavior that occurs during
          the download, installation, or initialization of the application.
      body: ${{ issue.__temp__.body_fix_setup }}$
    - id: pkg_api_feat
      id_labels:
        - [ type, feat ]
        - [ scope, pkg ]
        - [ component, api ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.python_api_names")) }}#'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_api }}$${{ issue.__data__.title_feat }}$
      description: ${{ issue.__temp__.description_feat }}$
      __data__: ${{ issue.__data__.custom_pkg_api }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_feat }}$
      body: ${{ issue.__temp__.body_feat_api }}$
    - id: pkg_cli_feat
      id_labels:
        - [ type, feat ]
        - [ scope, pkg ]
        - [ component, cli ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.cli_names")) }}#'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_cli }}$${{ issue.__data__.title_feat }}$
      description: ${{ issue.__temp__.description_feat }}$
      __data__: ${{ issue.__data__.custom_pkg_cli }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_feat }}$
      body: ${{ issue.__temp__.body_feat_cli }}$
    - id: pkg_gui_feat
      id_labels:
        - [ type, feat ]
        - [ scope, pkg ]
        - [ component, gui ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.gui_names")) }}#'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_gui }}$${{ issue.__data__.title_feat }}$
      description: ${{ issue.__temp__.description_feat }}$
      __data__: ${{ issue.__data__.custom_pkg_gui }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_feat }}$
      body: ${{ issue.__temp__.body_feat_gui }}$
    - id: pkg_api_change
      id_labels:
        - [ type, change ]
        - [ scope, pkg ]
        - [ component, api ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.python_api_names")) }}#'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_api }}$${{ issue.__data__.title_breaking }}$
      description: ${{ issue.__temp__.description_break }}$
      __data__: ${{ issue.__data__.custom_pkg_api }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_break }}$
      body: ${{ issue.__temp__.body_change_api }}$
    - id: pkg_cli_change
      id_labels:
        - [ type, change ]
        - [ scope, pkg ]
        - [ component, cli ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.cli_names")) }}#'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_cli }}$${{ issue.__data__.title_breaking }}$
      description: ${{ issue.__temp__.description_break }}$
      __data__: ${{ issue.__data__.custom_pkg_cli }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_break }}$
      body: ${{ issue.__temp__.body_change_cli }}$
    - id: pkg_gui_change
      id_labels:
        - [ type, change ]
        - [ scope, pkg ]
        - [ component, gui ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.gui_names")) }}#'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_gui }}$${{ issue.__data__.title_breaking }}$
      description: ${{ issue.__temp__.description_break }}$
      __data__: ${{ issue.__data__.custom_pkg_gui }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_break }}$
      body: ${{ issue.__temp__.body_change_gui }}$
    # Documentation
    - id: docs_fix
      id_labels:
        - [ type, fix ]
        - [ scope, docs ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      name: ${{ issue.__data__.title_doc }}$${{ issue.__data__.title_bug }}$
      description: >-
        Report problems and errors
        in ${{ name }}$'s website and documentation materials.
      __temp__:
        purpose: >-
          reporting a <b>non-security-related bug in
          ${{ name }}$'s website and documentation materials</b>,
          e.g. misspellings and other mechanical errors,
          broken links and images, layout issues, etc.
      body: ${{ issue.__temp__.body_fix_doc }}$
    - id: docs_feat
      id_labels:
        - [ type, feat ]
        - [ scope, docs ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      name: ${{ issue.__data__.title_doc }}$${{ issue.__data__.title_feat }}$
      description: >-
        Request backward-compatible improvements and new content
        in ${{ name }}$'s website and documentation materials.
      __temp__:
        purpose: >-
          requesting a <b>backward-compatible improvement</b> or <b>new content</b> in
          ${{ name }}$'s website and documentation materials</b>,
          i.e. a change that is not a bug fix
          and does not break existing references or functionalities.
      body: ${{ issue.__temp__.body_feat_doc }}$
    - id: docs_change
      id_labels:
        - [ type, change ]
        - [ scope, docs ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      name: ${{ issue.__data__.title_doc }}$${{ issue.__data__.title_breaking }}$
      description: >-
        Request backward-incompatible changes
        to ${{ name }}$'s website and documentation materials.
      __temp__:
        purpose: >-
          requesting a <b>backward-incompatible change</b> in
          ${{ name }}$'s website and documentation materials</b>,
          i.e. a change that breaks existing references or functionalities.
      body: ${{ issue.__temp__.body_change_doc }}$
    # Test Suite
    - id: test_api_fix
      id_labels:
        - [ type, fix ]
        - [ scope, test ]
        - [ scope, test-api ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.test_python_api_names")) }}#'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_api }}$${{ issue.__data__.title_bug }}$
      description: ${{ issue.__temp__.description_bug }}$
      __data__: ${{ issue.__data__.custom_test_api }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_bug }}$
      body: ${{ issue.__temp__.body_fix_api }}$
    - id: test_cli_fix
      id_labels:
        - [ type, fix ]
        - [ scope, test ]
        - [ component, cli ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.test_cli_names")) }}#'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_cli }}$${{ issue.__data__.title_bug }}$
      description: ${{ issue.__temp__.description_bug }}$
      __data__: ${{ issue.__data__.custom_test_cli }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_bug }}$
      body: ${{ issue.__temp__.body_fix_cli }}$
    - id: test_gui_fix
      id_labels:
        - [ type, fix ]
        - [ scope, test ]
        - [ component, gui ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.test_gui_names")) }}#'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_gui }}$${{ issue.__data__.title_bug }}$
      description: ${{ issue.__temp__.description_bug }}$
      __data__: ${{ issue.__data__.custom_test_gui }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_bug }}$
      body: ${{ issue.__temp__.body_fix_gui }}$
    - id: test_build_fix
      id_labels:
        - [ type, fix ]
        - [ scope, test ]
        - [ component, build ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_setup }}$${{ issue.__data__.title_bug }}$
      description: Report problems in downloading, installation, or initialization of ${{ pypkg_test.name }}$.
      __temp__:
        purpose: >-
          reporting a <b>non-security-related bug in ${{ name }}$'s setup process</b>,
          i.e. an unexpected behavior that occurs during
          the download, installation, or initialization of the application.
      body: ${{ issue.__temp__.body_fix_setup }}$
    - id: test_api_feat
      id_labels:
        - [ type, feat ]
        - [ scope, test ]
        - [ component, api ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.test_python_api_names")) }}#'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_api }}$${{ issue.__data__.title_feat }}$
      description: ${{ issue.__temp__.description_feat }}$
      __data__: ${{ issue.__data__.custom_test_api }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_feat }}$
      body: ${{ issue.__temp__.body_feat_api }}$
    - id: test_cli_feat
      id_labels:
        - [ type, feat ]
        - [ scope, test ]
        - [ component, cli ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.test_cli_names")) }}#'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_cli }}$${{ issue.__data__.title_feat }}$
      description: ${{ issue.__temp__.description_feat }}$
      __data__: ${{ issue.__data__.custom_test_cli }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_feat }}$
      body: ${{ issue.__temp__.body_feat_cli }}$
    - id: test_gui_feat
      id_labels:
        - [ type, feat ]
        - [ scope, test ]
        - [ component, gui ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.test_gui_names")) }}#'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_gui }}$${{ issue.__data__.title_feat }}$
      description: ${{ issue.__temp__.description_feat }}$
      __data__: ${{ issue.__data__.custom_test_gui }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_feat }}$
      body: ${{ issue.__temp__.body_feat_gui }}$
    - id: test_api_change
      id_labels:
        - [ type, change ]
        - [ scope, test ]
        - [ component, api ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.test_python_api_names")) }}#'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_api }}$${{ issue.__data__.title_breaking }}$
      description: ${{ issue.__temp__.description_break }}$
      __data__: ${{ issue.__data__.custom_test_api }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_break }}$
      body: ${{ issue.__temp__.body_change_api }}$
    - id: test_cli_change
      id_labels:
        - [ type, change ]
        - [ scope, test ]
        - [ component, cli ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.test_cli_names")) }}#'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_cli }}$${{ issue.__data__.title_breaking }}$
      description: ${{ issue.__temp__.description_break }}$
      __data__: ${{ issue.__data__.custom_test_cli }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_break }}$
      body: ${{ issue.__temp__.body_change_cli }}$
    - id: test_gui_change
      id_labels:
        - [ type, change ]
        - [ scope, test ]
        - [ component, gui ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.test_gui_names")) }}#'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_gui }}$${{ issue.__data__.title_breaking }}$
      description: ${{ issue.__temp__.description_break }}$
      __data__: ${{ issue.__data__.custom_test_gui }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_break }}$
      body: ${{ issue.__temp__.body_change_gui }}$
    # Refactoring
    - id: refactor
      id_labels:
        - [ type, refactor ]
      labels:
        - [ scope, repo ]
        - '*{{ issue.__temp__.labels }}*'
      name: ' ${{ theme.icon.refactor }}$ Refactoring Request'
      description: >-
        Request code formatting and refactoring in ${{ name }}$'s source files.
      __temp__:
        purpose: >-
          requesting a <b>code formatting and refactoring</b> in ${{ name }}$'s source files,
          i.e. a change that improves the code quality, readability, and maintainability,
          without affecting the code's runtime behavior.
      body: ${{ issue.__temp__.body_refactor }}$
    # Internal
    - id: config
      id_labels:
        - [ type, config ]
      labels:
        - [ scope, repo ]
        - '*{{ issue.__temp__.labels }}*'
      name: ' ${{ theme.icon.config }}$ Configuration Request'
      description: >-
        Request a change in ${{ name }}$'s metadata and settings.
      __temp__:
        purpose: >-
          requesting a <b>reconfiguration</b> in ${{ name }}$'s metadata and settings,
          such as project information and other options that do not fall under
          other issue categories.
      body: ${{ issue.__temp__.body_config }}$
    - id: ci
      id_labels:
        - [ type, ci ]
      labels:
        - [ scope, repo ]
        - '*{{ issue.__temp__.labels }}*'
      name: ' ${{ theme.icon.ci }}$ DevOps Request'
      description: >-
        Request a change in ${{ name }}$'s automated workflows and development environment.
      __temp__:
        purpose: >-
          requesting a <b>change in ${{ name }}$'s automated workflows and development environment</b>,
          such as CI/CD pipelines, testing, and deployment configurations.
      body: ${{ issue.__temp__.body_config }}$
    - id: chore
      id_labels:
        - [ type, chore ]
      labels:
        - [ scope, repo ]
        - '*{{ issue.__temp__.labels }}*'
      name: ' ${{ theme.icon.chore }}$ Maintenance Request'
      description: Request a maintenance job in ${{ name }}$.
      __temp__:
        purpose: >-
          requesting a <b>maintenance job</b> in ${{ name }}$,
          such as file cleanup and other tasks that
          do not fall under other issue categories.
      body: ${{ issue.__temp__.body_maintenance }}$
keywords:
  - Automation
  - Cloud-Native Development
  - Continuous Integration
  - Continuous Delivery
  - Continuous Deployment
  - Continuous Testing
  - Continuous Refactoring
  - Continuous Configuration Automation
  - Continuous Software Engineering
  - DevOps
  - Infrastructure as Code
  - Agile
  - Dynamic Project Management
  - Template Repository
  - Python Package Skeleton
  - Sphinx Website
  - Testing Infrastructure
  - FAIR Software
  - GitHub Actions
  - Bot
label:
  type:
    prefix: Type
    color: '#A00000'
    label:
      fix:
        suffix: ${{ theme.icon.fix }}$ bug fix
        description: Fix a bug in a project component.
      feat:
        suffix: ${{ theme.icon.feat }}$ new feature
        description: Add a new feature to a project component.
      change:
        suffix: ${{ theme.icon.change }}$ breaking change
        description: Introduce a breaking change in a project component.
      refactor:
        suffix: ${{ theme.icon.refactor }}$ refactoring
        description: Refactor code without affecting project interfaces.
      config:
        suffix: ${{ theme.icon.config }}$ configuration
        description: Change project configurations and metadata.
      ci:
        suffix: ${{ theme.icon.ci }}$ DevOps
        description: Change automated workflows and development environments.
      chore:
        suffix: ${{ theme.icon.chore }}$ maintenance
        description: Perform housekeeping tasks unrelated to project interfaces.
  scope:
    prefix: Scope
    color: '#A00000'
    label:
      pkg:
        suffix: ${{ theme.icon.pkg }}$ app
        description: Related to ${{ pypkg_main.name }}$ package.
      test:
        suffix: ${{ theme.icon.test }}$ tests
        description: Related to ${{ pypkg_test.name }}$ package.
      docs:
        suffix: ${{ theme.icon.docs }}$ docs
        description: Related to ${{ name }}$ documentation and website.
      repo:
        suffix: ${{ theme.icon.repo }}$ repo
        description: Related to ${{ repo.name }}$ repository.
  component:
    prefix: Component
    color: '#0366d6'
    label:
      api:
        suffix: ${{ theme.icon.api }}$ API
        description: Related to the Python application programming interface.
      cli:
        suffix: ${{ theme.icon.cli }}$ CLI
        description: Related to the command-line interface.
      gui:
        suffix: ${{ theme.icon.gui }}$ GUI
        description: Related to the graphical user interface.
      build:
        suffix: ${{ theme.icon.setup }}$ Build
        description: Related to the build and installation process.
  commit:
    prefix: Commit
    color: '#0366d6'
    label: '#{{ return hook.commit_labels() }}#'
  release:
    prefix: Release
    color: '#0366d6'
    label:
      major:
        suffix: major
        description: Publish a new major release.
      minor:
        suffix: minor
        description: Publish a new minor release.
      patch:
        suffix: patch
        description: Publish a new patch release.
      post:
        suffix: post
        description: Publish a new post release.
      local:
        suffix: local
        description: Publish a new local release.
  remark:
    prefix: Remark
    color: '#0366d6'
    label:
      queued:
        suffix: Queued
        description: Queued for processing.
      discuss:
        suffix: Discuss
        description: Requires more discussion.
      need_volunteer:
        suffix: Need Volunteer
        description: Requires a volunteer.
license:
  expression: AGPL-3.0-or-later
pull:
  protocol:
    template:
      body:
        - - class: badge
            label: Resolves
            service: static
            args:
              message: '#{{ issue.number }}'
            link: '{{ issue.html_url }}'
            style: ${{ theme.badge.style }}$
            height: ${{ theme.badge.height }}$
            label_color: ${{ theme.badge.color.grey }}$
            color: ${{ theme.badge.color.blue }}$
          - '{{ "&nbsp;" * ccc.theme.badge.separator }}'
          - |
            {%- for label in form.id_labels + form.labels -%}
            {{
              mdit.element.badge(
                service="static",
                label=label.prefix,
                args={"message": label.suffix if label.prefix else label.name},
                style=ccc.theme.badge.style,
                color=label.color,
                label_color=ccc.theme.badge.color.grey,
                height=ccc.theme.badge.height,
              ).source()
            }}{{ "&nbsp;" * ccc.theme.badge.separator }}
            {%- endfor -%}
            {%- set versions = labels["version"] | map(attribute='suffix') | join(' | ') -%}
            {{
              mdit.element.badge(
                service="static",
                label=labels["version"][0].prefix,
                args={"message": versions},
                style=ccc.theme.badge.style,
                color=labels["version"][0].color,
                label_color=ccc.theme.badge.color.grey,
                height=ccc.theme.badge.height,
              ).source()
            }}
      sections:
        - heading: Status
          body:
            - class: badges
              style: ${{ theme.badge.style }}$
              height: ${{ theme.badge.height }}$
              label_color: ${{ theme.badge.color.grey }}$
              separator: ${{ theme.badge.separator }}$
              args:
                user: ${{ repo.owner }}$
                repo: ${{ repo.name }}$
                kind: pulls
                number: '{{ pull_request.number }}'
              items:
                - service: static
                  label: State
                  args:
                    message: '{{ pull_request.state }}'
                  color: >-
                    {{ ccc.theme.badge.color.green if pull_request.state == "open" else ccc.theme.badge.color.red }}
                - service: static
                  label: Last Status
                  args:
                    message: '{{ status_label.suffix }}'
                  title: '{{ status_label.description }}'
                  color: >-
                    {{ status_label.color if status_label.color is defined else ccc.label.status.color }}
                - service: github
                  endpoint: issue_details
                  label: Last Update
                  args:
                    property: last-update
                - service: github
                  endpoint: issue_details
                  label: Comments
                  args:
                    property: comments
        - heading: Software Design Document (SDD)
          body: |
            {{ data.sdd }}
        - heading: Implementation
          body:
            - '{{ tasklist }}'
        - heading: Testing
          body:
            - - |
                {% if ccc.web.readthedocs is defined -%}
                {% set config = ccc.web.readthedocs %}
                {% set domain = "org.readthedocs.build" if config.platform == "community" else "com.readthedocs.build" %}
                {% set url = "https://" ~ config.name ~ "--" ~ pull_request.number ~ "." ~ domain ~ "/" %}
                {% if config.version_scheme.translation %}
                  {% set url = url ~ config.language ~ "/" ~ pull_request.number ~ "/" %}
                {% endif %}
                {{
                  mdit.element.badge(
                    service="static",
                    label="Website Preview",
                    args={"message": "Read The Docs"},
                    style=ccc.theme.badge.style,
                    color=ccc.theme.badge.color.blue,
                    label_color=ccc.theme.badge.color.grey,
                    height=ccc.theme.badge.height,
                    link=url,
                  ).source()
                }}{{ "&nbsp;" * ccc.theme.badge.separator }}
                {%- endif -%}
              # ReadTheDocs website preview badge
              # Note: Enable "Preview Documentation from Pull Requests" in ReadtheDocs project at https://docs.readthedocs.io/en/latest/pull-requests.html
              # Refs: https://github.com/readthedocs/actions/blob/v1/preview/scripts/edit-description.js
              #       https://docs.readthedocs.io/en/latest/guides/pull-requests.html
        - heading: Deployment
          body:
            - '{{ data.deployment }}'
        - heading: Timeline
          body: |
            <div align="center">

            {{ data.timeline }}

            </div>

            {{ config }}
    data:
      summary:
        value: '{{ pr_title }}'
      description:
        value: "\n\n**TBD**\n\n"
      sdd:
        value: "\n\n**TBD**\n\n"
      testing:
        value: "\n\n**TBD**\n\n"
      deployment:
        value: "\n\n**TBD**\n\n"
      timeline: ${{ issue.protocol.data.timeline }}$
pypkg_ci:
  name: ProMan
  path:
    root: .manager
  os: ${{ pypkg_main.os }}$
  python:
    version:
      spec: '>=3.10'
  entry:
    cli:
      main:
        name: proman
        description: Main command line interface for PyPackIT.
        ref: proman.__main__:cli
        parser:
          kwargs:
            description: Project Manager CLI
          arguments:
            - args: [ --repo ]
              kwargs:
                help: Local path to the repository's root directory.
                default: "./"
            - args: [ --repo-upstream ]
              kwargs:
                help: Local path to the upstream repository's root directory.
            - args: [ --metadata-ref ]
              kwargs:
                help: Git reference to read the metadata.json file from.
            - args: [ --metadata-filepath ]
              kwargs:
                help: Relative path to the metadata.json file.
            - args: [ --main-metadata-filepath ]
              kwargs:
                help: Relative path to the metadata.json file in the default branch.
            - args: [ --github-token ]
              kwargs:
                help: GitHub token for accessing the repository.
            - args: [ --remove-tokens ]
              kwargs:
                help: Remove all tokens read from the environment.
                action: store_true
            - args: [ --no-validation ]
              kwargs:
                help: Skip validation of the metadata.json file.
                dest: validate_metadata
                action: store_false
            - args: [ --version ]
              kwargs:
                help: Output the version of the package and exit.
                action: version
                version: '{__version__}'
          subparser:
            id: main
            kwargs:
              dest: command
              required: true
            parsers:
              - id: cca
                args: [ cca ]
                kwargs:
                  help: Run Continuous Configuration Automation on the repository.
                defaults:
                  endpoint: cca.run_cli
                arguments:
                  - args: [ -x, --action ]
                    kwargs:
                      help: Action to perform.
                      choices: [ report, apply, pull, merge, commit, amend ]
                      default: apply
                  - args: [ -b, --branch-version ]
                    kwargs:
                      help: Branch-name to version mappings (e.g., -b main=0.0.0 dev=1.0.0a1) to use instead of git tags.
                      type: str
                      nargs: "*"
                      metavar: BRNACH=VERSION
                    post_process: |
                      if args.branch_version:
                          try:
                              args.branch_version = dict(pair.split("=", 1) for pair in args.branch_version)
                          except ValueError:
                              parser.error(
                                  "--branch-version must be in the format BRANCH=VERSION (e.g., -b main=1.0.0 dev=2.0.0)."
                              )
                  - args: [ -p, --control-center ]
                    kwargs:
                      help: Path to the control center directory containing configuration files.
                      type: str
                  - args: [ -c, --clean-state ]
                    kwargs:
                      help: Ignore the metadata.json file and start from scratch.
                      action: store_true
              - id: lint
                args: [ lint ]
                kwargs:
                  help: Run pre-commit hooks on the repository.
                defaults:
                  endpoint: lint.run_cli
                arguments:
                  - args: [ -x, --action ]
                    kwargs:
                      help: Action to perform.
                      type: str
                      choices: [ report, apply, pull, merge, commit, amend ]
                      default: apply
                  - args: [ -r2, --to-ref ]
                    kwargs:
                      help: Run on files changed until the given git ref. This must be accompanied by --from-ref.
                    post_process: |
                      if (args.from_ref and not args.to_ref) or (args.to_ref and not args.from_ref):
                          parser.error("Both --from-ref and --to-ref must be provided together.")
                mutually_exclusive:
                  - id: hook
                    arguments:
                      - args: [ -i, --hook-id ]
                        kwargs:
                          help: Specific hook ID to run. This will only run the specified hook.
                          type: str
                      - args: [ -s, --hook-stage ]
                        kwargs:
                          help: Specific hook stage to run. This will only run hooks in the specified stage.
                          type: str
                  - id: file
                    arguments:
                      - args: [ -a, --all-files ]
                        kwargs:
                          help: Run on all files in the repository.
                          action: store_true
                      - args: [ -f, --files ]
                        kwargs:
                          help: Run on specific files.
                          nargs: "+"
                      - args: [ -r1, --from-ref ]
                        kwargs:
                          help: Run on files changed since the given git ref. This must be accompanied by --to-ref.
              - id: version
                args: [ version ]
                kwargs:
                  help: Print the current version of the project.
                defaults:
                  endpoint: version.run_cli
              - id: build
                args: [ build ]
                kwargs:
                  help: Build project components.
                subparser:
                  id: build
                  kwargs:
                    dest: build
                    required: true
                  parsers:
                    - id: conda
                      args: [ conda ]
                      kwargs:
                        help: Build a conda package in the project.
                      defaults:
                        endpoint: build.conda.run_cli
                      arguments:
                        - args: [ -p, --pkg ]
                          kwargs:
                            help: Package ID, i.e., the `pypkg_` key suffix in configuration files.
                            default: main
                        - args: [ -o, --output ]
                          kwargs:
                            help: Path to the local conda channel directory.
                            type: str
                            default: ${{ local.temp.path }}$/conda-channel
                        - args: [ -r, --recipe ]
                          kwargs:
                            help: Type of recipe to build.
                            type: str
                            choices: [ local, global ]
                            default: local
                        - args: [ --args ]
                          kwargs:
                            help: Additional arguments to pass to the conda build command.
                            nargs: argparse.REMAINDER
                    - id: python
                      args: [ python ]
                      kwargs:
                        help: Build a Python package in the project.
                      defaults:
                        endpoint: build.python.run_cli
                      arguments:
                        - args: [ -p, --pkg ]
                          kwargs:
                            help: Package ID, i.e., the `pypkg_` key suffix in configuration files.
                            default: main
                        - args: [ -o, --output ]
                          kwargs:
                            help: Path to the local PyPI channel directory.
                            type: str
                            default: ${{ local.temp.path }}$/wheelhouse
                        - args: [ --args ]
                          kwargs:
                            help: Additional arguments to pass to the Python build command.
                            nargs: argparse.REMAINDER
              - id: render
                args: [ render ]
                kwargs:
                  help: Render documents in the project.
                subparser:
                  id: render
                  kwargs:
                    dest: render
                    required: true
                  parsers:
                    - id: pypi
                      args: [ pypi ]
                      kwargs:
                        help: Render package README file for PyPI.
                      defaults:
                        endpoint: render.pypi.run_cli
                      arguments:
                        - args: [ -p, --pkg ]
                          kwargs:
                            help: Package ID, i.e., the `pypkg_` key suffix in configuration files.
                            default: main
                        - args: [ -o, --output ]
                          kwargs:
                            help: Output directory to write the rendered HTML file.
                            type: str
                            default: ${{ local.temp.path }}$/readme-pypi
              - id: gha
                args: [ gha ]
                kwargs:
                  help: Run CI/CD pipelines in GitHub Actions.
                defaults:
                  endpoint: gha.run_cli
  dependency:
    core:
      actionman:
        install:
          pip:
            version: ==0.1.1
            homepage: https://pypi.org/project/actionman
        url:
          docs: https://actionman.repodynamics.com
          source: https://github.com/repodynamics/actionman
      ansi-sgr:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/ansi-sgr
        url:
          docs: https://ansi-sgr.repodynamics.com
          source: https://github.com/repodynamics/ansi-sgr
      conventionalcommits:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/conventionalcommits
        url:
          docs: https://conventionalcommits.repodynamics.com
          source: https://github.com/repodynamics/conventionalcommits
      exceptionman:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/exceptionman
        url:
          docs: https://exceptionman.repodynamics.com
      fileex:
        install:
          pip:
            version: ==0.2.0
            homepage: https://pypi.org/project/fileex
        url:
          docs: https://fileex.repodynamics.com
          source: https://github.com/repodynamics/fileex
      github-contexts:
        install:
          pip:
            version: ==0.1.1
            homepage: https://pypi.org/project/github-contexts
        url:
          docs: https://github-contexts.repodynamics.com
          source: https://github.com/repodynamics/github-contexts
      gittidy:
        install:
          pip:
            version: ==0.3.1
            homepage: https://pypi.org/project/gittidy
        url:
          docs: https://gittidy.repodynamics.com
          source: https://github.com/repodynamics/gittidy
      htmp:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/htmp
        url:
          docs: https://htmp.repodynamics.com
          source: https://github.com/repodynamics/htmp
      jinja2:
        install:
          pip:
            version: ==3.1.6
      jsonpath-ng:
        install:
          pip:
            version: ==1.7.0
            homepage: https://pypi.org/project/jsonpath-ng
      jsonschema:
        install:
          pip:
            version: ==4.23.0
      jsonschemata:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/jsonschemata
      licenseman:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/licenseman
        url:
          docs: https://licenseman.repodynamics.com
      loggerman:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/loggerman
        url:
          docs: https://loggerman.repodynamics.com
          source: https://github.com/repodynamics/loggerman
      mdit:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/mdit
        url:
          docs: https://mdit.repodynamics.com
          source: https://github.com/repodynamics/mdit
      packaging:
        install:
          pip:
            version: ==24.2
            homepage: https://pypi.org/project/packaging
      pkgdata:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/pkgdata
        url:
          docs: https://pkgdata.repodynamics.com
          source: https://github.com/repodynamics/pkgdata
      pycacheman:
        install:
          pip:
            version: ==0.1.1
            homepage: https://pypi.org/project/pycacheman
        url:
          source: https://github.com/repodynamics/pycacheman
      pycolorit:
        install:
          pip:
            version: ==0.1.1
            homepage: https://pypi.org/project/pycolorit
        url:
          docs: https://pycolorit.repodynamics.com
          source: https://github.com/repodynamics/pycolorit
      pylinks:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/pylinks
        url:
          docs: https://pylinks.repodynamics.com
          source: https://github.com/repodynamics/pylinks
      pyserials:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/pyserials
        url:
          docs: https://pyserials.repodynamics.com
          source: https://github.com/repodynamics/pyserials
      pyshellman:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/pyshellman
        url:
          docs: https://pyshellman.repodynamics.com
          source: https://github.com/repodynamics/pyshellman
      pysyntax:
        install:
          pip:
            version: ==0.1.0
            homepage: https://pypi.org/project/pysyntax
        url:
          docs: https://pysyntax.repodynamics.com
          source: https://github.com/repodynamics/pysyntax
      referencing:
        install:
          pip:
            version: ==0.36.2
            homepage: https://pypi.org/project/referencing
      ruamel.yaml:
        install:
          pip:
            version: ==0.18.10
            homepage: https://pypi.org/project/ruamel.yaml/
      rich:
        install:
          pip:
            version: ==13.9.4
      trove-classifiers:
        install:
          pip:
            version: '>=2025.3.13.13'
            homepage: https://pypi.org/project/trove-classifiers
      versionman:
        install:
          pip:
            version: ==0.1.1
            homepage: https://pypi.org/project/versionman
        url:
          docs: https://versionman.repodynamics.com
          source: https://github.com/repodynamics/versionman
  pyproject:
    build-system:
      build-backend: setuptools.build_meta
      requires:
        - setuptools >=72.1.0,<73
    project:
      name: ${{ pypkg_ci.name }}$
      version: 0.1.0
      requires-python: ${{ pypkg_ci.python.version.spec }}$
      dependencies: >-
        #{{ return hook.pyproject_dependency("core", pkg="ci") }}#
      scripts:
        proman: proman.__main__:cli
    tool:
      setuptools:
        include-package-data: true
        packages:
          find:
            where:
              - ${{ pypkg_ci.path.source_rel }}$
            namespaces: true
pypkg_main:
  os:
    linux-64:
      name: Linux (x64)
      runner: ubuntu-24.04
      data:
        logo: ${{ web.path.source }}$/_media/logo_ext/linux.png
    linux-aarch64:
      name: Linux (arm64)
      runner: ubuntu-24.04-arm
      data:
        logo: ${{ ...linux-64.data.logo }}$
    osx-64:
      name: macOS (x64)
      runner: macos-13
      data:
        logo: apple
        logo_color: '#000000'
    osx-arm64:
      name: macOS (arm64)
      runner: macos-15
      data:
        logo: apple
        logo_color: '#000000'
    win-64:
      name: Windows (x64)
      runner: windows-2025
      data:
        logo: https://upload.wikimedia.org/wikipedia/commons/4/44/Microsoft_logo.svg
  entry:
    cli:
      main:
        name: '#{{ return get("pypkg_main.name").lower() }}#'
        description: Main CLI entry of the package.
        ref: ${{ pypkg_main.import_name }}$.__main__:main
  dependency:
    build:
      setuptools:
        install:
          pip:
            version: '>=72.1.0,<73'
            homepage: https://pypi.org/project/setuptools/
          conda:
            homepage: https://anaconda.org/conda-forge/setuptools
      versioning:
        name: versioningit
        import_name: versioningit
        install:
          pip:
            version: '>=3.1.2,<4'
            homepage: https://pypi.org/project/versioningit/
          conda:
            homepage: https://anaconda.org/conda-forge/versioningit
    core:
      pkgdata:
        description: |
          Handling package resources, such as accessing data files that are
          distributed with the package.
        install:
          pip:
            homepage: https://pypi.org/project/pkgdata/
          conda:
            channel: repodynamics
            homepage: https://anaconda.org/repodynamics/pkgdata
        url:
          docs: https://pkgdata.repodynamics.com/
          source: https://github.com/repodynamics/pkgdata
  source_file:
    all:
      glob: '**/*.py'
      header_comments:
        content: |
          ${{ pypkg_main.name }}$ ${{ copyright }}$
          SPDX-License-Identifier: ${{ license.expression }}$
        max_line_length: ${{ devcontainer_main.environment.pre_commit.file.ruff_config.content.line-length }}$
    top_import:
      glob: __init__.py
      docstring:
        content: |
          ${{ name }}$: ${{ title }}$.

          ${{ abstract }}$
        max_line_length: ${{ devcontainer_main.environment.pre_commit.file.ruff_config.content.line-length }}$
  conda:
    recipe: ${{ __temp__.conda_recipe }}$
  pyproject: ${{ __temp__.pyproject }}$
  file:
    readme:
      name: Package README
      summary: |
        Main README file for the package.
      path: ${{ pypkg_main.path.root }}$/${{ pypkg_main.pyproject.project.readme.file }}$
      content: ${{ file_readme.content }}$
      type: md
      file_setting:
        md:
          target: pypi
    setuptools_manifest:
      name: MANIFEST.in
      summary: |
        Manifest file for controlling files and directories in the source distribution.
      description: |
        The `MANIFEST.in` file is used to
        [control files and directories](https://setuptools.pypa.io/en/latest/userguide/miscellaneous.html#controlling-files-in-the-distribution)
        when creating a source distribution of the package.
        It is used by the `sdist` command of `setuptools` to determine which files
        to include in the source distribution.
      notes: |
        The [Setuptools-SCM](https://pypi.org/project/setuptools-scm/) plugin
        can be used instead of the `MANIFEST.in` file to automatically
        include all git-tracked files in the source distribution.
        The plugin also automatically manages the version number of the package,
        similar to [`versioningit`](https://pypi.org/project/versioningit/).
      type: txt
      path: ${{ pypkg_main.path.root }}$/MANIFEST.in  # Filename must be `MANIFEST.in`
      content:
        - graft ${{ pypkg_main.path.import_rel }}$/data
        - include ${{ pypkg_main.path.import_rel }}$/py.typed
        - global-exclude *.py[cod] __pycache__ *.so
  test: >-
    #{{ return hook.pypkg_test("test") }}#
pypkg_test:
  path:
    root: test
  name: ${{ pypkg_main.name }}$-TestSuite
  os: ${{ pypkg_main.os }}$
  dependency:
    # For other PyTest plugins, see:
    # - https://github.com/augustogoulart/awesome-pytest
    # - https://pytest-with-eric.com/pytest-best-practices/pytest-plugins/
    build: ${{ pypkg_main.dependency.build }}$
    core:
      pytest:
        description: Testing framework for Python.
        install:
          conda:
            homepage: https://anaconda.org/conda-forge/pytest
          pip:
            version: ==8.3.5
            homepage: https://pypi.org/project/pytest/
        url:
          docs: https://docs.pytest.org/en/stable/
          source: https://github.com/pytest-dev/pytest
      pytest-cov:
        description: Pytest plugin for measuring test coverage.
        notes: |
          This plugin uses the [coverage.py](https://github.com/nedbat/coveragepy) package
          to measure code coverage.
        install:
          conda:
            homepage: https://anaconda.org/conda-forge/pytest-cov
          pip:
            version: ==6.0.0
            homepage: https://pypi.org/project/pytest-cov/
        url:
          docs: https://pytest-cov.readthedocs.io/
          source: https://github.com/pytest-dev/pytest-cov
      pytest-html:
        description: Pytest plugin for generating HTML reports.
        install:
          conda:
            homepage: https://anaconda.org/conda-forge/pytest-html
          pip:
            version: ==4.1.1
            homepage: https://pypi.org/project/pytest-html/
        url:
          docs: https://pytest-html.readthedocs.io/
          source: https://github.com/pytest-dev/pytest-html
      coverage:
        description: Code coverage measurement for Python.
        notes: |
          This is indirectly used by the `pytest-cov` plugin.
          However, we include it explicitly here to pin the version for reproducibility.
        install:
          conda:
            homepage: https://anaconda.org/conda-forge/coverage
          pip:
            version: ==7.6.12
            homepage: https://pypi.org/project/coverage/
        url:
          docs: https://coverage.readthedocs.io/
          source: https://github.com/nedbat/coveragepy
      pkgdata:
        description: |
          Handling package resources, such as accessing data files that are
          distributed with the package.
        install:
          conda:
            channel: repodynamics
            homepage: https://anaconda.org/repodynamics/pkgdata
          pip:
            homepage: https://pypi.org/project/pkgdata/
        url:
          docs: https://pkgdata.repodynamics.com/
          source: https://github.com/repodynamics/pkgdata
  entry:
    cli:
      main:
        name: ${{ pypkg_test.name }}$
        description: Main CLI entry of the test-suite.
        ref: ${{ pypkg_test.import_name }}$.__main__:main
  source_file:
    all:
      glob: '**/*.py'
      header_comments:
        content: |
          ${{ pypkg_test.name }}$ ${{ copyright }}$
          SPDX-License-Identifier: ${{ license.expression }}$
        max_line_length: ${{ devcontainer_main.environment.pre_commit.file.ruff_config.content.line-length }}$
    top_import:
      glob: __init__.py
      docstring:
        content: |-
          ${{ pypkg_test.name }}$: Test Suite for ${{ name }}$.
        max_line_length: ${{ devcontainer_main.environment.pre_commit.file.ruff_config.content.line-length }}$
        mode: prepend
  conda:
    recipe: ${{ __temp__.conda_recipe }}$
  pyproject: ${{ __temp__.pyproject }}$
  file:
    readme:
      name: Test Suite README
      summary: |
        Main README file for the test suite.
      path: ${{ pypkg_test.path.root }}$/${{ pypkg_test.pyproject.project.readme.file }}$
      content: ${{ file_readme.content }}$
      type: md
      file_setting:
        md:
          target: pypi
    setuptools_manifest:
      name: MANIFEST.in
      summary: |
        Manifest file for controlling files and directories in the source distribution.
      type: txt
      path: ${{ pypkg_test.path.root }}$/MANIFEST.in
      content:
        - graft ${{ pypkg_test.path.import_rel }}$/data
        - include ${{ pypkg_test.path.import_rel }}$/py.typed
        - global-exclude *.py[cod] __pycache__ *.so
    pytest_config:
      name: Pytest Configuration
      summary: >-
        Pytest [configuration file](https://docs.pytest.org/en/stable/reference/customize.html)
        in TOML format.
      description: |
        See [Pytest Configuration Options](https://docs.pytest.org/en/stable/reference/reference.html#ini-options-ref)
        for a full list of available settings.
      type: toml
      path: ${{ pypkg_test.path.import }}$/data/config/pytest.toml
      content:
        tool:
          pytest:
            ini_options:
              addopts: >-
                -r a
                --verbose
                --color=yes
                --full-trace
                --strict-config
                --junit-xml='$|| path_report ||/pytest/junit.xml'
                --import-mode=importlib
                --debug='$|| path_report ||/pytest/debug.log'
                --cov
                --cov-config='$|| path_config ||/coverage.toml'
                --cov-report=term-missing:skip-covered
                --cov-report=html
                --cov-report=xml
                --cov-report=json
                --html='$|| path_report ||/pytest/report.html'
                --self-contained-html
              cache_dir: $|| path_cache ||/pytest
              console_output_style: count
              junit_logging: all
              junit_suite_name: ${{ pypkg_test.import_name }}$
              log_auto_indent: true
              log_cli: true
              log_cli_date_format: '%Y-%m-%d %H:%M:%S'
              log_cli_format: '%(levelname)s %(message)s'
              log_cli_level: INFO
              log_date_format: '%Y-%m-%d %H:%M:%S'
              log_file: $|| path_report ||/pytest/log.txt
              log_file_date_format: '%Y-%m-%d %H:%M:%S'
              log_file_format: '%(asctime)s %(levelname)s %(message)s'
              log_file_level: DEBUG
              log_format: '%(asctime)s %(levelname)s %(message)s'
              log_level: DEBUG
              minversion: 8.3.3
              python_classes: [ Test*, '*Test' ]
              python_files: [ test_*.py, tests_*.py, '*_test.py', '*_tests.py' ]
              python_functions: [ 'test_*', 'tests_*', '*_test',  '*_tests' ]
              required_plugins:
                - pytest-cov ${{ pypkg_test.dependency.core.pytest-cov.install.pip.version }}$
                - pytest-html ${{ pypkg_test.dependency.core.pytest-html.install.pip.version }}$
    coverage_config:
      name: Coverage Configuration
      summary: >-
        Coverage [configuration file](https://coverage.readthedocs.io/en/latest/config.html),
        which is also used by the
        [`pytest-cov`](https://pytest-cov.readthedocs.io/en/latest/config.html) plugin.
      type: toml
      path: ${{ pypkg_test.path.import }}$/data/config/coverage.toml
      content:
        tool:
          coverage:
            run:
              branch: true
              data_file: $|| path_cache ||/coverage/coverage
              debug_file: $|| path_report ||/coverage/debug.log
              source_pkgs: [ "${{ pypkg_main.import_name }}$" ]
            report:
              # Regexes for lines to exclude from consideration
              exclude_also:
                # debug-only code:
                - "def __repr__"
                - "if self\\.debug"
                # defensive assertion code:
                - "raise AssertionError"
                - "raise NotImplementedError"
                # non-runnable code:
                - "if 0:"
                - "if __name__ == .__main__.:"
                # abstract methods:
                - "@(abc\\.)?abstractmethod"
                # type checking:
                - "if _?TYPE_CHECKING:"
              show_missing: true
            html:
              directory: $|| path_report ||/coverage/html
              title: "${{ pypkg_main.name }}$ Test Coverage"
            xml:
              output: $|| path_report ||/coverage/coverage.xml
            json:
              output: $|| path_report ||/coverage/coverage.json
              pretty_print: true
repo:
  homepage: ${{ web.url.home }}$
  topics: |
    #{{
      return [
        slugify(keyword) for keyword in get("keywords", []) if len(keyword) <= 50
      ][:20]
    }}#
  secret_scanning: true
  secret_scanning_push_protection: true
  vulnerability_alerts: true
  automated_security_fixes: true
  private_vulnerability_reporting: true
  has_discussions: true
  has_projects: false
  has_wiki: false
  allow_merge_commit: false
  allow_rebase_merge: true
  allow_auto_merge: false
  delete_branch_on_merge: false
  allow_update_branch: true
  archived: false
  gitattributes:
    main:
      title: Main
      summary: Main `.gitattributes` file for the entire repository.
      path: .gitattributes
      entries:
        # ------------------------------------------ Auto Detect -------------------------------------------
        # Auto-detect text files and perform LF normalization. This will handle all files NOT listed below.
        - "*": [ text=auto ]
        # ------------------------------------------ Explicit ----------------------------------------------
        - ".gitattributes": [ text, export-ignore ]
        - ".gitignore": [ text, export-ignore ]
        - "AUTHORS": [ text ]
        - "CHANGELOG": [ text ]
        - "CHANGES": [ text ]
        - "CODEOWNERS": [ text ]
        - "CONTRIBUTING": [ text ]
        - "COPYING": [ text ]
        - "copyright": [ text ]
        - "*COPYRIGHT*": [ text ]
        - "INSTALL": [ text ]
        - "license": [ text ]
        - "LICENSE*": [ text ]
        - "Makefile": [ text ]
        - "NEWS": [ text ]
        - "readme": [ text ]
        - "*README*": [ text ]
        - "TODO": [ text ]
        - "MANIFEST.in": [ text ]
        - "*.typed": [ text ]
        # ------------------------------------------ Documents ---------------------------------------------
        - "*.bibtex": [ text, diff=bibtex ]
        - "*.doc": [ diff=astextplain ]
        - "*.DOC": [ diff=astextplain ]
        - "*.docx": [ diff=astextplain ]
        - "*.DOCX": [ diff=astextplain ]
        - "*.dot": [ diff=astextplain ]
        - "*.DOT": [ diff=astextplain ]
        - "*.pdf": [ diff=astextplain ]
        - "*.PDF": [ diff=astextplain ]
        - "*.rtf": [ diff=astextplain ]
        - "*.RTF": [ diff=astextplain ]
        - "*.md": [ text, diff=markdown ]
        - "*.mdx": [ text, diff=markdown ]
        - "*.rst": [ text ]
        - "*.tex": [ text, diff=tex ]
        - "*.adoc": [ text ]
        - "*.textile": [ text ]
        - "*.mustache": [ text ]
        - "*.csv": [ text, eol=crlf ]
        - "*.tab": [ text ]
        - "*.tsv": [ text ]
        - "*.txt": [ text ]
        - "*.sql": [ text ]
        - "*.epub": [ diff=astextplain ]
        - "*.css": [ text, diff=css ]
        - "*.htm": [ text, diff=html ]
        - "*.html": [ text, diff=html ]
        # ------------------------------------------ Graphics ----------------------------------------------
        - "*.svg": [ text ]
        - "*.png": [ binary ]
        - "*.jpg": [ binary ]
        - "*.jpeg": [ binary ]
        - "*.gif": [ binary ]
        - "*.tif": [ binary ]
        - "*.tiff": [ binary ]
        - "*.ico": [ binary ]
        - "*.eps": [ binary ]
        # ------------------------------------------ Scripts -----------------------------------------------
        - "*.bash": [ text, eol=lf ]
        - "*.fish": [ text, eol=lf ]
        - "*.sh": [ text, eol=lf ]
        - "*.zsh": [ text, eol=lf ]
        # Below are explicitly windows files and should use crlf
        - "*.bat": [ text, eol=crlf ]
        - "*.cmd": [ text, eol=crlf ]
        - "*.ps1": [ text, eol=crlf ]
        # ------------------------------------------ Serialisation -----------------------------------------
        - "*.json": [ text ]
        - "*.toml": [ text ]
        - "*.xml": [ text ]
        - "*.yaml": [ text ]
        - "*.yml": [ text ]
        # ------------------------------------------ Archives ----------------------------------------------
        - "*.7z": [ binary ]
        - "*.gz": [ binary ]
        - "*.jar": [ binary ]
        - "*.rar": [ binary ]
        - "*.tar": [ binary ]
        - "*.tgz": [ binary ]
        - "*.zip": [ binary ]
        # ------------------------------------------ Preserve EOL ------------------------------------------
        # Text files where line endings should be preserved.
        - "*.patch": [ -text ]
        # ------------------------------------------ Python Source Files -----------------------------------
        - "*.pxd": [ text, diff=python ]
        - "*.py": [ text, diff=python ]
        - "*.py3": [ text, diff=python ]
        - "*.pyw": [ text, diff=python ]
        - "*.pyx": [ text, diff=python ]
        - "*.pyz": [ text, diff=python ]
        - "*.pyi": [ text, diff=python ]
        # ------------------------------------------ Python Binary Files -----------------------------------
        # Note: .db, .p, and .pkl files are associated with the python modules
        # ``pickle``, ``dbm.*``, ``shelve``, ``marshal``, ``anydbm``, and ``bsddb``, among others.
        - "*.db": [ binary ]
        - "*.p": [ binary ]
        - "*.pkl": [ binary ]
        - "*.pickle": [ binary ]
        - "*.pyc": [ binary, export-ignore ]
        - "*.pyo": [ binary, export-ignore ]
        - "*.pyd": [ binary ]
        # ------------------------------------------ Jupyter notebook --------------------------------------
        - "*.ipynb": [ text, eol=lf ]
  gitignore:
    main:
      title: Main
      summary: Main `.gitignore` file for the repository.
      path: .gitignore
      entries:
        # Project-specific files
        - ${{ web.path.root }}$/.build/
        - ${{ web.path.source }}$/api/*/**
        - ${{ web.path.source }}$/about/license/*/**
        - ${{ local.cache.path }}$/**
        - ${{ local.report.path }}$/**
        - ${{ local.temp.path }}$/**
        # Byte-compiled / optimized / DLL files
        - __pycache__/
        - "*.py[cod]"
        - "*$py.class"
        # C extensions
        - "*.so"
        # Distribution / packaging
        - .Python
        - ./build/
        - develop-eggs/
        - dist/
        - downloads/
        - eggs/
        - .eggs/
        - lib/
        - lib64/
        - parts/
        - sdist/
        - var/
        - wheels/
        - share/python-wheels/
        - "*.egg-info/"
        - .installed.cfg
        - "*.egg"
        # PyInstaller
        #  Usually these files are written by a python script from a template
        #  before PyInstaller builds the exe, so as to inject date/other infos into it.
        - "*.manifest"
        - "*.spec"
        # Installer logs
        - pip-log.txt
        - pip-delete-this-directory.txt
        # Unit test / coverage reports
        - htmlcov/
        - .tox/
        - .nox/
        - .coverage
        - .coverage.*
        - .cache
        - nosetests.xml
        - coverage.xml
        - "*.cover"
        - .hypothesis/
        - .pytest_cache
        - cover/
        # Translations
        - "*.mo"
        - "*.pot"
        # Django stuff:
        - "*.log"
        - local_settings.py
        - db.sqlite3
        - db.sqlite3-journal
        # Flask stuff:
        - instance/
        - .webassets-cache
        # Scrapy stuff:
        - .scrapy
        # Sphinx documentation
        - docs/website/_build/
        - docs/website/source/api/_autosummary
        # PyBuilder
        - .pybuilder/
        - target/
        # Jupyter Notebook
        - .ipynb_checkpoints
        # IPython
        - profile_default/
        - ipython_config.py
        # pyenv
        - .python-version
        # Celery stuff
        - celerybeat-schedule
        - celerybeat.pid
        # SageMath parsed files
        - "*.sage.py"
        # Environments
        - .env
        - .venv
        - env/
        - venv/
        - ENV/
        - env.bak/
        - venv.bak/
        # Spyder project settings
        - .spyderproject
        - .spyproject
        # Rope project settings
        - .ropeproject
        # mkdocs documentation
        - /site
        # mypy
        - .mypy_cache/
        - .dmypy.json
        - dmypy.json
        # Pyre type checker
        # There are reports this comes from LLVM profiling, but also Xcode 9.
        - .pyre/
        # pytype static type analyzer
        - .pytype/
        # Cython debug symbols
        - cython_debug/
        # profraw files from LLVM? Unclear exactly what triggers this
        # There are reports this comes from LLVM profiling, but also Xcode 9.
        - "*profraw"
        # In-tree generated files
        - "*/_version.py"
        # VSCode
        - .vscode/
        # PyCharm
        - .idea/
        # MacOS system files
        - .DS_Store
        # Unix
        - .Trash-1000/
role:
  manager:
    title: Project Manager
    description: |
      Responsible for maintaining the project and its resources.
    abbreviation: MGR
    type: ProjectManager
    assignment:
      issue: ".*"
      review: ".*"
  author:
    title: Author
    description: |
      Responsible for creating the project and its content.
    abbreviation: AUT
    type: Author
    assignment:
      pull: ".*"
  contact:
    title: Contact Person
    description: |
      Responsible for communication with project users and contributors.
    abbreviation: CNT
    type: ContactPerson
    assignment:
      discussion: ".*"
  security:
    title: Security Adviser
    description: |
      Responsible for ensuring the security of the project and
      handling security-related issues.
    abbreviation: SEC
    type: ProjectMember
  coc:
    title: Code of Conduct Supervisor
    description: |
      Responsible for ensuring that the project's code of conduct is enforced.
    abbreviation: COC
    type: ProjectMember
tag:
  version:
    prefix: ver/
team:
  aariam:
    github:
      id: AAriam
    email:
      id: armiariam@gmail.com
    role:
      manager: 1
      author: 1
      contact: 1
      security: 1
      coc: 1
theme:
  badge:
    color:
      grey: "#494949"
      blue: "#0B3C75"
      green: "#00802B"
      orange: "#D93402"
      red: "#AF1F10"
    style: flat-square
    height: 23px
    separator: 2
  color:
    primary:
      light: rgb(0 85 0)
      dark: rgb(28 170 0)
    secondary:
      light: rgb(60 85 0)  # rgb(5 80 5)
      dark: rgb(175 138 0)  # rgb(156 204 0)
    accent:
      light: rgb(19 84 0)
      dark: rgb(69 155 36)
    heading: ${{ theme.color.primary }}$
  icon:
    post: 📫
    fix: 🐞
    feat: ✨
    change: 💥
    config: 🛠️
    refactor: 🧹️
    chore: ♻️
    ci: 🤖️
    api: 🖥
    cli: ⌨️
    gui: 🖱
    setup: ⚙️
    pkg: 📦
    test: 🧪
    docs: 📚
    repo: 🧰
title: Cloud-Native Continuous Software Engineering Automation for Python Packages on GitHub
  # Alternative Titles
  # - A fully automated, plug and play, professional software project management solution for Python packages on GitHub
  # - GitHub-Based Automation Tool For Research Software Engineering in Python
  # - Cloud-Based Automation for Research Software on GitHub
  # - Cloud-Based Automation For Scientific Python Libraries on GitHub
  # - A ready-to-use automation tool for research software development in Python on GitHub
  # - A cloud-based automation tool for scientific Python libraries on GitHub
  # - A fully automated tool for better research software development
  # - Solving (Tackling) the research software crisis with automation (on GitHub)
  # - Automated research software development with Python packages on GitHub
  # - A fully automated scientific software project management solution/system for Python packages on GitHub
web:
  announcement:
    path: ${{ web.path.root }}$/announcement.html
  css:
    theme_colors:
      # Colors for pydata-sphinx-theme
      # - Docs: https://pydata-sphinx-theme.readthedocs.io/en/stable/user_guide/styling.html#color-variables
      # - Source: https://github.com/pydata/pydata-sphinx-theme/blob/main/src/pydata_sphinx_theme/assets/styles/variables/_color.scss
      cases:
        light:
          selector: 'html[data-theme="light"]'
          prefix: --pst-color-
        dark:
          selector: 'html[data-theme="dark"]'
          prefix: --pst-color-
      properties: '#{{ return {k: v for k, v in get("theme.color").items() if k != "jsonschema"} }}#'
    theme_font_sizes:
      # Font sizes for pydata-sphinx-theme.
      # - Docs: https://pydata-sphinx-theme.readthedocs.io/en/stable/user_guide/fonts.html
      # - Source: https://github.com/pydata/pydata-sphinx-theme/blob/main/src/pydata_sphinx_theme/assets/styles/variables/_fonts.scss
      selector: html
      prefix: --pst-font-size-
      properties:
        milli: 0.9rem
        base: 1rem
        # 1.2x (minor third) typographic scale starting from 1.10rem.
        # https://designcode.io/typographic-scales
        h6: 1.10rem
        h5: 1.32rem
        h4: 1.58rem
        h3: 1.90rem
        h2: 2.28rem
        h1: 2.74rem
    theme_header_color:
      cases:
        light:
          selector: html[data-theme="light"] .bd-header
        dark:
          selector: html[data-theme="dark"] .bd-header
      properties:
        background-color:
          light: white !important
          dark: black !important
    black_to_primary_filter:
      # CSS filters for transforming black to project's primary color.
      # This is used to dynamically change the color of SVG icons
      # with class name 'black-svg-icon'.
      cases:
        light:
          selector: html[data-theme="light"] .black-svg-icon
        dark:
          selector: html[data-theme="dark"] .black-svg-icon
      properties:
        filter: |
          #{{
            import pycolorit as pcit
            cache_group = "css_color_filter"
            primary_color = get("theme.color.primary")
            out = {}
            for theme in ["light", "dark"]:
              cache_id = f"black_to_{primary_color[theme]}"
              filter = cache_manager.get(cache_group, cache_id)
              if not filter:
                filter = pcit.css_filter.generate(pcit.color.css(primary_color[theme]))[2]
                cache_manager.set(cache_group, cache_id, filter)
              out[theme] = filter
            return out
          }}#
  file:
    icon:
      rel_path: ${{ web.path.logo_dir }}$/favicon.svg
    logo_simple_light:
      rel_path: ${{ web.path.logo_dir }}$/simple_light.svg
    logo_simple_dark:
      rel_path: ${{ web.path.logo_dir }}$/simple_dark.svg
    logo_simple_raster:
      rel_path: ${{ web.path.logo_dir }}$/simple_light.png
    logo_full_light:
      rel_path: ${{ web.path.logo_dir }}$/full_light.svg
    logo_full_dark:
      rel_path: ${{ web.path.logo_dir }}$/full_dark.svg
    logo_full_raster:
      rel_path: ${{ web.path.logo_dir }}$/full_light.png
  page: '#{{ return hook.web_page() }}#'
  path:
    root: docs/website
    source_rel: source
    source: ${{ .root }}$/${{ .source_rel }}$
    build: ${{ .root }}$/.build
    to_root: |
      #{{ return len(get(".source").split("/")) * "../" }}#
    logo_dir: _media/logo
  readthedocs:
    name: ${{ repo.name }}$
    platform: community
    version_scheme:
      single_version: false
      translation: false
    language: en
    config_file:
      path: .readthedocs.yaml
      content:
        version: 2
        formats: all  # Build all additional formats of the documentation, i.e. pdf, epub, and htmlzip
        build: # Set the version of Python and other tools you might need
          os: ubuntu-22.04
          tools:
            python: "mambaforge-4.10"
          jobs:
            post_checkout:
              # versioningit needs the full git history to determine the package's version at build time.
              # see: https://github.com/readthedocs/readthedocs.org/issues/5989#issuecomment-853039401
              - git fetch --unshallow
        conda: # Website dependencies
          environment: ${{ devcontainer_main.environment.website.path }}$
        python:
          install: # Install the package
            - method: pip
              path: ${{ pypkg_main.path.root }}$
        sphinx: # Build with Sphinx
          configuration: ${{ web.path.source }}$/conf.py
          builder: dirhtml
          fail_on_warning: false
  url:
    custom:
      name: pypackit.repodynamics.com
workflow:
  web:
    container:
      id: main
      command: ${{ devcontainer_main.environment.website.task.build.alias }}$
    artifact:
      build:
        name: Website - v{{ version }}
        path: ${{ web.path.build }}$
        include_hidden: true
      pages:
        name: Website - v{{ version }} - GH-Pages
        path: ${{ web.path.build }}$/${{ file_script_web_build.data.sphinx_builder }}$
  binder:
    path:
      config: .config/binder
      dockerfile: .binder
    image:
      test_script: '${{ pypkg_test.entry.cli.main.name }}$'
  publish:
    anaconda:
      name: Publish (Anaconda)
      task_name: '{{ pkg.name }} v{{ version }}'
      env:
        name: Anaconda ({{ pkg.name }})
        url: https://anaconda.org/${{ ..index.channel }}$/{{ pkg.name }}/files?version={{ version }}
      index:
        channel: ${{ repo.owner }}$
      action:
        pkg: auto
        test: auto
    pypi:
      name: Publish (PyPI)
      task_name: '{{ pkg.name }} v{{ version }}'
      env:
        name: PyPI ({{ pkg.name }})
        url: https://pypi.org/project/{{ pkg.name }}/{{ version }}
      index:
        url:
          upload: https://upload.pypi.org/legacy/
      action:
        pkg: auto
        test: auto
    testpypi:
      name: Publish (TestPyPI)
      task_name: '{{ pkg.name }} v{{ version }}'
      env:
        name: TestPyPI ({{ pkg.name }})
        url: https://test.pypi.org/project/{{ pkg.name }}/{{ version }}
      index:
        url:
          upload: https://test.pypi.org/legacy/
      action:
        pkg: auto
        test: auto
    github:
      name: Release
      task_name: GitHub
      env:
        name: GitHub Release
        url: ${{ repo.url.deployments.home }}$
      release:
        body:
          body: ${{ __temp__.changelog.body }}$
          sections: ${{ __temp__.changelog.sections }}$
      asset:
        template:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}.zip
          label: ${{ name }}$
          format: zip
          files:
            - source: template
            - source: .github/workflows
              destination: .github/workflows
        sdist:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}-sdists.zip
          label: Source Distributions
          format: zip
          files:
            - pattern: '^[^/]+ - sdist/[^/]+\.tar\.gz$'
              artifact: true
        wheel:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}-wheels.zip
          label: Binary Distributions
          format: zip
          files:
            - pattern: '^[^/]+ - wheels/[^/]+\.whl$'
              artifact: true
        conda:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}-conda.zip
          label: Conda Distributions
          format: zip
          files:
            - pattern: '^[^/]+ - conda/.+\.conda$'
              artifact: true
        dockerfile:
          name: Dockerfile
          label: Dockerfile
          files:
            - source: ${{ workflow.binder.path.dockerfile }}$/Dockerfile
          media_type: text/plain
        docs:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}-docs.zip
          label: Documentation
          format: zip
          files:
            - pattern: '^Website(?!.*GH-Pages)[^/]*$'
              artifact: true
        license:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}-license.zip
          label: License
          format: zip
          files:
            - pattern: '^(LICENSE|COPYING)[^/]*$'
        citation:
          name: >-
            #{{ return slugify(get("name")) }}#-{{ version }}-citation.cff
          label: Citation
          files:
            - source: CITATION.cff
          media_type: application/yaml
    zenodo:
      name: Release
      task_name: Zenodo
      env:
        name: Zenodo
        url: https://zenodo.org/records/{{ id }}
      asset: ${{ workflow.publish.github.asset }}$
    zenodo_sandbox:
      name: Release
      task_name: Zenodo Sandbox
      env:
        name: Zenodo Sandbox
        url: https://sandbox.zenodo.org/records/{{ id }}
      asset: ${{ workflow.publish.github.asset }}$
  schedule:
    cca:
      cron: '43 23 * * *'  # Every day at 23:43 UTC.
      branch_types: [ main, release, pre ]
      job:
        sync:
          action: pull
        announcement_expiry:
          action: commit
    cr_ct:
      cron: '43 6 * * 6'  # Every Saturday at 6:43 UTC.
      branch_types: [ main, release ]
      job:
        lint:
          action: issue
        refactor:
          action: pull
        test:
          action: issue
  test:
    codecov:
      codecov_yml_path: ${{ devcontainer_main.environment.codecov.file.codecov_config.path }}$
zenodo:
  license: '#{{ return get("file_citation_cff.content.license")[0] }}#'
  keywords: '#{{ return get("keywords") }}#'
  related_identifiers:
    - |
      *{{
        #{{
          last_doi = manager.changelog.last_public.get("release", {}).get("zenodo", {}).get("doi")
          out = [
            {
              "identifier": doi,
              "relation": relation,
              "resource_type": get("..upload_type")
            } for doi, relation in [
              (get("zenodo.concept.doi"), "isPartOf"),
              (last_doi, "isNewVersionOf"),
            ] if doi
          ]
          return out
        }}#
      }}*
  contributors: |
    #{{
      out = []
      for role_type in (
        "RightsHolder",
        "Producer",
        "Distributor",
        "Sponsor",
        "RegistrationAgency",
        "RegistrationAuthority",
        "HostingInstitution",
        "Supervisor",
        "ProjectLeader",
        "WorkPackageLeader",
        "ContactPerson",
        "ProjectManager",
        "DataManager",
        "Editor",
        "ResearchGroup",
        "Researcher",
        "DataCurator",
        "DataCollector",
        "ProjectMember",
        "RelatedPerson",
        "Other",
      ):
        for is_member in (True, False):
          for contributor in manager.changelog.current_public.contributors_with_role_types(role_type, member=is_member):
            out.append({"id": contributor["id"], "member": is_member, "role_types": role_type})
        for member in manager.user.members_with_role_types(role_type, active_only=True):
          entry = {"id": member["id"], "member": True, "role_types": role_type}
          if entry not in out:
            out.append(entry)
      return out
    }}#
  custom:
    code:programmingLanguage:
      - id: python
    code:developmentStatus:
      id: >-
        #{{ return "concept" if get("version", "").startswith("0") else "active" }}#
__temp__:
  conda_recipe:
    path:
      local: ${{ ..path.root }}$/conda-recipe/local
      global: ${{ ..path.root }}$/conda-recipe/global
    meta:
      values:
        build:
          values:
            script:
              - value: '{{ PYTHON }} -m pip install {{ pkg_dir }} --no-deps --no-build-isolation -vv'
        requirements:
          values:
            host:
              values:
                  - value: python ${{ pypkg_main.python.version.spec }}$
                  - value: pip
                  - '*{{ #{{ return hook.conda_req("host") }}# }}*'
            run:
              values:
                - value: python ${{ pypkg_main.python.version.spec }}$
                - '*{{ #{{ return hook.conda_req("run") }}# }}*'
            run_constrained:
              values:
                - '*{{ #{{ return hook.conda_req("run_constrained") }}# }}*'
        test:
          values:
            imports:
              values:
                - |
                  *{{
                    #{{
                      out = []
                      for entry in get("..entry.python", {}).values():
                        conda = entry["conda"]
                        if not conda:
                          continue
                        entry = {"value": entry["name"]}
                        if conda is not True:
                          entry["selector"] = conda
                        out.append(entry)
                      return out
                    }}#
                  }}*
            requires:
              values:
                - value: pip
            commands:
              values:
                - value: pip check
                - |
                  *{{
                    #{{
                      out = []
                      for key in ("cli", "gui"):
                        for entry in get(f"..entry.{key}", {}).values():
                          conda = entry["conda"]
                          if not conda:
                            continue
                          entry = {"value": f"{entry["name"]} --help"}
                          if conda is not True:
                            entry["selector"] = conda
                          out.append(entry)
                      return out
                    }}#
                  }}*
        about:
          home: ${{ web.url.home }}$
          license: ${{ license.expression }}$
          license_file:
            - '{{ pkg_dir }}${{ __temp__.pkg_license_dir_name.licenses }}$/'
            - |
              *{{
                #{{
                  if not any(
                    component["path"].get("header_plain")
                    for component in get("license.component", {}).values()
                  ):
                    return []
                  return [f'{{{{ pkg_dir }}}}{get("__temp__.pkg_license_dir_name.copyrights")}/']
                }}#
              }}*
          summary: ${{ title }}$
          dev_url: ${{ repo.url.home }}$
          doc_url: ${{ web.url.home }}$
          doc_source_url: ${{ file_readme.url }}$
        extra:
          recipe-maintainers: |
            #{{
                return [
                  member["github"]["id"] for member in manager.user.members_with_role_types(
                    "ProjectManager",
                    active_only=True,
                  )
                ]
            }}#
  pyproject:
    build-system:
      build-backend: setuptools.build_meta
      requires: >-
        #{{ return hook.pyproject_dependency("build") }}#
    project:
      name: ${{ .name }}$
      description: ${{ title }}$
      readme:
        file: README.md
        content-type: text/markdown
      requires-python: ${{ .python.version.spec }}$
      license:
        text: ${{ license.expression }}$
      # TODO: uncomment after setuptools adds support for PEP 639: https://github.com/pypa/setuptools/pull/4829
      # license: ${{ license.expression }}$
      # license-files: [ '${{ __temp__.pkg_license_dir_name.licenses }}$/*', '${{ __temp__.pkg_license_dir_name.copyrights }}$/*' ]
      authors: |
        #{{
          return [
            hook.entity_in_pyproject(author)
            for author in (
              manager.user.members_with_role_types("Author", active_only=True)
              + manager.changelog.current_public.contributors_with_role_types("Author", member=False)
            )
          ]
        }}#
      maintainers: |
        #{{
          return [
            hook.entity_in_pyproject(maintainer)
            for maintainer in manager.user.members_with_role_types(
              ["ContactPerson", "ProjectManager", "DataManager", "ProjectLeader", "Supervisor"],
              active_only=True,
            )
          ]
        }}#
      keywords: ${{ keywords }}$
      classifiers:
        - 'Natural Language :: ${{ language.name }}$'
        - '*{{ #{{ return hook.trove_classifiers() }}# }}*'
      urls:
        Homepage: ${{ web.url.home }}$
        Documentation: ${{ web.page.manual.url }}$
        Source: ${{ repo.url.home }}$
        Download: ${{ repo.url.releases.home }}$
        News: ${{ web.page.blog.url }}$
        Issue-Tracker: ${{ repo.url.issues.home }}$
      scripts: >-
        #{{ return hook.pyproject_scripts("cli") }}#
      gui-scripts: >-
        #{{ return hook.pyproject_scripts("gui") }}#
      entry-points: >-
        #{{ return hook.pyproject_entry_points() }}#
      dependencies: >-
        #{{ return hook.pyproject_dependency("core") }}#
      optional-dependencies: >-
        #{{ return hook.pyproject_dependency("optional") }}#
      dynamic: [ version ]
    tool:
      setuptools:
        packages:
          find:
            where: [ '${{ .path.source_rel }}$' ]
            namespaces: true
        include-package-data: true
        license-files: [ '${{ __temp__.pkg_license_dir_name.licenses }}$/*', '${{ __temp__.pkg_license_dir_name.copyrights }}$/*' ]
        cmdclass:
          build_py: versioningit.cmdclass.build_py
          sdist: versioningit.cmdclass.sdist
      versioningit:
        vcs:
          method: git
          match: [ '${{ tag.version.prefix }}$[0-9]*.[0-9]*.[0-9]*' ]
          default-tag: ${{ tag.version.prefix }}$0.0.0
        tag2version:
          rmprefix: ${{ tag.version.prefix }}$
        format:
          distance: '{base_version}+{distance}.{committer_date:%Y.%m.%d}.{rev}'
          dirty: '{base_version}+0.{committer_date:%Y.%m.%d}.{rev}.dirty'
          distance-dirty: '{base_version}+{distance}.{committer_date:%Y.%m.%d}.{rev}.dirty'
        onbuild:
          method: replace-version
          regex: '^__version_info__: dict\[str, str\] = (?P<version>.*)'
          require-match: true
          source-file: '${{ .path.source_rel }}$/${{ .import_name }}$/__init__.py'
          build-file: '${{ .import_name }}$/__init__.py'
          replacement: >-
            {{
            "version": "{version}",
            "build_date": "{build_date:%Y.%m.%d}",
            "committer_date": "{committer_date:%Y.%m.%d}",
            "author_date": "{author_date:%Y.%m.%d}",
            "branch": "{branch}",
            "distance": "{distance}",
            "commit_hash": "{revision}"
            }}
  pkg_license_dir_name:
    licenses: LICENSES
    copyrights: COPYRIGHTS
  port:
    desktop_lite:
      web: 6080
      vnc: 5901
    jupyter: 8888
  conda_env_name:
    app: ${{ devcontainer_main.var.conda.app_env }}$
    manager: proman
  changelog:
    body:
      - class: badges
        service: static
        style: ${{ theme.badge.style }}$
        height: ${{ theme.badge.height }}$
        color: ${{ theme.badge.color.blue }}$
        label_color: ${{ theme.badge.color.grey }}$
        separator: ${{ theme.badge.separator }}$
        items:
          - label: ${{ pypkg_main.name }}$
            args:
              message: >-
                #{{ return manager.changelog.current_public.version }}#
            label_color: ${{ theme.color.primary.light }}$
            label_color_dark: ${{ theme.color.primary.dark }}$
            color: ${{ theme.color.secondary.light }}$
            color_dark: ${{ theme.color.secondary.dark }}$
            logo: ${{ web.file.icon.path }}$
            logo_type: file
          - label: >-
              #{{
                release_type = manager.changelog.current_public.type
                icon_type = {
                  "major": "change",
                  "minor": "feat",
                  "patch": "fix",
                  "post": "post"
                }[release_type]
                icon = get(f"theme.icon.{icon_type}")
                return f"{icon} Release Type"
              }}#
            args:
              message: >-
                #{{ return manager.changelog.current_public.type }}#
            color: >-
              #{{
                release_type = manager.changelog.current_public.type
                color_name = {
                  "major": "red",
                  "minor": "orange",
                  "patch": "green",
                  "post": "blue"
                }[release_type]
                return get(f"theme.badge.color.{color_name}")
              }}#
          - label: 🗓 Release Date
            args:
              message: >-
                #{{ return manager.changelog.current_public.date }}#
          - |
            *{{
              #{{
                curr_changelog = manager.changelog.current_public
                out = []
                zenodo = curr_changelog.get("zenodo", {})
                if zenodo:
                  badge = {
                    "label": "DOI",
                    "args": {"message": zenodo["doi"]},
                    "logo": "zenodo",
                    "logo_color": "#1682D4",
                    "color": "#1682D4",
                    "link": f"https://zenodo.org/{"uploads" if zenodo.get("draft") else "records"}/{zenodo["id"]}"
                  }
                  out.append(badge)
                version = curr_changelog.version
                if get("pypkg_main.pypi.publishable") and get("workflow.publish.pypi"):
                  pypi = {
                    "label": "pip install",
                    "args": {"message": f"{get("pypkg_main.name")} == {version}"},
                    "logo": f"{get("web.path.source")}/_media/logo_ext/pypi.png",
                    "logo_type": "file",
                    "logo_media_type": "png",
                    "color": "#3775A9",
                    "link": get("pypkg_main.pypi.url.home"),
                  }
                  out.append(pypi)
                conda_publish = get("workflow.publish.conda-forge") or get("workflow.publish.anaconda")
                if conda_publish:
                  conda = {
                    "label": "conda install",
                    "args": {"message": f"{get("pypkg_main.name")} == {version} -c {conda_publish["index"]["channel"]}"},
                    "logo": "anaconda",
                    "logo_type": "name",
                    "logo_color": "#44A833",
                    "color": "#44A833",
                    "link": get("pypkg_main.conda.url.home"),
                  }
                  out.append(conda)
                publish_docker = get("workflow.binder")
                if publish_docker:
                  index = publish_docker["index"]
                  docker = {
                      "label": "docker pull",
                      "args": {"message": f"{index["registry"]}/{index["namespace"]}/{index["name"]}:{version}".lower()},
                      "logo": "docker",
                      "logo_type": "name",
                      "color": "#2496ED",
                      "logo_color": "#2496ED",
                      "link": index["url"]["home"],
                    }
                  out.append(docker)
                tag = f"{get("tag.version.prefix")}{version}"
                github = {
                  "label": "git checkout",
                  "args": {"message": tag},
                  "logo": "github",
                  "logo_type": "name",
                  "color": "#181717",
                  "link": get("repo.url.releases.home"),
                }
                out.append(github)
                binder = {
                  "label": "Binder",
                  "service": "binder",
                  "endpoint": "github",
                  "args": {
                    "message": "try online",
                    "user": get("repo.owner"),
                    "repo": get("repo.name"),
                    "ref": tag
                  },
                  "color": "#579ACA",
                }
                out.append(binder)
                return out
              }}#
            }}*
      - >-
        **#{{ return manager.changelog.current_public.title }}#**
      - >-
        #{{ return manager.changelog.current_public.description }}#
    sections:
      - |
        *{{
          #{{
            if manager.changelog.current_public.get("phase") != "dev":
              return []
            dev_release = manager.changelog.current_public.get("dev")
            if not dev_release:
              return []
            badge_items = []
            date = dev_release.get("date")
            if date:
              badge_items.append({"label": "🗓 Release Date", "args": {"message": date}})
            zenodo = dev_release.get("zenodo_sandbox")
            if zenodo:
              badge = {
                "label": "DOI",
                "args": {"message": zenodo["doi"]},
                "logo": "zenodo",
                "logo_color": "#1682D4",
                "color": "#1682D4",
                "link": f"https://sandbox.zenodo.org/{"uploads" if zenodo.get("draft") else "records"}/{zenodo["id"]}"
              }
              badge_items.append(badge)
            version = dev_release.get("version")
            if version:
              tag = f"{get("tag.version.prefix")}{version}"
              github = {
                "label": "git checkout",
                "args": {"message": tag},
                "logo": "github",
                "logo_type": "name",
                "color": "#181717",
                "link": get("repo.url.releases.home"),
              }
              badge_items.append(github)
              binder = {
                "label": "Binder",
                "service": "binder",
                "endpoint": "github",
                "args": {
                  "message": "try online",
                  "user": get("repo.owner"),
                  "repo": get("repo.name"),
                  "ref": tag
                },
                "color": "#579ACA",
              }
              badge_items.append(binder)
            badges = {
              "class": "badges",
              "service": "static",
              "style": get("theme.badge.style"),
              "height": get("theme.badge.height"),
              "color": get("theme.badge.color.blue"),
              "label_color": get("theme.badge.color.grey"),
              "separator": get("theme.badge.separator"),
              "items": badge_items
            }
            section = {
              "heading": "Latest Developmental Release",
              "body": [badges]
            }
            return [section]
          }}#
        }}*
      - heading: Requirements
        body:
          - - class: button
              text: "⚙️ Operating System"
              style: ${{ theme.badge.style }}$
              height: ${{ theme.badge.height }}$
              color: ${{ theme.badge.color.grey }}$
            - '&nbsp;'
            - class: badges
              service: static
              style: ${{ theme.badge.style }}$
              height: ${{ theme.badge.height }}$
              label_color: ${{ theme.badge.color.grey }}$
              separator: 1
              items:
                - |
                  *{{
                    #{{
                      badges = []
                      oss = get("pypkg_main.os")
                      color_green = get("theme.badge.color.green")
                      for os in oss.values():
                        supports = "any" if "cibuild" not in os else " | ".join(os["builds"])
                        badge = {
                          "label": os["name"],
                          "args": {"message": supports},
                          "color": color_green,
                          "logo": os.get("data", {}).get("logo"),
                          "logo_color": os.get("data", {}).get("logo_color")
                        }
                        badges.append(badge)
                      return badges
                    }}#
                  }}*
          - - class: badge
              service: static
              args:
                message: "Python"
              style: ${{ theme.badge.style }}$
              height: ${{ theme.badge.height }}$
              color: ${{ theme.badge.color.grey }}$
              label_color: ${{ theme.badge.color.grey }}$
              logo: ${{ web.path.source }}$/_media/logo_ext/python.svg
              logo_type: file
              logo_media_type: svg+xml
            - '&nbsp;'
            - class: badges
              service: static
              style: ${{ theme.badge.style }}$
              height: ${{ theme.badge.height }}$
              color: ${{ theme.badge.color.blue }}$
              label_color: ${{ theme.badge.color.grey }}$
              separator: 1
              items:
                - label: Versions
                  args:
                    message: >-
                      #{{ return " | ".join(get("pypkg_main.python.version.minors")) }}#
                - label: Implementation
                  args:
                    message: >-
                      #{{ return "any" if get("pypkg_main.python.pure") else pypkg_main.python.implementation }}#
                  color: >-
                    #{{
                      if get("pypkg_main.python.pure"):
                        return get("theme.badge.color.green")
                      return get("theme.badge.color.blue")
                    }}#
          - |
            #{{
              deps = list(get("pypkg_main.dependency.core", {}).values())
              style = get("theme.badge.style")
              height = get("theme.badge.height")
              green = get("theme.badge.color.green")
              blue = get("theme.badge.color.blue")
              grey = get("theme.badge.color.grey")
              label = "📦 Dependencies"
              if not deps:
                badge = {
                  "class": "badge",
                  "service": "static",
                  "label": label,
                  "args": {"message": "none"},
                  "style": style,
                  "height": height,
                  "color": green,
                  "label_color": grey
                }
                return [badge]
              button = {
                "class": "button",
                "text": label,
                "style": style,
                "height": height,
                "color": grey,
              }
              badges = {
                "class": "badges",
                "service": "static",
                "style": style,
                "height": height,
                "label_color": grey,
                "separator": 1,
                "items": [],
              }
              out = [button, "&nbsp;", badges]
              for dep in deps:
                name = dep["name"].strip()
                name_spec = dep["install"].get("pip", {}).get("spec") or dep.get("conda", {}).get("spec")
                spec = name_spec.strip().casefold().removeprefix(name.casefold()).strip()
                badge = {
                  "label": name,
                  "args": {"message": spec or "any"},
                  "color": blue if spec else green,
                }
                badges["items"].append(badge)
              return out
            }}#
      - heading: Interfaces
        body:
          - |
            *{{
              #{{
                interfaces = get("pypkg_main.entry")
                style = get("theme.badge.style")
                height = get("theme.badge.height")
                blue = get("theme.badge.color.blue")
                grey = get("theme.badge.color.grey")

                config = {
                  "python": {
                    "text": "API",
                    "logo": f"{get("web.path.source")}/_media/logo_ext/python.svg",
                    "logo_type": "file",
                    "logo_media_type": "svg+xml",
                  },
                  "cli": {
                    "text": "CLI",
                    "logo": "gnubash",
                    "logo_color": "#4EAA25",
                  },
                  "gui": {
                    "text": f"{get("theme.icon.gui")} GUI"
                  },
                }
                item_color = {
                  "python": "#3776AB",
                  "cli": "#000",
                  "gui": "#CCC",
                }
                item_label = {
                  "python": "import",
                  "cli": "$",
                  "gui": "$",
                }

                out = []
                for interface in ("python", "cli", "gui"):
                  if interface not in interfaces:
                    continue
                  button = {
                    "class": "button",
                    "style": style,
                    "height": height,
                    "color": grey,
                  } | config[interface]
                  badges = {
                    "class": "badges",
                    "service": "static",
                    "label": item_label[interface],
                    "style": style,
                    "height": height,
                    "color": blue,
                    "label_color": grey,
                    "separator": 1,
                    "items": [],
                  }
                  out.append([button, "&nbsp;", badges])
                  for entry in interfaces[interface].values():
                    badge = {
                      "args": {"message": entry["name"]},
                      "color": item_color[interface],
                      "title": entry["description"],
                      "alt": entry["name"],
                    }
                    badges["items"].append(badge)
                return out
              }}#
            }}*
