$id: https://controlman.repodynamics.com/schema/devcontainer
$schema: https://json-schema.org/draft/2020-12/schema
title: Dev Container Metadata
summary: A [`devcontainer.json`](https://containers.dev/implementors/json_reference/) file definition.
description: |
  Docs: https://containers.dev/implementors/json_reference/
  Ref: https://github.com/devcontainers/spec/blob/main/schemas/devContainer.base.schema.json
type: object
additionalProperties: false
required:
  - service
  - workspaceFolder
properties:
  name:
    type: string
    description: A name for the dev container which can be displayed to the user.
  features:
    type: object
    summary: Features to add to the dev container.
    description: |
      A list of [available features](https://containers.dev/features) can be found on the Dev Containers website.
      Official features can be found in the 
      [Dev Containers GitHub repository](https://github.com/devcontainers/features/tree/main/src).
    additionalProperties: true
  overrideFeatureInstallOrder:
    type: array
    description: Array consisting of the Feature id (without the semantic version)
      of Features in the order the user wants them to be installed.
    items:
      type: string
  secrets:
    type: object
    description: Recommended secrets for this dev container. Recommendations are
      provided as environment variable keys with optional metadata.
    patternProperties:
      ^[a-zA-Z_][a-zA-Z0-9_]*$:
        type: object
        description: 'Environment variable keys following unix-style naming conventions.
          eg: ^[a-zA-Z_][a-zA-Z0-9_]*$'
        properties:
          description:
            type: string
            description: A description of the secret.
          documentationUrl:
            type: string
            format: uri
            description: A URL to documentation about the secret.
        additionalProperties: false
    additionalProperties: false
  forwardPorts:
    type: array
    description: Ports that are forwarded from the container to the local machine.
      Can be an integer port number, or a string of the format "host:port_number".
    items:
      oneOf:
        - type: integer
          maximum: 65535
          minimum: 0
        - type: string
          pattern: ^([a-z0-9-]+):(\d{1,5})$
  portsAttributes:
    type: object
    patternProperties:
      (^\d+(-\d+)?$)|(.+):
        type: object
        description: A port, range of ports (ex. "40000-55000"), or regular expression
          (ex. ".+\\/server.js").  For a port number or range, the attributes
          will apply to that port number or range of port numbers. Attributes
          which use a regular expression will apply to ports whose associated
          process command line matches the expression.
        properties:
          onAutoForward:
            type: string
            enum:
              - notify
              - openBrowser
              - openBrowserOnce
              - openPreview
              - silent
              - ignore
            enumDescriptions:
              - Shows a notification when a port is automatically forwarded.
              - Opens the browser when the port is automatically forwarded. Depending
                on your settings, this could open an embedded browser.
              - Opens the browser when the port is automatically forwarded, but
                only the first time the port is forward during a session. Depending
                on your settings, this could open an embedded browser.
              - Opens a preview in the same window when the port is automatically
                forwarded.
              - Shows no notification and takes no action when this port is automatically
                forwarded.
              - This port will not be automatically forwarded.
            description: Defines the action that occurs when the port is discovered
              for automatic forwarding
            default: notify
          elevateIfNeeded:
            type: boolean
            description: Automatically prompt for elevation (if needed) when this
              port is forwarded. Elevate is required if the local port is a privileged
              port.
            default: false
          label:
            type: string
            description: Label that will be shown in the UI for this port.
            default: Application
          requireLocalPort:
            type: boolean
            markdownDescription: When true, a modal dialog will show if the chosen
              local port isn't used for forwarding.
            default: false
          protocol:
            type: string
            enum:
              - http
              - https
            description: The protocol to use when forwarding this port.
        default:
          label: Application
          onAutoForward: notify
    markdownDescription: |-
      Set default properties that are applied when a specific port number is forwarded. For example:

      ```
      "3000": {
        "label": "Application"
      },
      "40000-55000": {
        "onAutoForward": "ignore"
      },
      ".+\\/server.js": {
       "onAutoForward": "openPreview"
      }
      ```
    defaultSnippets:
      - body:
          ${1:3000}:
            label: ${2:Application}
            onAutoForward: notify
    additionalProperties: false
  otherPortsAttributes:
    type: object
    properties:
      onAutoForward:
        type: string
        enum:
          - notify
          - openBrowser
          - openPreview
          - silent
          - ignore
        enumDescriptions:
          - Shows a notification when a port is automatically forwarded.
          - Opens the browser when the port is automatically forwarded. Depending
            on your settings, this could open an embedded browser.
          - Opens a preview in the same window when the port is automatically
            forwarded.
          - Shows no notification and takes no action when this port is automatically
            forwarded.
          - This port will not be automatically forwarded.
        description: Defines the action that occurs when the port is discovered
          for automatic forwarding
        default: notify
      elevateIfNeeded:
        type: boolean
        description: Automatically prompt for elevation (if needed) when this
          port is forwarded. Elevate is required if the local port is a privileged
          port.
        default: false
      label:
        type: string
        description: Label that will be shown in the UI for this port.
        default: Application
      requireLocalPort:
        type: boolean
        markdownDescription: When true, a modal dialog will show if the chosen
          local port isn't used for forwarding.
        default: false
      protocol:
        type: string
        enum:
          - http
          - https
        description: The protocol to use when forwarding this port.
    defaultSnippets:
      - body:
          onAutoForward: ignore
    markdownDescription: |-
      Set default properties that are applied to all ports that don't get properties from the setting `remote.portsAttributes`. For example:

      ```
      {
        "onAutoForward": "ignore"
      }
      ```
    additionalProperties: false
  updateRemoteUserUID:
    type: boolean
    description: Controls whether on Linux the container's user should be updated
      with the local user's UID and GID. On by default when opening from a local
      folder.
  containerEnv:
    type: object
    additionalProperties:
      type: string
    description: Container environment variables.
  containerUser:
    type: string
    description: The user the container will be started with. The default is the
      user on the Docker image.
  mounts:
    type: array
    description: Mount points to set up when creating the container. See Docker's
      documentation for the --mount option for the supported syntax.
    items:
      anyOf:
        - type: string
        - type: object
          properties:
            type:
              type: string
              enum:
                - bind
                - volume
              description: Mount type.
            source:
              type: string
              description: Mount source.
            target:
              type: string
              description: Mount target.
          required:
            - type
            - target
          additionalProperties: false
  init:
    type: boolean
    description: Passes the --init flag when creating the dev container.
  privileged:
    type: boolean
    description: Passes the --privileged flag when creating the dev container.
  capAdd:
    type: array
    description: Passes docker capabilities to include when creating the dev container.
    examples:
      - SYS_PTRACE
    items:
      type: string
  securityOpt:
    type: array
    description: Passes docker security options to include when creating the dev
      container.
    examples:
      - seccomp=unconfined
    items:
      type: string
  remoteEnv:
    type: object
    additionalProperties:
      type:
        - string
        - 'null'
    description: Remote environment variables to set for processes spawned in
      the container including lifecycle scripts and any remote editor/IDE server
      process.
  remoteUser:
    type: string
    description: The username to use for spawning processes in the container including
      lifecycle scripts and any remote editor/IDE server process. The default
      is the same user as the container.
  initializeCommand:
    type:
      - string
      - array
      - object
    description: A command to run locally (i.e Your host machine, cloud VM) before
      anything else. This command is run before "onCreateCommand". If this is
      a single string, it will be run in a shell. If this is an array of strings,
      it will be run as a single command without shell. If this is an object,
      each provided command will be run in parallel.
    items:
      type: string
    additionalProperties:
      type:
        - string
        - array
      items:
        type: string
  onCreateCommand:
    type:
      - string
      - array
      - object
    description: A command to run when creating the container. This command is
      run after "initializeCommand" and before "updateContentCommand". If this
      is a single string, it will be run in a shell. If this is an array of strings,
      it will be run as a single command without shell. If this is an object,
      each provided command will be run in parallel.
    items:
      type: string
    additionalProperties:
      type:
        - string
        - array
      items:
        type: string
  updateContentCommand:
    type:
      - string
      - array
      - object
    description: A command to run when creating the container and rerun when the
      workspace content was updated while creating the container. This command
      is run after "onCreateCommand" and before "postCreateCommand". If this is
      a single string, it will be run in a shell. If this is an array of strings,
      it will be run as a single command without shell. If this is an object,
      each provided command will be run in parallel.
    items:
      type: string
    additionalProperties:
      type:
        - string
        - array
      items:
        type: string
  postCreateCommand:
    type: object
    description: A command to run after creating the container. This command is
      run after "updateContentCommand" and before "postStartCommand". If this
      is a single string, it will be run in a shell. If this is an array of strings,
      it will be run as a single command without shell. If this is an object,
      each provided command will be run in parallel.
    default: { }
    properties:
      source_tasks:
        summary: Source the tasks file in the user's bashrc.
        type: string
        default: >-
          echo 'source ${{ ..workspaceFolder }}$/${{ ...path.tasks_local }}$' | tee -a ~/.bashrc ~/.bash_profile
    additionalProperties:
      type:
        - string
        - array
      items:
        type: string
  postStartCommand:
    type: object
    description: A command to run after starting the container. This command is
      run after "postCreateCommand" and before "postAttachCommand". If this is
      a single string, it will be run in a shell. If this is an array of strings,
      it will be run as a single command without shell. If this is an object,
      each provided command will be run in parallel.
    additionalProperties:
      type:
        - string
        - array
      items:
        type: string
  postAttachCommand:
    type:
      - string
      - array
      - object
    description: A command to run when attaching to the container. This command
      is run after "postStartCommand". If this is a single string, it will be
      run in a shell. If this is an array of strings, it will be run as a single
      command without shell. If this is an object, each provided command will
      be run in parallel.
    items:
      type: string
    additionalProperties:
      type:
        - string
        - array
      items:
        type: string
  waitFor:
    type: string
    enum:
      - initializeCommand
      - onCreateCommand
      - updateContentCommand
      - postCreateCommand
      - postStartCommand
    description: The user command to wait for before continuing execution in the
      background while the UI is starting up. The default is "updateContentCommand".
  userEnvProbe:
    type: string
    enum:
      - none
      - loginShell
      - loginInteractiveShell
      - interactiveShell
    description: User environment probe to run. The default is "loginInteractiveShell".
  hostRequirements:
    type: object
    description: Host hardware requirements.
    properties:
      cpus:
        type: integer
        minimum: 1
        description: Number of required CPUs.
      memory:
        type: string
        pattern: ^\d+([tgmk]b)?$
        description: Amount of required RAM in bytes. Supports units tb, gb, mb
          and kb.
      storage:
        type: string
        pattern: ^\d+([tgmk]b)?$
        description: Amount of required disk space in bytes. Supports units tb,
          gb, mb and kb.
      gpu:
        oneOf:
          - type:
              - boolean
              - string
            enum:
              - true
              - false
              - optional
            description: Indicates whether a GPU is required. The string "optional"
              indicates that a GPU is optional. An object value can be used to
              configure more detailed requirements.
          - type: object
            properties:
              cores:
                type: integer
                minimum: 1
                description: Number of required cores.
              memory:
                type: string
                pattern: ^\d+([tgmk]b)?$
                description: Amount of required RAM in bytes. Supports units tb,
                  gb, mb and kb.
            description: Indicates whether a GPU is required. The string "optional"
              indicates that a GPU is optional. An object value can be used to
              configure more detailed requirements.
            additionalProperties: false
    unevaluatedProperties: false
  additionalProperties:
    type: object
    additionalProperties: true
  # Compose-specific
  dockerComposeFile:
    description: Path to the docker-compose file(s) used to start the services.
    default_description: |
      The path to the docker-compose file from the current devcontainer is automatically added.
    type: array
    items:
      type: string
  service:
    type: string
    description: The service you want to work on. This is considered the primary
      container for your dev environment which your editor will connect to.
    default: '#{{ return get("..__key__").removeprefix("devcontainer_") }}#'
  runServices:
    type: array
    description: An array of services that should be started and stopped.
    items:
      type: string
  workspaceFolder:
    type: string
    description: The path of the workspace folder inside the container. This is
      typically the target path of a volume mount in the docker-compose.yml.
    default: /workspace
  shutdownAction:
    type: string
    enum:
      - none
      - stopCompose
    enum_description:
      - Do not take any actions.
      - Stop all of the compose containers.
    default: none
    description: Action to take when the user disconnects from the primary container in their editor.
  overrideCommand:
    type: boolean
    description: Whether to overwrite the command specified in the image. The default is false.
  # Customizations
  customizations:
    type: object
    description: Tool-specific configuration. Each tool should use a JSON object
      subproperty with a unique name to group its customizations.
    properties:
      codespaces:
        type: object
        description: Customizations specific to GitHub Codespaces
        properties:
          repositories:
            type: object
            description: |-
              Configuration relative to the given repositories, following the format 'owner/repo'.
                A wildcard (*) is permitted for the repo name (eg: 'microsoft/*')
            patternProperties:
              ^[a-zA-Z0-9-_.]+[.]*/[a-zA-Z0-9-_*]+[.]*$:
                type: object
                additionalProperties: true
                oneOf:
                  - properties:
                      permissions:
                        type: object
                        description: |-
                          Additional repository permissions.
                           See https://aka.ms/ghcs/multi-repo-auth for more info.
                        additionalProperties: true
                        anyOf:
                          - properties:
                              actions:
                                type: string
                                enum:
                                  - read
                                  - write
                          - properties:
                              checks:
                                type: string
                                enum:
                                  - read
                                  - write
                          - properties:
                              contents:
                                type: string
                                enum:
                                  - read
                                  - write
                          - properties:
                              deployments:
                                type: string
                                enum:
                                  - read
                                  - write
                          - properties:
                              discussions:
                                type: string
                                enum:
                                  - read
                                  - write
                          - properties:
                              issues:
                                type: string
                                enum:
                                  - read
                                  - write
                          - properties:
                              packages:
                                type: string
                                enum:
                                  - read
                          - properties:
                              pages:
                                type: string
                                enum:
                                  - read
                                  - write
                          - properties:
                              pull_requests:
                                type: string
                                enum:
                                  - read
                                  - write
                          - properties:
                              repository_projects:
                                type: string
                                enum:
                                  - read
                                  - write
                          - properties:
                              statuses:
                                type: string
                                enum:
                                  - read
                                  - write
                          - properties:
                              workflows:
                                type: string
                                enum:
                                  - write
                  - properties:
                      permissions:
                        type: string
                        description: |-
                          Additional repository permissions.
                           See https://aka.ms/ghcs/multi-repo-auth for more info.
                        enum:
                          - read-all
                          - write-all
          openFiles:
            type: array
            description: The paths to the files to open when the codespace is created.
              Paths are relative to the workspace.
            items:
              type: string
          disableAutomaticConfiguration:
            type: boolean
            description: Disables the setup that is automatically run in a codespace
              if no `postCreateCommand` is specified.
            default: false
      vscode:
        type: object
        properties:
          extensions:
            type: array
            description: An array of extensions that should be installed into the
              container. A minus '-' in front of the extension id removes it from
              the list of extensions to be installed.
            items:
              type: string
              pattern:
                ^-?([a-z0-9A-Z][a-z0-9A-Z-]*)\.([a-z0-9A-Z][a-z0-9A-Z-]*)((@(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)|@prerelease)?$
              errorMessage: "Expected format: '${publisher}.${name}', '-${publisher}.${name}'
                or '${publisher}.${name}@${version}'. Example: 'ms-dotnettools.csharp'."
          settings:
            type: object
            description: Machine specific settings that should be copied into the
              container. These are only copied when connecting to the container for
              the first time, rebuilding the container then triggers it again.
              [Default settings](https://code.visualstudio.com/docs/getstarted/settings#_default-settings)
              are documented in the VS Code documentation.
              Note that [you can also add](https://github.com/microsoft/vscode-remote-release/issues/9951)
              `launch` and `tasks` object here, corresponding to the
              [launch.json](https://code.visualstudio.com/docs/editor/debugging#_launch-configurations)
              and [tasks.json](https://code.visualstudio.com/docs/editor/tasks) configuration files.
            properties:
              tasks:
                summary: >-
                  [Tasks](https://code.visualstudio.com/docs/editor/tasks) configurations.
                description: |
                  This corresponds to the [`tasks.json`](https://code.visualstudio.com/docs/editor/tasks-appendix) 
                  configuration file in VS Code.
                  You can also use [variables](https://code.visualstudio.com/docs/editor/variables-reference)
                  in the `command`, `args` and `options` 
                  [fields](https://code.visualstudio.com/docs/editor/tasks#_variable-substitution).
                  Note that support for including tasks directly in the `devcontainer.json` file
                  might [change](https://github.com/microsoft/vscode-remote-release/issues/9951)
                  in the future in favor of using a separate `tasks.json` file.
          devPort:
            type: integer
            description: The port VS Code can use to connect to its backend.
