pypkg_main:
  os:
    linux-64:
      name: Linux (x64)
      runner: ubuntu-24.04
      data:
        logo: ${{ web.path.source }}$/_media/logo_ext/linux.png
    linux-aarch64:
      name: Linux (arm64)
      runner: ubuntu-24.04-arm
      data:
        logo: ${{ ...linux-64.data.logo }}$
    osx-64:
      name: macOS (x64)
      runner: macos-13
      data:
        logo: apple
        logo_color: '#000000'
    osx-arm64:
      name: macOS (arm64)
      runner: macos-15
      data:
        logo: apple
        logo_color: '#000000'
    win-64:
      name: Windows (x64)
      runner: windows-2025
      data:
        logo: https://upload.wikimedia.org/wikipedia/commons/4/44/Microsoft_logo.svg
  entry:
    cli:
      main:
        name: '#{{ return get("pypkg_main.name").lower() }}#'
        description: Main CLI entry of the package.
        ref: ${{ pypkg_main.import_name }}$.__main__:main
  dependency:
    build:
      setuptools:
        install:
          pip:
            version: '>=72.1.0,<73'
            homepage: https://pypi.org/project/setuptools/
          conda:
            homepage: https://anaconda.org/conda-forge/setuptools
      versioning:
        name: versioningit
        import_name: versioningit
        install:
          pip:
            version: '>=3.1.2,<4'
            homepage: https://pypi.org/project/versioningit/
          conda:
            homepage: https://anaconda.org/conda-forge/versioningit
    core:
      pkgdata:
        description: |
          Handling package resources, such as accessing data files that are
          distributed with the package.
        install:
          pip:
            homepage: https://pypi.org/project/pkgdata/
          conda:
            channel: repodynamics
            homepage: https://anaconda.org/repodynamics/pkgdata
        url:
          docs: https://pkgdata.repodynamics.com/
          source: https://github.com/repodynamics/pkgdata
  source_file:
    all:
      glob: '**/*.py'
      header_comments:
        content: |
          ${{ pypkg_main.name }}$ ${{ copyright }}$
          SPDX-License-Identifier: ${{ license.expression }}$
        max_line_length: ${{ devcontainer_main.environment.pre_commit.file.ruff_config.content.line-length }}$
    top_import:
      glob: __init__.py
      docstring:
        content: |
          ${{ name }}$: ${{ title }}$.

          ${{ abstract }}$
        max_line_length: ${{ devcontainer_main.environment.pre_commit.file.ruff_config.content.line-length }}$
  conda:
    recipe: ${{ __temp__.conda_recipe }}$
  pyproject: ${{ __temp__.pyproject }}$
  file:
    readme:
      name: Package README
      summary: |
        Main README file for the package.
      path: ${{ pypkg_main.path.root }}$/${{ pypkg_main.pyproject.project.readme.file }}$
      content: ${{ file_readme.content }}$
      type: md
      file_setting:
        md:
          target: pypi
    setuptools_manifest:
      name: MANIFEST.in
      summary: |
        Manifest file for controlling files and directories in the source distribution.
      description: |
        The `MANIFEST.in` file is used to
        [control files and directories](https://setuptools.pypa.io/en/latest/userguide/miscellaneous.html#controlling-files-in-the-distribution)
        when creating a source distribution of the package.
        It is used by the `sdist` command of `setuptools` to determine which files
        to include in the source distribution.
      notes: |
        The [Setuptools-SCM](https://pypi.org/project/setuptools-scm/) plugin
        can be used instead of the `MANIFEST.in` file to automatically
        include all git-tracked files in the source distribution.
        The plugin also automatically manages the version number of the package,
        similar to [`versioningit`](https://pypi.org/project/versioningit/).
      type: txt
      path: ${{ pypkg_main.path.root }}$/MANIFEST.in  # Filename must be `MANIFEST.in`
      content:
        - graft ${{ pypkg_main.path.import_rel }}$/data
        - include ${{ pypkg_main.path.import_rel }}$/py.typed
        - global-exclude *.py[cod] __pycache__ *.so
  test: >-
    #{{ return hook.pypkg_test("test") }}#
pypkg_test:
  path:
    root: test
  name: ${{ pypkg_main.name }}$-TestSuite
  os: ${{ pypkg_main.os }}$
  dependency:
    # For other PyTest plugins, see:
    # - https://github.com/augustogoulart/awesome-pytest
    # - https://pytest-with-eric.com/pytest-best-practices/pytest-plugins/
    build: ${{ pypkg_main.dependency.build }}$
    core:
      pytest:
        description: Testing framework for Python.
        install:
          conda:
            homepage: https://anaconda.org/conda-forge/pytest
          pip:
            version: ==8.3.5
            homepage: https://pypi.org/project/pytest/
        url:
          docs: https://docs.pytest.org/en/stable/
          source: https://github.com/pytest-dev/pytest
      pytest-cov:
        description: Pytest plugin for measuring test coverage.
        notes: |
          This plugin uses the [coverage.py](https://github.com/nedbat/coveragepy) package
          to measure code coverage.
        install:
          conda:
            homepage: https://anaconda.org/conda-forge/pytest-cov
          pip:
            version: ==6.0.0
            homepage: https://pypi.org/project/pytest-cov/
        url:
          docs: https://pytest-cov.readthedocs.io/
          source: https://github.com/pytest-dev/pytest-cov
      pytest-html:
        description: Pytest plugin for generating HTML reports.
        install:
          conda:
            homepage: https://anaconda.org/conda-forge/pytest-html
          pip:
            version: ==4.1.1
            homepage: https://pypi.org/project/pytest-html/
        url:
          docs: https://pytest-html.readthedocs.io/
          source: https://github.com/pytest-dev/pytest-html
      coverage:
        description: Code coverage measurement for Python.
        notes: |
          This is indirectly used by the `pytest-cov` plugin.
          However, we include it explicitly here to pin the version for reproducibility.
        install:
          conda:
            homepage: https://anaconda.org/conda-forge/coverage
          pip:
            version: ==7.6.12
            homepage: https://pypi.org/project/coverage/
        url:
          docs: https://coverage.readthedocs.io/
          source: https://github.com/nedbat/coveragepy
      pkgdata:
        description: |
          Handling package resources, such as accessing data files that are
          distributed with the package.
        install:
          conda:
            channel: repodynamics
            homepage: https://anaconda.org/repodynamics/pkgdata
          pip:
            homepage: https://pypi.org/project/pkgdata/
        url:
          docs: https://pkgdata.repodynamics.com/
          source: https://github.com/repodynamics/pkgdata
  entry:
    cli:
      main:
        name: ${{ pypkg_test.name }}$
        description: Main CLI entry of the test-suite.
        ref: ${{ pypkg_test.import_name }}$.__main__:main
  source_file:
    all:
      glob: '**/*.py'
      header_comments:
        content: |
          ${{ pypkg_test.name }}$ ${{ copyright }}$
          SPDX-License-Identifier: ${{ license.expression }}$
        max_line_length: ${{ devcontainer_main.environment.pre_commit.file.ruff_config.content.line-length }}$
    top_import:
      glob: __init__.py
      docstring:
        content: |-
          ${{ pypkg_test.name }}$: Test Suite for ${{ name }}$.
        max_line_length: ${{ devcontainer_main.environment.pre_commit.file.ruff_config.content.line-length }}$
        mode: prepend
  conda:
    recipe: ${{ __temp__.conda_recipe }}$
  pyproject: ${{ __temp__.pyproject }}$
  file:
    readme:
      name: Test Suite README
      summary: |
        Main README file for the test suite.
      path: ${{ pypkg_test.path.root }}$/${{ pypkg_test.pyproject.project.readme.file }}$
      content: ${{ file_readme.content }}$
      type: md
      file_setting:
        md:
          target: pypi
    setuptools_manifest:
      name: MANIFEST.in
      summary: |
        Manifest file for controlling files and directories in the source distribution.
      type: txt
      path: ${{ pypkg_test.path.root }}$/MANIFEST.in
      content:
        - graft ${{ pypkg_test.path.import_rel }}$/data
        - include ${{ pypkg_test.path.import_rel }}$/py.typed
        - global-exclude *.py[cod] __pycache__ *.so
    pytest_config:
      name: Pytest Configuration
      summary: >-
        Pytest [configuration file](https://docs.pytest.org/en/stable/reference/customize.html)
        in TOML format.
      description: |
        See [Pytest Configuration Options](https://docs.pytest.org/en/stable/reference/reference.html#ini-options-ref)
        for a full list of available settings.
      type: toml
      path: ${{ pypkg_test.path.import }}$/data/config/pytest.toml
      content:
        tool:
          pytest:
            ini_options:
              addopts: >-
                -r a
                --verbose
                --color=yes
                --full-trace
                --strict-config
                --junit-xml='$|| path_report ||/pytest/junit.xml'
                --import-mode=importlib
                --debug='$|| path_report ||/pytest/debug.log'
                --cov
                --cov-config='$|| path_config ||/coverage.toml'
                --cov-report=term-missing:skip-covered
                --cov-report=html
                --cov-report=xml
                --cov-report=json
                --html='$|| path_report ||/pytest/report.html'
                --self-contained-html
              cache_dir: $|| path_cache ||/pytest
              console_output_style: count
              junit_logging: all
              junit_suite_name: ${{ pypkg_test.import_name }}$
              log_auto_indent: true
              log_cli: true
              log_cli_date_format: '%Y-%m-%d %H:%M:%S'
              log_cli_format: '%(levelname)s %(message)s'
              log_cli_level: INFO
              log_date_format: '%Y-%m-%d %H:%M:%S'
              log_file: $|| path_report ||/pytest/log.txt
              log_file_date_format: '%Y-%m-%d %H:%M:%S'
              log_file_format: '%(asctime)s %(levelname)s %(message)s'
              log_file_level: DEBUG
              log_format: '%(asctime)s %(levelname)s %(message)s'
              log_level: DEBUG
              minversion: 8.3.3
              python_classes: [ Test*, '*Test' ]
              python_files: [ test_*.py, tests_*.py, '*_test.py', '*_tests.py' ]
              python_functions: [ 'test_*', 'tests_*', '*_test',  '*_tests' ]
              required_plugins:
                - pytest-cov ${{ pypkg_test.dependency.core.pytest-cov.install.pip.version }}$
                - pytest-html ${{ pypkg_test.dependency.core.pytest-html.install.pip.version }}$
    coverage_config:
      name: Coverage Configuration
      summary: >-
        Coverage [configuration file](https://coverage.readthedocs.io/en/latest/config.html),
        which is also used by the
        [`pytest-cov`](https://pytest-cov.readthedocs.io/en/latest/config.html) plugin.
      type: toml
      path: ${{ pypkg_test.path.import }}$/data/config/coverage.toml
      content:
        tool:
          coverage:
            run:
              branch: true
              data_file: $|| path_cache ||/coverage/coverage
              debug_file: $|| path_report ||/coverage/debug.log
              source_pkgs: [ "${{ pypkg_main.import_name }}$" ]
            report:
              # Regexes for lines to exclude from consideration
              exclude_also:
                # debug-only code:
                - "def __repr__"
                - "if self\\.debug"
                # defensive assertion code:
                - "raise AssertionError"
                - "raise NotImplementedError"
                # non-runnable code:
                - "if 0:"
                - "if __name__ == .__main__.:"
                # abstract methods:
                - "@(abc\\.)?abstractmethod"
                # type checking:
                - "if _?TYPE_CHECKING:"
              show_missing: true
            html:
              directory: $|| path_report ||/coverage/html
              title: "${{ pypkg_main.name }}$ Test Coverage"
            xml:
              output: $|| path_report ||/coverage/coverage.xml
            json:
              output: $|| path_report ||/coverage/coverage.json
              pretty_print: true
# Binder configuration files
file_binder_conda:
  name: Binder Conda Environment File
  summary: >-
    [`environment.yml`](https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment)
    file for the Binder configuration.
  type: txt
  path: ${{ workflow.binder.path.config }}$/environment.yml
  content: |
    #{{ return hook.binder_config_file("conda") }}#
file_binder_apt:
  name: Binder APT Environment File
  summary: >-
    [`apt.txt`](https://repo2docker.readthedocs.io/en/latest/config_files.html#apt-txt-install-packages-with-apt-get)
    file for the Binder configuration.
  type: txt
  path: ${{ workflow.binder.path.config }}$/apt.txt
  content: |
    #{{ return hook.binder_config_file("apt") }}#
file_binder_postbuild:
  name: Binder Post Build Environment File
  summary: >-
    [`postBuild`](https://repo2docker.readthedocs.io/en/latest/config_files.html#postbuild-run-code-after-installing-the-environment)
    file for the Binder configuration.
  type: txt
  path: ${{ workflow.binder.path.config }}$/postBuild
  content: |
    #{{ return hook.binder_config_file("bash") }}#
# License files
copy_app_license:
  sources: |
    #{{
      return [
        component["path"]["text_plain"]
        for component in get("license.component", {}).values()
      ]
    }}#
  destinations:
    - ${{ pypkg_main.path.root }}$/${{ __temp__.pkg_license_dir_name.licenses }}$
    - ${{ pypkg_test.path.root }}$/${{ __temp__.pkg_license_dir_name.licenses }}$
copy_app_copyright:
  sources: |
    #{{
      return [
        component["path"]["header_plain"]
        for component in get("license.component", {}).values()
        if component["path"].get("header_plain")
      ]
    }}#
  destinations:
    - ${{ pypkg_main.path.root }}$/${{ __temp__.pkg_license_dir_name.copyrights }}$
    - ${{ pypkg_test.path.root }}$/${{ __temp__.pkg_license_dir_name.copyrights }}$
# Templates
__temp__:
  conda_recipe:
    path:
      local: ${{ ..path.root }}$/conda-recipe/local
      global: ${{ ..path.root }}$/conda-recipe/global
    meta:
      values:
        build:
          values:
            script:
              - value: '{{ PYTHON }} -m pip install {{ pkg_dir }} --no-deps --no-build-isolation -vv'
        requirements:
          values:
            host:
              values:
                  - value: python ${{ pypkg_main.python.version.spec }}$
                  - value: pip
                  - '*{{ #{{ return hook.conda_req("host") }}# }}*'
            run:
              values:
                - value: python ${{ pypkg_main.python.version.spec }}$
                - '*{{ #{{ return hook.conda_req("run") }}# }}*'
            run_constrained:
              values:
                - '*{{ #{{ return hook.conda_req("run_constrained") }}# }}*'
        test:
          values:
            imports:
              values:
                - |
                  *{{
                    #{{
                      out = []
                      for entry in get("..entry.python", {}).values():
                        conda = entry["conda"]
                        if not conda:
                          continue
                        entry = {"value": entry["name"]}
                        if conda is not True:
                          entry["selector"] = conda
                        out.append(entry)
                      return out
                    }}#
                  }}*
            requires:
              values:
                - value: pip
            commands:
              values:
                - value: pip check
                - |
                  *{{
                    #{{
                      out = []
                      for key in ("cli", "gui"):
                        for entry in get(f"..entry.{key}", {}).values():
                          conda = entry["conda"]
                          if not conda:
                            continue
                          entry = {"value": f"{entry["name"]} --help"}
                          if conda is not True:
                            entry["selector"] = conda
                          out.append(entry)
                      return out
                    }}#
                  }}*
        about:
          home: ${{ web.url.home }}$
          license: ${{ license.expression }}$
          license_file:
            - '{{ pkg_dir }}${{ __temp__.pkg_license_dir_name.licenses }}$/'
            - |
              *{{
                #{{
                  if not any(
                    component["path"].get("header_plain")
                    for component in get("license.component", {}).values()
                  ):
                    return []
                  return [f'{{{{ pkg_dir }}}}{get("__temp__.pkg_license_dir_name.copyrights")}/']
                }}#
              }}*
          summary: ${{ title }}$
          dev_url: ${{ repo.url.home }}$
          doc_url: ${{ web.url.home }}$
          doc_source_url: ${{ file_readme.url }}$
        extra:
          recipe-maintainers: |
            #{{
                return [
                  member["github"]["id"] for member in hook.members_with_role_types(
                    "ProjectManager",
                    active_only=True,
                  )
                ]
            }}#
  pyproject:
    build-system:
      build-backend: setuptools.build_meta
      requires: >-
        #{{ return hook.pyproject_dependency("build") }}#
    project:
      name: ${{ .name }}$
      description: ${{ title }}$
      readme:
        file: README.md
        content-type: text/markdown
      requires-python: ${{ .python.version.spec }}$
      license:
        text: ${{ license.expression }}$
      # TODO: uncomment after setuptools adds support for PEP 639: https://github.com/pypa/setuptools/pull/4829
#      license: ${{ license.expression }}$
#      license-files: [ '${{ __temp__.pkg_license_dir_name.licenses }}$/*', '${{ __temp__.pkg_license_dir_name.copyrights }}$/*' ]
      authors: |
        #{{
          return [
            hook.entity_in_pyproject(author)
            for author in (
              hook.members_with_role_types("Author", active_only=True)
              + manager.changelog.current_public.contributors_with_role_types("Author", member=False)
            )
          ]
        }}#
      maintainers: |
        #{{
          return [
            hook.entity_in_pyproject(maintainer)
            for maintainer in hook.members_with_role_types(
              ["ContactPerson", "ProjectManager", "DataManager", "ProjectLeader", "Supervisor"],
              active_only=True,
            )
          ]
        }}#
      keywords: ${{ keywords }}$
      classifiers:
        - 'Natural Language :: ${{ language.name }}$'
        - '*{{ #{{ return hook.trove_classifiers() }}# }}*'
      urls:
        Homepage: ${{ web.url.home }}$
        Documentation: ${{ web.page.manual.url }}$
        Source: ${{ repo.url.home }}$
        Download: ${{ repo.url.releases.home }}$
        News: ${{ web.page.blog.url }}$
        Issue-Tracker: ${{ repo.url.issues.home }}$
      scripts: >-
        #{{ return hook.pyproject_scripts("cli") }}#
      gui-scripts: >-
        #{{ return hook.pyproject_scripts("gui") }}#
      entry-points: >-
        #{{ return hook.pyproject_entry_points() }}#
      dependencies: >-
        #{{ return hook.pyproject_dependency("core") }}#
      optional-dependencies: >-
        #{{ return hook.pyproject_dependency("optional") }}#
      dynamic: [ version ]
    tool:
      setuptools:
        packages:
          find:
            where: [ '${{ .path.source_rel }}$' ]
            namespaces: true
        include-package-data: true
        license-files: [ '${{ __temp__.pkg_license_dir_name.licenses }}$/*', '${{ __temp__.pkg_license_dir_name.copyrights }}$/*' ]
        cmdclass:
          build_py: versioningit.cmdclass.build_py
          sdist: versioningit.cmdclass.sdist
      versioningit:
        vcs:
          method: git
          match: [ '${{ tag.version.prefix }}$[0-9]*.[0-9]*.[0-9]*' ]
          default-tag: ${{ tag.version.prefix }}$0.0.0
        tag2version:
          rmprefix: ${{ tag.version.prefix }}$
        format:
          distance: '{base_version}+{distance}.{committer_date:%Y.%m.%d}.{rev}'
          dirty: '{base_version}+0.{committer_date:%Y.%m.%d}.{rev}.dirty'
          distance-dirty: '{base_version}+{distance}.{committer_date:%Y.%m.%d}.{rev}.dirty'
        onbuild:
          method: replace-version
          regex: '^__version_details__: dict\[str, str\] = (?P<version>.*)'
          require-match: true
          source-file: '${{ .path.source_rel }}$/${{ .import_name }}$/__init__.py'
          build-file: '${{ .import_name }}$/__init__.py'
          replacement: >-
            {{
            "version": "{version}",
            "build_date": "{build_date:%Y.%m.%d}",
            "committer_date": "{committer_date:%Y.%m.%d}",
            "author_date": "{author_date:%Y.%m.%d}",
            "branch": "{branch}",
            "distance": "{distance}",
            "commit_hash": "{revision}"
            }}
  pkg_license_dir_name:
    licenses: LICENSES
    copyrights: COPYRIGHTS
