file_readme:
  name: Repository README
  summary: >-
    GitHub repository [`README`](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes)
    file.
  path_schema:
    description: |
      The file must be named `README` (case-sensitive) and placed either in the
      `.github` directory, the `docs` directory, or the root of the repository,
      and can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
      If more than one of such files are present, the order of precedence is
      `.github`, then root, and finally the `docs` directory.
    pattern: ^(?:|.github/|docs/)README(?i:.(txt|md|rst))?$
    examples:
      - README
      - README.md
      - .github/README.txt
      - docs/README.rst
  output:
    repo:
      path: README.md
    pkg:
      path: ${{ pkg.path.root }}$/${{ pkg.readme.file }}$
      target: pypi
  content:
    body:
      - class: block_image
        src: ${{ web.file.logo_full_light.url }}$
        src_dark: ${{ web.file.logo_full_dark.url }}$
        title: Welcome to ${{ name }}$! Click to visit our website and learn more.
        alt: '${{ name }}$: ${{ title }}$'
        align: center
        width: 100%
        link: ${{ web.url.home }}$
      - class: menu
        items:
          - text: Intro
            link: ${{ web.page.intro.url }}$
            title: Introduction and Background
          - text: Manual
            link: ${{ web.page.manual.url }}$
            title: User Manual
          - text: News
            link: ${{ web.page.blog.url }}$
            title: Latest News and Releases
          - text: Contribute
            link: ${{ web.page.contribute.url }}$
            title: How to Contribute
          - text: About
            link: ${{ web.page.about.url }}$
            title: About the Project
          - text: Help
            link: ${{ web.page.help.url }}$
            title: Get Help and Support
        line_top_width: 100%
        line_bottom_width: 100%
        style: for-the-badge
        color: ${{ color.primary.light }}$
        color_dark: ${{ color.primary.dark }}$
        height: 33px
        attrs_container:
          align: center
      - - class: badge
          service: static
          label: Keywords
          args:
            message: ${{ keywords[0] }}$
          style: ${{ __data__.badge.style }}$
          height: ${{ __data__.badge.height }}$
          color: ${{ __data__.badge.color.blue }}$
          label_color: ${{ __data__.badge.color.grey }}$
        - '&nbsp;'
        - class: buttons
          items: ${{ keywords[1:] }}$
          style: ${{ __data__.badge.style }}$
          height: ${{ __data__.badge.height }}$
          color: ${{ __data__.badge.color.blue }}$
      - class: paragraph
        content: ${{ abstract }}$
        attrs:
          align: justify
      - class: badges
        service: static
        style: ${{ __data__.badge.style }}$
        height: ${{ __data__.badge.height }}$
        color: ${{ __data__.badge.color.blue }}$
        label_color: ${{ __data__.badge.color.grey }}$
        separator: ${{ __data__.badge.separator }}$
        items:
          - |
            *{{
              #{{
                out = []
                doi = get("var.zenodo.concept.doi")
                if doi:
                  zenodo = {
                    "label": "DOI",
                    "args": {"message": doi},
                    "logo": "zenodo",
                    "logo_type": "name",
                    "color": "#1682D4",
                    "link": f"https://doi.org/{doi}"
                  }
                  out.append(zenodo)
                if get("pkg.pypi.publishable") and get("workflow.publish.pypi"):
                  pypi = {
                    "label": "pip install ",
                    "args": {"message": get("pkg.name").lower()},
                    "logo": f"{get("web.path.source")}/_media/logo_ext/pypi.png",
                    "logo_type": "file",
                    "logo_media_type": "png",
                    "color": "#3775A9",
                    "link": get("pkg.pypi.url.home"),
                  }
                  out.append(pypi)
                publish_conda = get("workflow.publish.conda-forge") or get("workflow.publish.anaconda")
                if publish_conda:
                  conda = {
                    "label": "conda install",
                    "args": {"message": f"{get("pkg.name").lower()} -c {publish_conda["index"]["channel"].lower()}"},
                    "logo": "anaconda",
                    "logo_type": "name",
                    "logo_color": "#44A833",
                    "color": "#44A833",
                    "link": get("pkg.conda.url.home"),
                  }
                  out.append(conda)
                publish_docker = get("workflow.binder")
                if publish_docker:
                  index = publish_docker["index"]
                  docker = {
                      "label": "docker pull",
                      "args": {"message": f"{index["registry"]}/{index["namespace"]}/{index["name"]}:latest".lower()},
                      "logo": "docker",
                      "logo_type": "name",
                      "color": "#2496ED",
                      "logo_color": "#2496ED",
                      "link": index["url"]["home"],
                    }
                  out.append(docker)
                if get("workflow.publish.github"):
                  github = {
                    "label": "GitHub",
                    "args": {"message": get("repo.name")},
                    "logo": "github",
                    "logo_type": "name",
                    "color": "#181717",
                    "link": get("repo.url.releases.home"),
                  }
                  out.append(github)
                return out
              }}#
            }}*
          - service: binder
            endpoint: github
            label: Binder
            args:
              message: try online
              user: ${{ repo.owner }}$
              repo: ${{ repo.name }}$
              ref: ${{ repo.default_branch }}$
            color: "#579ACA"
            label_color: ${{ __data__.badge.color.grey }}$
    sections:
      - heading: Highlights
        body:
          - class: highlights
            items: ${{ highlights }}$
            button:
              style: for-the-badge
              color: [ '${{ color.primary.light }}$', '${{ color.secondary.light }}$' ]
              color_dark: [ '${{ color.primary.dark }}$', '${{ color.secondary.dark }}$' ]
              height: 30px
              align: left
            attrs_p:
              align: justify
      - heading: >-
          #{{
            if changelog.current_public.get("phase") == "dev":
              return "Upcoming Release"
            return "Latest Release"
          }}#
        body: ${{ __data__.changelog.body }}$
        sections: ${{ __data__.changelog.sections }}$
      - heading: Statistics
        body:
          - class: table
            rows:
              - - <b>Project</b>
                - - class: badges
                    style: ${{ __data__.badge.style }}$
                    height: ${{ __data__.badge.height }}$
                    color: ${{ __data__.badge.color.blue }}$
                    separator: ${{ __data__.badge.separator }}$
                    service: github
                    args:
                      user: ${{ repo.owner }}$
                      repo: ${{ repo.name }}$
                    items:
                      - endpoint: created_at
                        label: üóì‚ÄÇCreation Date
                      - endpoint: contributors
                        label: üßë‚ÄçüíªÔ∏è‚ÄÇContributors
                      - endpoint: language_count
                        label: üî†‚ÄÇProgramming Languages
                      - endpoint: top_language
                        logo: ${{ web.path.source }}$/_media/logo_ext/python.svg
                        logo_type: file
                        logo_media_type: svg+xml
                      - endpoint: repo_size
                        label: üöö‚ÄÇRepo Size
                      - endpoint: code_size
                        label: üöõ‚ÄÇCode Size
              - - <b>Health</b>
                - - class: badges
                    service: github
                    style: ${{ __data__.badge.style }}$
                    height: ${{ __data__.badge.height }}$
                    separator: ${{ __data__.badge.separator }}$
                    args:
                      user: ${{ repo.owner }}$
                      repo: ${{ repo.name }}$
                    items:
                      - service: codecov
                        endpoint: coverage
                        args:
                          vcs_name: github
                      - service: librariesio
                        endpoint: source_rank
                        args:
                          platform: pypi
                          package: ${{ pkg.name }}$
                      - service: librariesio
                        endpoint: dependency_status
                        args:
                          platform: pypi
                          package: ${{ pkg.name }}$
                        label: Package Dependencies
                      - service: librariesio
                        endpoint: dependency_status_github
                        args:
                          platform: github
                          package: ""
                        label: Repository Dependencies
                      - service: website
                        args:
                          url: ${{ web.url.home }}$
                          up_message: online
                          up_color: '#00802b'
                          down_message: offline
                          down_color: '#AF1F10'
                        label: Website
              - - <b>Standards</b>
                - - class: badges
                    service: static
                    style: ${{ __data__.badge.style }}$
                    height: ${{ __data__.badge.height }}$
                    separator: ${{ __data__.badge.separator }}$
                    items:
                      - label: Testing
                        args:
                          message: Pytest
                        color: "#0A9EDC"
                        logo: pytest
                        logo_color: "#0A9EDC"
                        logo_type: name
                        link: https://github.com/pytest-dev/pytest/
                      - label: Type Checking
                        args:
                          message: mypy
                        color: "#2A6DB2"
                        logo: ${{ web.path.source }}$/_media/logo_ext/mypy.svg
                        logo_type: file
                        logo_media_type: svg+xml
                        link: https://github.com/python/mypy
                      - label: Lint
                        args:
                          message: Ruff
                        color: "#D7FF64"
                        logo: ruff
                        logo_type: name
                        logo_color: "#D7FF64"
                        link: https://github.com/astral-sh/ruff
                      - label: Security
                        args:
                          message: CodeQL
                        color: "#181717"
                        logo: github
                        logo_type: name
                        link: https://codeql.github.com/
                      - label: Code Style
                        args:
                          message: Black
                        color: "#000"
                        logo: ${{ web.path.source }}$/_media/logo_ext/black.png
                        logo_type: file
                        logo_media_type: png
                        link: https://github.com/psf/black
              - - <b>Downloads</b>
                - - - |
                      *{{
                        #{{
                          if not get("pkg.pypi.publishable"):
                            return []
                          badges = {
                            "class": "badges",
                            "style": get("__data__.badge.style"),
                            "height": get("__data__.badge.height"),
                            "color": get("__data__.badge.color.blue"),
                            "separator": 1,
                            "service": "pypi",
                            "endpoint": "downloads",
                            "args": {"package": get("pkg.name")},
                            "logo": "",
                            "label": "",
                            "items": [
                              {
                                "service": "pepy",
                                "endpoint": "total_downloads",
                                "label": "PyPI",
                                "logo": f"{get("web.path.source")}/_media/logo_ext/pypi.png",
                                "logo_type": "file",
                                "logo_media_type": "png",
                              },
                            ] + [{"args": {"period": period}} for period in ("m", "w", "d")]
                          }
                          return [badges, "&nbsp;" * get("__data__.badge.separator")]
                        }}#
                      }}*
                    - |
                      *{{
                        #{{
                          conda = get("workflow.publish.conda-forge") or get("workflow.publish.anaconda")
                          if not conda:
                            return []
                          badge = {
                            "class": "badge",
                            "style": get("__data__.badge.style"),
                            "height": get("__data__.badge.height"),
                            "color": get("__data__.badge.color.blue"),
                            "service": "conda",
                            "endpoint": "downloads",
                            "args": {"channel": conda.get("index", {}).get("channel", "conda-forge").lower(), "package": get("pkg.name").lower()},
                            "label": "Conda",
                            "logo": "anaconda",
                            "logo_color": "#44A833",
                          }
                          return [badge, "&nbsp;" * get("__data__.badge.separator")]
                        }}#
                      }}*
                    - class: badge
                      style: ${{ __data__.badge.style }}$
                      height: ${{ __data__.badge.height }}$
                      color: ${{ __data__.badge.color.blue }}$
                      service: github
                      endpoint: downloads_all_releases
                      label: GitHub
                      args:
                        user: ${{ repo.owner }}$
                        repo: ${{ repo.name }}$
              - - <b>Users</b>
                - - class: badges
                    style: ${{ __data__.badge.style }}$
                    height: ${{ __data__.badge.height }}$
                    color: ${{ __data__.badge.color.blue }}$
                    separator: ${{ __data__.badge.separator }}$
                    service: librariesio
                    args:
                      platform: pypi
                      package: ${{ pkg.name }}$
                    items:
                      - endpoint: dependents
                        label: Dependent Packages
                      - endpoint: dependents
                        args:
                          repo: true
                        label: Dependent Repositories
              - |
                *{{
                  #{{
                    out = []
                    label_data = [("Total", None)] + [
                      (badge_label, get(f"label.type.label.{label_type}.name"))
                      for badge_label, label_type in (
                        (f"{get(f"__data__.icon.fix")}‚ÄÇBug Fixes", "fix"),
                        (f"{get(f"__data__.icon.feat")}‚ÄÇNew Features", "feat"),
                        (f"{get(f"__data__.icon.change")}‚ÄÇBreaking Changes", "change"),
                      )
                    ]
                    repo_owner = get("repo.owner")
                    repo_name = get("repo.name")
                    color_open = get("__data__.badge.color.red")
                    color_closed = get("__data__.badge.color.green")
                    style = get("__data__.badge.style")
                    height = get("__data__.badge.height")
                    separator = get("__data__.badge.separator")
                    for title, issue_kind in (
                      ("Issues", "issues"),
                      ("PRs", "pulls"),
                    ):
                      badges = []
                      for badge_label, issue_label in label_data:
                        badges_config = {
                          "class": "badges",
                          "service": "github",
                          "endpoint": "issue_count",
                          "args": {"user": repo_owner, "repo": repo_name, "kind": issue_kind, "label": issue_label},
                          "style": style,
                          "height": height,
                          "separator": 0,
                          "items": [
                            {"args": {"state": "open"}, "label": badge_label, "color": color_open},
                            {"args": {"state": "closed"}, "label": "", "color": color_closed},
                          ],
                        }
                        badges.extend([badges_config, "&nbsp;" * separator])
                      out.append([f"<b>{title}</b>", [badges]])
                    return out
                  }}#
                }}*
              - - <b>Commits</b>
                - - class: badges
                    style: ${{ __data__.badge.style }}$
                    height: ${{ __data__.badge.height }}$
                    color: ${{ __data__.badge.color.blue }}$
                    separator: ${{ __data__.badge.separator }}$
                    service: github
                    endpoint: commit_activity
                    args:
                      user: ${{ repo.owner }}$
                      repo: ${{ repo.name }}$
                    items:
                      - args:
                          interval: t
                        label: Total
                        logo: git
                        logo_type: name
                        logo_color: "#F05032"
                      - args:
                          interval: y
                        label: ""
                      - args:
                          interval: m
                        label: ""
                      - args:
                          interval: w
                        label: ""
                      - endpoint: commits_since_latest_release
                        label: Since Latest Release
                      - endpoint: last_commit
                        label: Last
              - - <b>Discussions</b>
                - - class: badges
                    style: ${{ __data__.badge.style }}$
                    height: ${{ __data__.badge.height }}$
                    color: ${{ __data__.badge.color.blue }}$
                    separator: ${{ __data__.badge.separator }}$
                    service: github
                    endpoint: discussion_search_hits
                    args:
                      user: ${{ repo.owner }}$
                      repo: ${{ repo.name }}$
                    items:
                      - |
                        *{{
                          #{{
                            return [
                              {
                                "args": {"query": f'category:"{category["name"]}"'},
                                "label": f"{category["emoji"]}‚ÄÇ{category["name"]}",
                                "title": category["description"],
                              } for category in get("discussion.category", {}).values()
                            ]
                          }}#
                        }}*
              - - <b>Community</b>
                - - class: badges
                    style: ${{ __data__.badge.style }}$
                    height: ${{ __data__.badge.height }}$
                    color: ${{ __data__.badge.color.blue }}$
                    separator: ${{ __data__.badge.separator }}$
                    service: github
                    args:
                      user: ${{ repo.owner }}$
                      repo: ${{ repo.name }}$
                    logo: github
                    items:
                      - endpoint: forks
                      - endpoint: stars
                      - endpoint: watchers
              - - <b>DevOps</b>
                - - class: badges
                    style: ${{ __data__.badge.style }}$
                    height: ${{ __data__.badge.height }}$
                    separator: ${{ __data__.badge.separator }}$
                    service: github
                    args:
                      user: ${{ repo.owner }}$
                      repo: ${{ repo.name }}$
                    items:
                      - endpoint: workflow_status
                        logo: github
                        logo_type: name
                        args:
                          workflow: main.yaml
                        label: CI
                      - |
                        *{{
                          #{{
                            import jinja2

                            out = []
                            for platform in ("pypi", "testpypi"):
                              env = get(f"workflow.publish.{platform}.env")
                              if env:
                                for pkg_key in ("pkg", "test"):
                                  pkg_name = get(f"{pkg_key}.name")
                                  if pkg_name:
                                    env_name = jinja2.Template(env["name"]).render(
                                      pkg={"name": pkg_name}
                                    )
                                    badge = {
                                      "endpoint": "deployment_status",
                                      "args": {"environment": env_name},
                                      "logo": f"{get("web.path.source")}/_media/logo_ext/pypi.png",
                                      "logo_type": "file",
                                      "logo_media_type": "png",
                                    }
                                    out.append(badge)
                            for platform in ("zenodo", "zenodo_sandbox"):
                              env = get(f"workflow.publish.{platform}.env")
                              if env:
                                badge = {
                                  "endpoint": "deployment_status",
                                  "args": {"environment": env["name"]},
                                  "logo": "zenodo",
                                  "logo_type": "name",
                                }
                                out.append(badge)
                            github_env = get("workflow.publish.github.env")
                            if github_env:
                              badge = {
                                "endpoint": "deployment_status",
                                "args": {"environment": github_env["name"]},
                                "logo": "github",
                                "logo_type": "name",
                              }
                              out.append(badge)
                            web_env = get("workflow.web.env")
                            if web_env:
                              badge = {
                                "endpoint": "deployment_status",
                                "args": {"environment": web_env["name"]},
                                "logo": "github",
                                "logo_type": "name",
                              }
                              out.append(badge)
                            rtd_name = get("tool.readthedocs.config.workflow.name")
                            if rtd_name:
                              badge = {
                                "service": "readthedocs",
                                "endpoint": "build_status",
                                "args": {"name": rtd_name},
                                "label": "CD ReadTheDocs",
                              }
                              out.append(badge)
                            return out
                          }}#
                        }}*
      - heading: Acknowledgements
        body:
          - ${{ name }}$ was developed in [Volkamer Lab](https://volkamerlab.org/).
    footer:
      - class: thematic_break
      - class: badges
        style: for-the-badge
        items:
          - service: dynamic
            args:
              url: ${{ control.url.metadata }}$
              query: '$.copyright'
            label: ${{ name }}$
            color: ${{ color.primary.light }}$
            logo: ${{ web.file.icon.path }}$
            logo_type: file
            color_dark: ${{ color.primary.dark }}$
            logo_dark: ${{ web.file.icon.path }}$
            logo_type_dark: file
            link: ${{ team.owner.github.url }}$
            title: '${{ name }}$: Copyright ${{ copyright }}$'
            alt: ${{ .title }}$
            align: left
          - service: static
            args:
              message: ${{ license.expression }}$
            label: SPDX License Identifier
            color: "#4398CC"
            logo: spdx
            logo_color: "#4398CC"
            link: ${{ web.page.license.url }}$
            title: 'SPDX-License-Identifier: ${{ license.expression }}$'
            alt: 'SPDX-License-Identifier: ${{ license.expression }}$'
            align: right