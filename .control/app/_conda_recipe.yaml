__temp__:
  conda_recipe:
    path:
      local: ${{ ..path.root }}$/conda-recipe/local
      global: ${{ ..path.root }}$/conda-recipe/global
    meta:
      values:
        build:
          values:
            script:
              - value: '{{ PYTHON }} -m pip install {{ pkg_dir }} --no-deps --no-build-isolation -vv'
        requirements:
          values:
            host:
              values:
                  - value: python ${{ pkg.python.version.spec }}$
                  - value: pip
                  - '*{{ #{{ return hook.conda_req("host") }}# }}*'
            run:
              values:
                - value: python ${{ pkg.python.version.spec }}$
                - '*{{ #{{ return hook.conda_req("run") }}# }}*'
            run_constrained:
              values:
                - '*{{ #{{ return hook.conda_req("run_constrained") }}# }}*'
        test:
          values:
            imports:
              values:
                - |
                  *{{
                    #{{
                      out = []
                      for entry in get("..entry.python", {}).values():
                        conda = entry["conda"]
                        if not conda:
                          continue
                        entry = {"value": entry["name"]}
                        if conda is not True:
                          entry["selector"] = conda
                        out.append(entry)
                      return out
                    }}#
                  }}*
            requires:
              values:
                - value: pip
            commands:
              values:
                - value: pip check
                - |
                  *{{
                    #{{
                      out = []
                      for key in ("cli", "gui"):
                        for entry in get(f"..entry.{key}", {}).values():
                          conda = entry["conda"]
                          if not conda:
                            continue
                          entry = {"value": f"{entry["name"]} --help"}
                          if conda is not True:
                            entry["selector"] = conda
                          out.append(entry)
                      return out
                    }}#
                  }}*
        about:
          home: ${{ web.url.home }}$
          license: ${{ license.expression }}$
          license_file:
            - '{{ pkg_dir }}${{ __data__.dir_name.licenses }}$/'
            - |
              *{{
                #{{
                  if not any(
                    component["path"].get("header_plain")
                    for component in get("license.component", {}).values()
                  ):
                    return []
                  return [f'{{{{ pkg_dir }}}}{get("__data__.dir_name.copyrights")}/']
                }}#
              }}*
          summary: ${{ title }}$
          dev_url: ${{ repo.url.home }}$
          doc_url: ${{ web.url.home }}$
          doc_source_url: ${{ document.readme.output.pkg.url }}$
        extra:
          recipe-maintainers: |
            #{{
                return [
                  member["github"]["id"] for member in team_members_with_role_types(
                    "ProjectManager",
                    active_only=True,
                  )
                ]
            }}#
