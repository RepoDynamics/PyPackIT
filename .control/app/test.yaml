pypkg_test:
  path:
    root: test
  name: ${{ pypkg_main.name }}$-TestSuite
  os:
    linux:
      name: Linux
      runner: ubuntu-latest
    macos:
      name: MacOS
      runner: macos-latest
    windows:
      name: Windows
      runner: windows-latest
  readme:
    text: |
      # ${{ test.name }}$
      This is the test-suite for ${{ pkg.name }}$.
    content-type: text/markdown
  dependency:
    # For other PyTest plugins, see:
    # - https://github.com/augustogoulart/awesome-pytest
    # - https://pytest-with-eric.com/pytest-best-practices/pytest-plugins/
    build: ${{ pkg.dependency.build }}$
    core:
      testing:
        name: Pytest
        import_name: pytest
        description: Testing framework for Python.
        install:
          conda:
            version: ==8.3.3
            homepage: https://anaconda.org/conda-forge/pytest
          pip:
            homepage: https://pypi.org/project/pytest/
        url:
          docs: https://docs.pytest.org/en/stable/
          source: https://github.com/pytest-dev/pytest
        file:
          config:
            name: Pytest Configuration
            description: |
              Pytest [configuration file](https://docs.pytest.org/en/stable/reference/customize.html)
              in TOML format. 
              See [Pytest Configuration Options](https://docs.pytest.org/en/stable/reference/reference.html#ini-options-ref)
              for a full list of available settings.
            type: toml
            path: ${{ test.path.import }}$/data/config/pytest.toml
            content:
              tool:
                pytest:
                  ini_options:
                    addopts: >-
                      -r a
                      --verbose
                      --color=yes
                      --full-trace
                      --strict-config
                      --junit-xml='$|| path_report ||/pytest/junit.xml'
                      --import-mode=importlib
                      --debug='$|| path_report ||/pytest/debug.log'
                      --cov
                      --cov-config='$|| path_config ||/coverage.toml'
                      --cov-report=term-missing:skip-covered
                      --cov-report=html
                      --cov-report=xml
                      --cov-report=json
                      --html='$|| path_report ||/pytest/report.html'
                      --self-contained-html
                    cache_dir: $|| path_cache ||/pytest
                    console_output_style: count
                    junit_logging: all
                    junit_suite_name: ${{ test.import_name }}$
                    log_auto_indent: true
                    log_cli: true
                    log_cli_date_format: '%Y-%m-%d %H:%M:%S'
                    log_cli_format: '%(levelname)s %(message)s'
                    log_cli_level: INFO
                    log_date_format: '%Y-%m-%d %H:%M:%S'
                    log_file: $|| path_report ||/pytest/log.txt
                    log_file_date_format: '%Y-%m-%d %H:%M:%S'
                    log_file_format: '%(asctime)s %(levelname)s %(message)s'
                    log_file_level: DEBUG
                    log_format: '%(asctime)s %(levelname)s %(message)s'
                    log_level: DEBUG
                    minversion: 8.3.3
                    python_classes: [ Test*, '*Test' ]
                    python_files: [ test_*.py, tests_*.py, '*_test.py', '*_tests.py' ]
                    python_functions: [ 'test_*', 'tests_*', '*_test',  '*_tests' ]
                    required_plugins:
                      - pytest-cov == 5.0.0
                      - pytest-html == 4.1.1
      plugin_cov:
        name: Pytest-Cov
        import_name: pytest_cov
        description: Pytest plugin for measuring test coverage.
        notes: |
          This plugin uses the [coverage.py](https://github.com/nedbat/coveragepy) package
          to measure code coverage.
        install:
          conda:
            version: ==5.0.0
            homepage: https://anaconda.org/conda-forge/pytest-cov
          pip:
            homepage: https://pypi.org/project/pytest-cov/
        url:
          docs: https://pytest-cov.readthedocs.io/
          source: https://github.com/pytest-dev/pytest-cov
      plugin_html:
        name: Pytest-HTML
        import_name: pytest_html
        description: Pytest plugin for generating HTML reports.
        install:
          conda:
            version: ==4.1.1
            homepage: https://anaconda.org/conda-forge/pytest-html
          pip:
            homepage: https://pypi.org/project/pytest-html/
        url:
          docs: https://pytest-html.readthedocs.io/
          source: https://github.com/pytest-dev/pytest-html
      coverage:
        name: Coverage
        import_name: coverage
        description: Code coverage measurement for Python.
        notes: |
          This is indirectly used by the `pytest-cov` plugin.
          However, we include it explicitly here to pin the version for reproducibility.
        install:
          conda:
            version: ==7.6.1
            homepage: https://anaconda.org/conda-forge/coverage
          pip:
            homepage: https://pypi.org/project/coverage/
        url:
          docs: https://coverage.readthedocs.io/
          source: https://github.com/nedbat/coveragepy
        file:
          name: Coverage Configuration
          description: |
            Coverage [configuration file](https://coverage.readthedocs.io/en/latest/config.html),
            which is also used by the 
            [`pytest-cov`](https://pytest-cov.readthedocs.io/en/latest/config.html) plugin.
          type: toml
          path: ${{ test.path.import }}$/data/config/coverage.toml
          content:
            tool:
              coverage:
                run:
                  branch: true
                  data_file: $|| path_cache ||/coverage/coverage
                  debug_file: $|| path_report ||/coverage/debug.log
                  source_pkgs: [ "${{ pkg.import_name }}$" ]
                report:
                  # Regexes for lines to exclude from consideration
                  exclude_also:
                    # debug-only code:
                    - "def __repr__"
                    - "if self\\.debug"
                    # defensive assertion code:
                    - "raise AssertionError"
                    - "raise NotImplementedError"
                    # non-runnable code:
                    - "if 0:"
                    - "if __name__ == .__main__.:"
                    # abstract methods:
                    - "@(abc\\.)?abstractmethod"
                    # type checking:
                    - "if _?TYPE_CHECKING:"
                  show_missing: true
                html:
                  directory: $|| path_report ||/coverage/html
                  title: "${{ pkg.name }}$ Test Coverage"
                xml:
                  output: $|| path_report ||/coverage/coverage.xml
                json:
                  output: $|| path_report ||/coverage/coverage.json
                  pretty_print: true
      pkg_resources:
        name: PkgData
        import_name: pkgdata
        description: |
          Handling package resources, such as accessing data files that are
          distributed with the package.
        install:
          conda:
            channel: repodynamics
            homepage: https://anaconda.org/repodynamics/pkgdata
          pip:
            homepage: https://pypi.org/project/pkgdata/
        url:
          docs: https://pkgdata.repodynamics.com/
          source: https://github.com/repodynamics/pkgdata
  entry:
    cli:
      main:
        name: ${{ test.name }}$
        description: Main CLI entry of the test-suite.
        ref: ${{ test.import_name }}$.__main__:main
  source_file:
    all:
      glob: '**/*.py'
      header_comments:
        content: |
          ${{ test.name }}$ ${{ copyright }}$
          SPDX-License-Identifier: ${{ license.expression }}$
        max_line_length: ${{ tool.ruff.config.file.content.line-length }}$
    top_import:
      glob: __init__.py
      docstring:
        content: |-
          ${{ test.name }}$: Test Suite for ${{ name }}$.
        max_line_length: ${{ tool.ruff.config.file.content.line-length }}$
        mode: prepend
  manifest:
    - graft ${{ test.path.source_rel }}$/${{ test.import_name }}$/data
    - include ${{ test.path.source_rel }}$/${{ test.import_name }}$/py.typed
    - global-exclude *.py[cod] __pycache__ *.so
  conda:
    recipe: ${{ __temp__.conda-recipe }}$
  pyproject: ${{ temp_pyproject }}$