commit:
  __data__:
    h1_pkg:
      title: Package
      description: Changes in the ${{ pypkg_main.name }}$ Python package.
    h1_test:
      title: Test Suite
      description: Changes in the ${{ pypkg_test.name }}$ Python package, i.e., ${{ pypkg_main.name }}$'s test-suite.
    h1_docs:
      title: Documentation
      description: Changes in the project documentation materials and website.
    h1_ci:
      title: CI
      description: Changes in the Continuous Integration pipelines of the project.
    h1_cd:
      title: CD
      description: Changes in the Continuous Deployment pipelines of the project.
    h1_config:
      title: Configuration
      description: Changes in the project configurations and metadata.
    h1_maintain:
      title: Maintenance
      description: General maintenance and housekeeping activities.
    h2_api:
      title: API
      description: Changes in the application programming interface (API) of the package.
    h2_cli:
      title: CLI
      description: Changes in the command-line interface (CLI) of the package.
    h2_gui:
      title: GUI
      description: Changes in the graphical user interface (GUI) of the package.
    h2_build:
      title: Setup
      description: Changes in the build and installation processes.
    h2_code:
      title: Code
      description: Changes in code that do not affect public interfaces.
    h2_content:
      title: Content
      description: Changes in documentation content.
    h2_design:
      title: Web Design
      description: Changes in documentation and website design.
    h2_feat:
      title: Web Features
      description: Changes in website features.
    h2_ci_main:
      title: Main
      description: Changes in the main pipeline.
    h2_ci_build:
      title: Build
      description: Changes in the build pipelines.
    h2_ci_lint:
      title: Lint
      description: Changes in the Continuous Refactoring pipelines.
    h2_ci_test:
      title: Test
      description: Changes in the Continuous Testing pipelines.
    h2_cd_pkg:
      title: Package
      description: Changes in the package deployment pipelines.
    h2_cd_docs:
      title: Documentation
      description: Changes in the website deployment pipelines.
    h2_proj:
      title: Project
      description: Related to the entire project.
    h2_pkg:
      title: Package
      description: Related to the ${{ pypkg_main.name }}$ Python package.
    h2_test:
      title: Test Suite
      description: Related to the ${{ pypkg_test.name }}$ Python package, i.e., ${{ pypkg_main.name }}$'s test-suite.
    h2_docs:
      title: Documentation
      description: Related to the project documentation materials and website.
    h2_its:
      title: Issue Tracking
      description: Related to the project's issue tracking system.
    h2_vcs:
      title: Version Control
      description: Related to the project's version control system.
    h2_ci:
      title: CI/CD
      description: Related to the project's Continuous Integration and Deployment pipelines.
    h3_remove:
      title: ⛔ Removed Features
      description: |
        Features that have been removed.
        These are backward-incompatible (breaking) changes.
    h3_change:
      title: 🚫 Changed Features
      description: |
        Features that have been changed in some way, such as in behavior or input/outputs.
        These are backward-incompatible (breaking) changes.
    h3_deprecate:
      title: ⚠️ Deprecated Features
      description: |
        Features that have been marked for removal in the future.
        These are backward-compatible changes.
    h3_feat:
      title: 🌱 New Features
      description: |
        Newly-added backward-compatible features.
    h3_enhance:
      title: ✨ Enhanced Features
      description: |
        Features that have been improved in a backward-compatible way.
    h3_secure:
      title: 🛡️ Security Fixes
      description: |
        Fixes for security vulnerabilities.
        These are backward-compatible changes.
    h3_fix:
      title: 🐞 Bug Fixes
      description: |
        Backward-compatible bug fixes.
    h3_perf:
      title: 🚀 Performance Improvements
      description: |
        Backward-compatible performance improvements.
    h3_refactor:
      title: 🧹 Refactoring
      description: |
        Changes in code structure and organization.
        These are backward-compatible changes that only concern contributors.
    h3_style:
      title: 🎨 Style Changes
      description: |
        Changes in code style and formatting without affecting the meaning.
        These are backward-compatible changes that only concern contributors.
  release:
    pkg_api_fix:
      type: fix
      scope: pkg-api
      action: patch
      type_description: >-
        Fix bugs in ${{ pypkg_main.name }}$'s API.
    pkg_cli_fix:
      type: fix
      scope: pkg-cli
      action: patch
      type_description: >-
        Fix bugs in ${{ pypkg_main.name }}$'s CLI.
    pkg_gui_fix:
      type: fix
      scope: pkg-gui
      action: patch
      type_description: >-
        Fix bugs in ${{ pypkg_main.name }}$'s GUI.
    pkg_build_fix:
      type: fix
      scope: pkg-build
      action: patch
      type_description: >-
        Fix bugs in ${{ pypkg_main.name }}$'s build system.
    pkg_api_feat:
      type: feat
      scope: pkg-api
      action: minor
      type_description: >-
        Add backward-compatible features to ${{ pypkg_main.name }}$'s API.
    pkg_cli_feat:
      type: feat
      scope: pkg-cli
      action: minor
      type_description: >-
        Add backward-compatible features to ${{ pypkg_main.name }}$'s CLI.
    pkg_gui_feat:
      type: feat
      scope: pkg-gui
      action: minor
      type_description: >-
        Add backward-compatible features to ${{ pypkg_main.name }}$'s GUI.
    pkg_build_feat:
      type: feat
      scope: pkg-build
      action: minor
      type_description: >-
        Add backward-compatible features to ${{ pypkg_main.name }}$'s build system.
    pkg_api_change:
      type: change
      scope: pkg-api
      action: major
      type_description: >-
        Introduce backward-incompatible changes in ${{ pypkg_main.name }}$'s API.
    pkg_cli_change:
      type: change
      scope: pkg-cli
      action: major
      type_description: >-
        Introduce backward-incompatible changes in ${{ pypkg_main.name }}$'s CLI.
    pkg_gui_change:
      type: change
      scope: pkg-gui
      action: major
      type_description: >-
        Introduce backward-incompatible changes in ${{ pypkg_main.name }}$'s GUI.
    pkg_build_change:
      type: change
      scope: pkg-build
      action: major
      type_description: >-
        Introduce backward-incompatible changes in ${{ pypkg_main.name }}$'s build system.
    test_api_fix:
      type: fix
      scope: test-api
      action: post
      type_description: >-
        Fix bugs in ${{ pypkg_test.name }}$'s API.
    test_cli_fix:
      type: fix
      scope: test-cli
      action: post
      type_description: >-
        Fix bugs in ${{ pypkg_test.name }}$'s CLI.
    test_gui_fix:
      type: fix
      scope: test-gui
      action: post
      type_description: >-
        Fix bugs in ${{ pypkg_test.name }}$'s GUI.
    test_build_fix:
      type: fix
      scope: test-build
      action: post
      type_description: >-
        Fix bugs in ${{ pypkg_test.name }}$'s build system.
    test_api_feat:
      type: feat
      scope: test-api
      action: post
      type_description: >-
        Add backward-compatible features to ${{ pypkg_test.name }}$'s API.
    test_cli_feat:
      type: feat
      scope: test-cli
      action: post
      type_description: >-
        Add backward-compatible features to ${{ pypkg_test.name }}$'s CLI.
    test_gui_feat:
      type: feat
      scope: test-gui
      action: post
      type_description: >-
        Add backward-compatible features to ${{ pypkg_test.name }}$'s GUI.
    test_build_feat:
      type: feat
      scope: test-build
      action: post
      type_description: >-
        Add backward-compatible features to ${{ pypkg_test.name }}$'s build system.
    test_api_change:
      type: change
      scope: test-api
      action: post
      type_description: >-
        Introduce backward-incompatible changes in ${{ pypkg_test.name }}$'s API.
    test_cli_change:
      type: change
      scope: test-cli
      action: post
      type_description: >-
        Introduce backward-incompatible changes in ${{ pypkg_test.name }}$'s CLI.
    test_gui_change:
      type: change
      scope: test-gui
      action: post
      type_description: >-
        Introduce backward-incompatible changes in ${{ pypkg_test.name }}$'s GUI.
    test_build_change:
      type: change
      scope: test-build
      action: post
      type_description: >-
        Introduce backward-incompatible changes in ${{ pypkg_test.name }}$'s build system.
    docs_fix:
      type: fix
      scope: docs
      action: post
      type_description: >-
        Fix bugs in ${{ name }}$'s documentation.
    docs_feat:
      type: feat
      scope: docs
      action: post
      type_description: >-
        Add backward-compatible features to ${{ name }}$'s documentation.
    docs_change:
      type: change
      scope: docs
      action: post
      type_description: >-
        Introduce backward-incompatible changes in ${{ name }}$'s documentation.
    refactor:
      type: refactor
      action: post
      type_description: >-
        Refactor code in ${{ name }}$.
    config:
      type: config
      type_description: >-
        Change project configurations and metadata.
    ci:
      type: ci
      type_description: >-
        Change Continuous Integration and Deployment pipelines.
    chore:
      type: chore
      type_description: >-
        Perform general maintenance and housekeeping activities.
  dev:
    # Pkg API
    pkg-api-remove:
      type: remove
      scope: pkg-api
      type_description: Remove a feature from ${{ pypkg_main.name }}$'s API.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_remove }}$
    pkg-api-change:
      type: change
      scope: pkg-api
      type_description: Change a feature in ${{ pypkg_main.name }}$'s API.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_change }}$
    pkg-api-deprecate:
      type: deprecate
      scope: pkg-api
      type_description: Deprecate a feature in ${{ pypkg_main.name }}$'s API.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_deprecate }}$
    pkg-api-feat:
      type: feat
      scope: pkg-api
      type_description: Add a feature to ${{ pypkg_main.name }}$'s API.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_feat }}$
    pkg-api-enhance:
      type: enhance
      scope: pkg-api
      type_description: Enhance a feature in ${{ pypkg_main.name }}$'s API.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_enhance }}$
    pkg-api-secure:
      type: secure
      scope: pkg-api
      type_description: Fix a security issue in ${{ pypkg_main.name }}$'s API.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_secure }}$
    pkg-api-fix:
      type: fix
      scope: pkg-api
      type_description: Fix a bug in ${{ pypkg_main.name }}$'s API.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_fix }}$
    pkg-api-perf:
      type: perf
      scope: pkg-api
      type_description: Improve performance in ${{ pypkg_main.name }}$'s API.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_perf }}$
    # Pkg CLI
    pkg-cli-remove:
      type: remove
      scope: pkg-cli
      type_description: Remove a feature from ${{ pypkg_main.name }}$'s CLI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_remove }}$
    pkg-cli-change:
      type: change
      scope: pkg-cli
      type_description: Change a feature in ${{ pypkg_main.name }}$'s CLI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_change }}$
    pkg-cli-deprecate:
      type: deprecate
      scope: pkg-cli
      type_description: Deprecate a feature in ${{ pypkg_main.name }}$'s CLI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_deprecate }}$
    pkg-cli-feat:
      type: feat
      scope: pkg-cli
      type_description: Add a feature to ${{ pypkg_main.name }}$'s CLI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_feat }}$
    pkg-cli-enhance:
      type: enhance
      scope: pkg-cli
      type_description: Enhance a feature in ${{ pypkg_main.name }}$'s CLI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_enhance }}$
    pkg-cli-secure:
      type: secure
      scope: pkg-cli
      type_description: Fix a security issue in ${{ pypkg_main.name }}$'s CLI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_secure }}$
    pkg-cli-fix:
      type: fix
      scope: pkg-cli
      type_description: Fix a bug in ${{ pypkg_main.name }}$'s CLI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_fix }}$
    pkg-cli-perf:
      type: perf
      scope: pkg-cli
      type_description: Improve performance in ${{ pypkg_main.name }}$'s CLI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_perf }}$
    # Pkg GUI
    pkg-gui-remove:
      type: remove
      scope: pkg-gui
      type_description: Remove a feature from ${{ pypkg_main.name }}$'s GUI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_remove }}$
    pkg-gui-change:
      type: change
      scope: pkg-gui
      type_description: Change a feature in ${{ pypkg_main.name }}$'s GUI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_change }}$
    pkg-gui-deprecate:
      type: deprecate
      scope: pkg-gui
      type_description: Deprecate a feature in ${{ pypkg_main.name }}$'s GUI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_deprecate }}$
    pkg-gui-feat:
      type: feat
      scope: pkg-gui
      type_description: Add a feature to ${{ pypkg_main.name }}$'s GUI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_feat }}$
    pkg-gui-enhance:
      type: enhance
      scope: pkg-gui
      type_description: Enhance a feature in ${{ pypkg_main.name }}$'s GUI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_enhance }}$
    pkg-gui-secure:
      type: secure
      scope: pkg-gui
      type_description: Fix a security issue in ${{ pypkg_main.name }}$'s GUI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_secure }}$
    pkg-gui-fix:
      type: fix
      scope: pkg-gui
      type_description: Fix a bug in ${{ pypkg_main.name }}$'s GUI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_fix }}$
    pkg-gui-perf:
      type: perf
      scope: pkg-gui
      type_description: Improve performance in ${{ pypkg_main.name }}$'s GUI.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_perf }}$
    # Pkg Build
    pkg-build-remove:
      type: remove
      scope: pkg-build
      type_description: Remove a feature from ${{ pypkg_main.name }}$'s build.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_remove }}$
    pkg-build-change:
      type: change
      scope: pkg-build
      type_description: Change a feature in ${{ pypkg_main.name }}$'s build.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_change }}$
    pkg-build-deprecate:
      type: deprecate
      scope: pkg-build
      type_description: Deprecate a feature in ${{ pypkg_main.name }}$'s build.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_deprecate }}$
    pkg-build-feat:
      type: feat
      scope: pkg-build
      type_description: Add a feature to ${{ pypkg_main.name }}$'s build.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_feat }}$
    pkg-build-enhance:
      type: enhance
      scope: pkg-build
      type_description: Enhance a feature in ${{ pypkg_main.name }}$'s build.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_enhance }}$
    pkg-build-secure:
      type: secure
      scope: pkg-build
      type_description: Fix a security issue in ${{ pypkg_main.name }}$'s build.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_secure }}$
    pkg-build-fix:
      type: fix
      scope: pkg-build
      type_description: Fix a bug in ${{ pypkg_main.name }}$'s build.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_fix }}$
    pkg-build-perf:
      type: perf
      scope: pkg-build
      type_description: Improve performance in ${{ pypkg_main.name }}$'s build.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_perf }}$
    # Pkg Code
    pkg-code-refactor:
      type: refactor
      scope: pkg
      type_description: Refactor code in ${{ pypkg_main.name }}$.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_code }}$
      h3: ${{ ...__data__.h3_refactor }}$
    pkg-code-style:
      type: style
      scope: pkg
      type_description: Change text style and formatting in ${{ pypkg_main.name }}$.
      h1: ${{ ...__data__.h1_pkg }}$
      h2: ${{ ...__data__.h2_code }}$
      h3: ${{ ...__data__.h3_style }}$
    # Test API
    test-api-remove:
      type: remove
      scope: test-api
      type_description: Remove a feature from ${{ pypkg_test.name }}$'s API.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_remove }}$
    test-api-change:
      type: change
      scope: test-api
      type_description: Change a feature in ${{ pypkg_test.name }}$'s API.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_change }}$
    test-api-deprecate:
      type: deprecate
      scope: test-api
      type_description: Deprecate a feature in ${{ pypkg_test.name }}$'s API.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_deprecate }}$
    test-api-feat:
      type: feat
      scope: test-api
      type_description: Add a feature to ${{ pypkg_test.name }}$'s API.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_feat }}$
    test-api-enhance:
      type: enhance
      scope: test-api
      type_description: Enhance a feature in ${{ pypkg_test.name }}$'s API.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_enhance }}$
    test-api-secure:
      type: secure
      scope: test-api
      type_description: Fix a security issue in ${{ pypkg_test.name }}$'s API.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_secure }}$
    test-api-fix:
      type: fix
      scope: test-api
      type_description: Fix a bug in ${{ pypkg_test.name }}$'s API.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_fix }}$
    test-api-perf:
      type: perf
      scope: test-api
      type_description: Improve performance in ${{ pypkg_test.name }}$'s API.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_api }}$
      h3: ${{ ...__data__.h3_perf }}$
    # Test CLI
    test-cli-remove:
      type: remove
      scope: test-cli
      type_description: Remove a feature from ${{ pypkg_test.name }}$'s CLI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_remove }}$
    test-cli-change:
      type: change
      scope: test-cli
      type_description: Change a feature in ${{ pypkg_test.name }}$'s CLI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_change }}$
    test-cli-deprecate:
      type: deprecate
      scope: test-cli
      type_description: Deprecate a feature in ${{ pypkg_test.name }}$'s CLI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_deprecate }}$
    test-cli-feat:
      type: feat
      scope: test-cli
      type_description: Add a feature to ${{ pypkg_test.name }}$'s CLI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_feat }}$
    test-cli-enhance:
      type: enhance
      scope: test-cli
      type_description: Enhance a feature in ${{ pypkg_test.name }}$'s CLI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_enhance }}$
    test-cli-secure:
      type: secure
      scope: test-cli
      type_description: Fix a security issue in ${{ pypkg_test.name }}$'s CLI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_secure }}$
    test-cli-fix:
      type: fix
      scope: test-cli
      type_description: Fix a bug in ${{ pypkg_test.name }}$'s CLI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_fix }}$
    test-cli-perf:
      type: perf
      scope: test-cli
      type_description: Improve performance in ${{ pypkg_test.name }}$'s CLI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_cli }}$
      h3: ${{ ...__data__.h3_perf }}$
    # Test GUI
    test-gui-remove:
      type: remove
      scope: test-gui
      type_description: Remove a feature from ${{ pypkg_test.name }}$'s GUI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_remove }}$
    test-gui-change:
      type: change
      scope: test-gui
      type_description: Change a feature in ${{ pypkg_test.name }}$'s GUI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_change }}$
    test-gui-deprecate:
      type: deprecate
      scope: test-gui
      type_description: Deprecate a feature in ${{ pypkg_test.name }}$'s GUI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_deprecate }}$
    test-gui-feat:
      type: feat
      scope: test-gui
      type_description: Add a feature to ${{ pypkg_test.name }}$'s GUI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_feat }}$
    test-gui-enhance:
      type: enhance
      scope: test-gui
      type_description: Enhance a feature in ${{ pypkg_test.name }}$'s GUI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_enhance }}$
    test-gui-secure:
      type: secure
      scope: test-gui
      type_description: Fix a security issue in ${{ pypkg_test.name }}$'s GUI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_secure }}$
    test-gui-fix:
      type: fix
      scope: test-gui
      type_description: Fix a bug in ${{ pypkg_test.name }}$'s GUI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_fix }}$
    test-gui-perf:
      type: perf
      scope: test-gui
      type_description: Improve performance in ${{ pypkg_test.name }}$'s GUI.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_gui }}$
      h3: ${{ ...__data__.h3_perf }}$
    # Test Build
    test-build-remove:
      type: remove
      scope: test-build
      type_description: Remove a feature from ${{ pypkg_test.name }}$'s build.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_remove }}$
    test-build-change:
      type: change
      scope: test-build
      type_description: Change a feature in ${{ pypkg_test.name }}$'s build.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_change }}$
    test-build-deprecate:
      type: deprecate
      scope: test-build
      type_description: Deprecate a feature in ${{ pypkg_test.name }}$'s build.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_deprecate }}$
    test-build-feat:
      type: feat
      scope: test-build
      type_description: Add a feature to ${{ pypkg_test.name }}$'s build.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_feat }}$
    test-build-enhance:
      type: enhance
      scope: test-build
      type_description: Enhance a feature in ${{ pypkg_test.name }}$'s build.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_enhance }}$
    test-build-secure:
      type: secure
      scope: test-build
      type_description: Fix a security issue in ${{ pypkg_test.name }}$'s build.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_secure }}$
    test-build-fix:
      type: fix
      scope: test-build
      type_description: Fix a bug in ${{ pypkg_test.name }}$'s build.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_fix }}$
    test-build-perf:
      type: perf
      scope: test-build
      type_description: Improve performance in ${{ pypkg_test.name }}$'s build.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_build }}$
      h3: ${{ ...__data__.h3_perf }}$
    # Test Code
    test-code-refactor:
      type: refactor
      scope: test
      type_description: Refactor code in ${{ pypkg_test.name }}$.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_code }}$
      h3: ${{ ...__data__.h3_refactor }}$
    test-code-style:
      type: style
      scope: test
      type_description: Change text style and formatting in ${{ pypkg_test.name }}$.
      h1: ${{ ...__data__.h1_test }}$
      h2: ${{ ...__data__.h2_code }}$
      h3: ${{ ...__data__.h3_style }}$
    # Docs Content
    docs-content-remove:
      type: remove
      scope: docs-content
      type_description: Remove content from the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_content }}$
      h3: ${{ ...__data__.h3_remove }}$
    docs-content-change:
      type: change
      scope: docs-content
      type_description: Change content in the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_content }}$
      h3: ${{ ...__data__.h3_change }}$
    docs-content-feat:
      type: feat
      scope: docs-content
      type_description: Add content to the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_content }}$
      h3: ${{ ...__data__.h3_feat }}$
    docs-content-fix:
      type: fix
      scope: docs-content
      type_description: Fix content in the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_content }}$
      h3: ${{ ...__data__.h3_fix }}$
    # Docs Design
    docs-design-remove:
      type: remove
      scope: docs-design
      type_description: Remove design elements from the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_design }}$
      h3: ${{ ...__data__.h3_remove }}$
    docs-design-change:
      type: change
      scope: docs-design
      type_description: Change design elements in the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_design }}$
      h3: ${{ ...__data__.h3_change }}$
    docs-design-feat:
      type: feat
      scope: docs-design
      type_description: Add design elements to the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_design }}$
      h3: ${{ ...__data__.h3_feat }}$
    docs-design-fix:
      type: fix
      scope: docs-design
      type_description: Fix design elements in the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_design }}$
      h3: ${{ ...__data__.h3_fix }}$
    # Docs Features
    docs-feat-remove:
      type: remove
      scope: docs-feat
      type_description: Remove features from the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_feat }}$
      h3: ${{ ...__data__.h3_remove }}$
    docs-feat-change:
      type: change
      scope: docs-feat
      type_description: Change features in the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_feat }}$
      h3: ${{ ...__data__.h3_change }}$
    docs-feat-feat:
      type: feat
      scope: docs-feat
      type_description: Add features to the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_feat }}$
      h3: ${{ ...__data__.h3_feat }}$
    docs-feat-fix:
      type: fix
      scope: docs-feat
      type_description: Fix features in the documentation.
      h1: ${{ ...__data__.h1_docs }}$
      h2: ${{ ...__data__.h2_feat }}$
      h3: ${{ ...__data__.h3_fix }}$
    # CI Main
    ci-main-remove:
      type: remove
      scope: ci-main
      type_description: Remove a feature from the main workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_main }}$
      h3: ${{ ...__data__.h3_remove }}$
    ci-main-change:
      type: change
      scope: ci-main
      type_description: Change a feature in the main workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_main }}$
      h3: ${{ ...__data__.h3_change }}$
    ci-main-feat:
      type: feat
      scope: ci-main
      type_description: Add a feature to the main workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_main }}$
      h3: ${{ ...__data__.h3_feat }}$
    ci-main-secure:
      type: secure
      scope: ci-main
      type_description: Fix a security issue in the main workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_main }}$
      h3: ${{ ...__data__.h3_secure }}$
    ci-main-fix:
      type: fix
      scope: ci-main
      type_description: Fix a bug in the main workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_main }}$
      h3: ${{ ...__data__.h3_fix }}$
    ci-main-perf:
      type: perf
      scope: ci-main
      type_description: Improve performance in the main workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_main }}$
      h3: ${{ ...__data__.h3_perf }}$
    # CI Build
    ci-build-remove:
      type: remove
      scope: ci-build
      type_description: Remove a feature from the build workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_build }}$
      h3: ${{ ...__data__.h3_remove }}$
    ci-build-change:
      type: change
      scope: ci-build
      type_description: Change a feature in the build workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_build }}$
      h3: ${{ ...__data__.h3_change }}$
    ci-build-feat:
      type: feat
      scope: ci-build
      type_description: Add a feature to the build workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_build }}$
      h3: ${{ ...__data__.h3_feat }}$
    ci-build-secure:
      type: secure
      scope: ci-build
      type_description: Fix a security issue in the build workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_build }}$
      h3: ${{ ...__data__.h3_secure }}$
    ci-build-fix:
      type: fix
      scope: ci-build
      type_description: Fix a bug in the build workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_build }}$
      h3: ${{ ...__data__.h3_fix }}$
    ci-build-perf:
      type: perf
      scope: ci-build
      type_description: Improve performance in the build workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_build }}$
      h3: ${{ ...__data__.h3_perf }}$
    # CI Lint
    ci-lint-remove:
      type: remove
      scope: ci-lint
      type_description: Remove a feature from the lint workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_lint }}$
      h3: ${{ ...__data__.h3_remove }}$
    ci-lint-change:
      type: change
      scope: ci-lint
      type_description: Change a feature in the lint workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_lint }}$
      h3: ${{ ...__data__.h3_change }}$
    ci-lint-feat:
      type: feat
      scope: ci-lint
      type_description: Add a feature to the lint workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_lint }}$
      h3: ${{ ...__data__.h3_feat }}$
    ci-lint-secure:
      type: secure
      scope: ci-lint
      type_description: Fix a security issue in the lint workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_lint }}$
      h3: ${{ ...__data__.h3_secure }}$
    ci-lint-fix:
      type: fix
      scope: ci-lint
      type_description: Fix a bug in the lint workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_lint }}$
      h3: ${{ ...__data__.h3_fix }}$
    ci-lint-perf:
      type: perf
      scope: ci-lint
      type_description: Improve performance in the lint workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_lint }}$
      h3: ${{ ...__data__.h3_perf }}$
    # CI Test
    ci-test-remove:
      type: remove
      scope: ci-test
      type_description: Remove a feature from the test workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_test }}$
      h3: ${{ ...__data__.h3_remove }}$
    ci-test-change:
      type: change
      scope: ci-test
      type_description: Change a feature in the test workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_test }}$
      h3: ${{ ...__data__.h3_change }}$
    ci-test-feat:
      type: feat
      scope: ci-test
      type_description: Add a feature to the test workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_test }}$
      h3: ${{ ...__data__.h3_feat }}$
    ci-test-secure:
      type: secure
      scope: ci-test
      type_description: Fix a security issue in the test workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_test }}$
      h3: ${{ ...__data__.h3_secure }}$
    ci-test-fix:
      type: fix
      scope: ci-test
      type_description: Fix a bug in the test workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_test }}$
      h3: ${{ ...__data__.h3_fix }}$
    ci-test-perf:
      type: perf
      scope: ci-test
      type_description: Improve performance in the test workflow.
      h1: ${{ ...__data__.h1_ci }}$
      h2: ${{ ...__data__.h2_ci_test }}$
      h3: ${{ ...__data__.h3_perf }}$
    # CD Pkg
    cd-pkg-remove:
      type: remove
      scope: cd-pkg
      type_description: Remove a feature from the package deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_pkg }}$
      h3: ${{ ...__data__.h3_remove }}$
    cd-pkg-change:
      type: change
      scope: cd-pkg
      type_description: Change a feature in the package deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_pkg }}$
      h3: ${{ ...__data__.h3_change }}$
    cd-pkg-feat:
      type: feat
      scope: cd-pkg
      type_description: Add a feature to the package deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_pkg }}$
      h3: ${{ ...__data__.h3_feat }}$
    cd-pkg-secure:
      type: secure
      scope: cd-pkg
      type_description: Fix a security issue in the package deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_pkg }}$
      h3: ${{ ...__data__.h3_secure }}$
    cd-pkg-fix:
      type: fix
      scope: cd-pkg
      type_description: Fix a bug in the package deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_pkg }}$
      h3: ${{ ...__data__.h3_fix }}$
    cd-pkg-perf:
      type: perf
      scope: cd-pkg
      type_description: Improve performance in the package deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_pkg }}$
      h3: ${{ ...__data__.h3_perf }}$
    # CD Docs
    cd-docs-remove:
      type: remove
      scope: cd-docs
      type_description: Remove a feature from the documentation deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_docs }}$
      h3: ${{ ...__data__.h3_remove }}$
    cd-docs-change:
      type: change
      scope: cd-docs
      type_description: Change a feature in the documentation deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_docs }}$
      h3: ${{ ...__data__.h3_change }}$
    cd-docs-feat:
      type: feat
      scope: cd-docs
      type_description: Add a feature to the documentation deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_docs }}$
      h3: ${{ ...__data__.h3_feat }}$
    cd-docs-secure:
      type: secure
      scope: cd-docs
      type_description: Fix a security issue in the documentation deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_docs }}$
      h3: ${{ ...__data__.h3_secure }}$
    cd-docs-fix:
      type: fix
      scope: cd-docs
      type_description: Fix a bug in the documentation deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_docs }}$
      h3: ${{ ...__data__.h3_fix }}$
    cd-docs-perf:
      type: perf
      scope: cd-docs
      type_description: Improve performance in the documentation deployment workflow.
      h1: ${{ ...__data__.h1_cd }}$
      h2: ${{ ...__data__.h2_cd_docs }}$
      h3: ${{ ...__data__.h3_perf }}$
    # Config
    config-proj:
      type: config
      scope: proj
      type_description: Change project configurations.
      h1: ${{ ...__data__.h1_config }}$
      h2: ${{ ...__data__.h2_proj }}$
    config-pkg:
      type: config
      scope: pkg
      type_description: Change package configurations.
      h1: ${{ ...__data__.h1_config }}$
      h2: ${{ ...__data__.h2_pkg }}$
    config-test:
      type: config
      scope: test
      type_description: Change test configurations.
      h1: ${{ ...__data__.h1_config }}$
      h2: ${{ ...__data__.h2_test }}$
    config-docs:
      type: config
      scope: docs
      type_description: Change documentation configurations.
      h1: ${{ ...__data__.h1_config }}$
      h2: ${{ ...__data__.h2_docs }}$
    config-its:
      type: config
      scope: its
      type_description: Change issue tracking system configurations.
      h1: ${{ ...__data__.h1_config }}$
      h2: ${{ ...__data__.h2_its }}$
    config-vcs:
      type: config
      scope: vcs
      type_description: Change version control system configurations.
      h1: ${{ ...__data__.h1_config }}$
      h2: ${{ ...__data__.h2_vcs }}$
    config-ci:
      type: config
      scope: ci
      type_description: Change CI/CD configurations.
      h1: ${{ ...__data__.h1_config }}$
      h2: ${{ ...__data__.h2_ci }}$
    # Maintenance
    maintain-proj:
      type: maintain
      scope: proj
      type_description: Perform maintenance tasks on the project as a whole.
      h1: ${{ ...__data__.h1_maintain }}$
      h2: ${{ ...__data__.h2_proj }}$
    maintain-pkg:
      type: maintain
      scope: pkg
      type_description: Perform maintenance tasks on the package.
      h1: ${{ ...__data__.h1_maintain }}$
      h2: ${{ ...__data__.h2_pkg }}$
    maintain-test:
      type: maintain
      scope: test
      type_description: Perform maintenance tasks on the test suite.
      h1: ${{ ...__data__.h1_maintain }}$
      h2: ${{ ...__data__.h2_test }}$
    maintain-docs:
      type: maintain
      scope: docs
      type_description: Perform maintenance tasks on the documentation.
      h1: ${{ ...__data__.h1_maintain }}$
      h2: ${{ ...__data__.h2_docs }}$
    maintain-its:
      type: maintain
      scope: its
      type_description: Perform maintenance tasks on the issue tracking system.
      h1: ${{ ...__data__.h1_maintain }}$
      h2: ${{ ...__data__.h2_its }}$
    maintain-vcs:
      type: maintain
      scope: vcs
      type_description: Perform maintenance tasks on the version control system.
      h1: ${{ ...__data__.h1_maintain }}$
      h2: ${{ ...__data__.h2_vcs }}$
    maintain-ci:
      type: maintain
      scope: ci
      type_description: Perform maintenance tasks on the CI/CD pipelines.
      h1: ${{ ...__data__.h1_maintain }}$
      h2: ${{ ...__data__.h2_ci }}$
label:
  type:
    prefix: Type
    color: '#A00000'
    label:
      fix:
        suffix: ${{ theme.icon.fix }}$ bug fix
        description: Fix a bug in a project component.
      feat:
        suffix: ${{ theme.icon.feat }}$ new feature
        description: Add a new feature to a project component.
      change:
        suffix: ${{ theme.icon.change }}$ breaking change
        description: Introduce a breaking change in a project component.
      refactor:
        suffix: ${{ theme.icon.refactor }}$ refactoring
        description: Refactor code without affecting project interfaces.
      config:
        suffix: ${{ theme.icon.config }}$ configuration
        description: Change project configurations and metadata.
      ci:
        suffix: ${{ theme.icon.ci }}$ DevOps
        description: Change automated workflows and development environments.
      chore:
        suffix: ${{ theme.icon.chore }}$ maintenance
        description: Perform housekeeping tasks unrelated to project interfaces.
  scope:
    prefix: Scope
    color: '#A00000'
    label:
      pkg:
        suffix: ${{ theme.icon.pkg }}$ app
        description: Related to ${{ pypkg_main.name }}$ package.
      test:
        suffix: ${{ theme.icon.test }}$ tests
        description: Related to ${{ pypkg_test.name }}$ package.
      docs:
        suffix: ${{ theme.icon.docs }}$ docs
        description: Related to ${{ name }}$ documentation and website.
      repo:
        suffix: ${{ theme.icon.repo }}$ repo
        description: Related to ${{ repo.name }}$ repository.
  component:
    prefix: Component
    color: '#0366d6'
    label:
      api:
        suffix: ${{ theme.icon.api }}$ API
        description: Related to the Python application programming interface.
      cli:
        suffix: ${{ theme.icon.cli }}$ CLI
        description: Related to the command-line interface.
      gui:
        suffix: ${{ theme.icon.gui }}$ GUI
        description: Related to the graphical user interface.
      build:
        suffix: ${{ theme.icon.setup }}$ Build
        description: Related to the build and installation process.
  commit:
    prefix: Commit
    color: '#0366d6'
    label: '#{{ return hook.commit_labels() }}#'
  release:
    prefix: Release
    color: '#0366d6'
    label:
      major:
        suffix: major
        description: Publish a new major release.
      minor:
        suffix: minor
        description: Publish a new minor release.
      patch:
        suffix: patch
        description: Publish a new patch release.
      post:
        suffix: post
        description: Publish a new post release.
      local:
        suffix: local
        description: Publish a new local release.
  remark:
    prefix: Remark
    color: '#0366d6'
    label:
      queued:
        suffix: Queued
        description: Queued for processing.
      discuss:
        suffix: Discuss
        description: Requires more discussion.
      need_volunteer:
        suffix: Need Volunteer
        description: Requires a volunteer.
issue:
  blank_enabled: false
  contact_links:
    - name: '🎓️  Learn More'
      about: Not sure where to start? Read our contribution guide to learn more.
      url: ${{ web.page.contribute.url }}$
    - name: '💬  Contact Us'
      about: Have another inquiry or need help? Contact us directly!
      url: ${{ web.page.contact.url }}$
  __temp__:
    # Body Templates
    body_fix_api:
      - '*{{ issue.__temp__.header_bug }}*'
      - '*{{ issue.__temp__.address_api }}*'
      - ${{ issue.__data__.issue_summary }}$
      - type: textarea
        id: test_case
        attributes:
          label: Test Case
          description: >-
            Please provide a [test case](https://docs.pytest.org/en/stable/getting-started.html)
            that demonstrates the bug:

            - At the top of the code block below,
            add the minimum number of imports required to reproduce the bug.

            - Replace the ellipsis (`...`) in the `test` function with a
            [Minimal Reproducible Example](https://stackoverflow.com/help/minimal-reproducible-example) (MRE).
            Use [`assert` statements](https://docs.pytest.org/en/stable/how-to/assert.html)
            to specify the expected results.
          value: |
            import ${{ .__data__.python_api_names[0] }}$


            def test():
                ...
          render: python
        validations:
          required: true
    body_fix_cli:
      - '*{{ issue.__temp__.header_bug }}*'
      - '*{{ issue.__temp__.address_cli }}*'
      - ${{ issue.__data__.issue_summary }}$
      - type: textarea
        id: test_case
        attributes:
          label: Test Case
          description: >-
            Please provide a [test case](https://docs.pytest.org/en/stable/getting-started.html)
            that demonstrates the bug:

            - In the `test` function below,
            replace the value of `command` with the
            exact command that is causing the problem.

            - Replace the value of `expected_return_code`
            with the expected return code of the command.

            - Replace the value of `expected_output` with the expected output of the command.
            Use [`assert` statements](https://docs.pytest.org/en/stable/how-to/assert.html)
            to specify the expected results.

            - If the command has side effects,
            add further [`assert` statements](https://docs.pytest.org/en/stable/how-to/assert.html)
            to specify the expected results.
          value: |
            import subprocess


            def test():
                command = ""
                expected_return_code = 0
                expected_output = b""

                result = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                assert result.returncode == expected_return_code
                assert result.stdout == expected_output
          render: python
        validations:
          required: true
    body_fix_gui:
      - '*{{ issue.__temp__.header_bug }}*'
      - '*{{ issue.__temp__.address_gui }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.mre_generic }}$
      - ${{ issue.__data__.stderr_optional }}$
    body_fix_setup:
      - '*{{ issue.__temp__.header_bug }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.mre_generic }}$
      - ${{ issue.__data__.stderr_optional }}$
    body_feat_api:
      - '*{{ issue.__temp__.header_feature }}*'
      - '*{{ issue.__temp__.address_api }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_feat_cli:
      - '*{{ issue.__temp__.header_feature }}*'
      - '*{{ issue.__temp__.address_cli }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_feat_gui:
      - '*{{ issue.__temp__.header_feature }}*'
      - '*{{ issue.__temp__.address_gui }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_change_api:
      - '*{{ issue.__temp__.header_breaking }}*'
      - '*{{ issue.__temp__.address_api }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_change_cli:
      - '*{{ issue.__temp__.header_breaking }}*'
      - '*{{ issue.__temp__.address_cli }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_change_gui:
      - '*{{ issue.__temp__.header_breaking }}*'
      - '*{{ issue.__temp__.address_gui }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_fix_doc:
      - '*{{ issue.__temp__.header }}*'
      - ${{ issue.__data__.verify_bug }}$
      - '*{{ issue.__data__.agreements }}*'
      - ${{ issue.__data__.heading_bug_report }}$
      - ${{ issue.__data__.version }}$
      - '*{{ issue.__temp__.address_doc }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.mre_generic }}$
    body_feat_doc:
      - '*{{ issue.__temp__.header }}*'
      - ${{ issue.__data__.verify_feat }}$
      - '*{{ issue.__data__.agreements }}*'
      - ${{ issue.__data__.heading_feature_request }}$
      - ${{ issue.__data__.version }}$
      - '*{{ issue.__temp__.address_doc }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_change_doc:
      - '*{{ issue.__temp__.header }}*'
      - ${{ issue.__data__.verify_change }}$
      - '*{{ issue.__data__.agreements }}*'
      - ${{ issue.__data__.heading_change_request }}$
      - ${{ issue.__data__.version }}$
      - '*{{ issue.__temp__.address_doc }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_refactor:
      - '*{{ issue.__temp__.header }}*'
      - '*{{ issue.__data__.agreements }}*'
      - ${{ issue.__data__.heading_change_request }}$
      - ${{ issue.__data__.version }}$
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_config:
      - '*{{ issue.__temp__.header }}*'
      - '*{{ issue.__data__.agreements }}*'
      - ${{ issue.__data__.heading_change_request }}$
      - ${{ issue.__data__.version }}$
      - '*{{ issue.__temp__.address_config }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_devops:
      - '*{{ issue.__temp__.header }}*'
      - '*{{ issue.__data__.agreements }}*'
      - ${{ issue.__data__.heading_change_request }}$
      - ${{ issue.__data__.version }}$
      - '*{{ issue.__temp__.address_config }}*'
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    body_maintenance:
      - '*{{ issue.__temp__.header }}*'
      - '*{{ issue.__data__.agreements }}*'
      - ${{ issue.__data__.heading_change_request }}$
      - ${{ issue.__data__.version }}$
      - ${{ issue.__data__.issue_summary }}$
      - ${{ issue.__data__.proposal }}$
    # Body Header Templates
    header_bug:
      - '*{{ issue.__temp__.header }}*'
      - ${{ issue.__data__.verify_bug }}$
      - '*{{ issue.__data__.agreements }}*'
      - '*{{ issue.__data__.environment }}*'
      - ${{ issue.__data__.heading_bug_report }}$
      - ${{ issue.__data__.version }}$
    header_feature:
      - '*{{ issue.__temp__.header }}*'
      - ${{ issue.__data__.verify_feat }}$
      - '*{{ issue.__data__.agreements }}*'
      - ${{ issue.__data__.heading_feature_request }}$
      - ${{ issue.__data__.version }}$
    header_breaking:
      - '*{{ issue.__temp__.header }}*'
      - ${{ issue.__data__.verify_change }}$
      - '*{{ issue.__data__.agreements }}*'
      - ${{ issue.__data__.heading_change_request }}$
      - ${{ issue.__data__.version }}$
    header:
      - type: markdown
        attributes:
          value: >-
            <p align="justify">
              Thank you for providing feedback on ${{ name }}$;
              we greatly appreciate your contribution!
              Before submitting a ticket,
              please take a moment to review and accept our terms and conditions.
            </p>
      - type: markdown
        attributes:
          value: |
            <br>

            ## 🤝 Terms and Conditions
      - type: markdown
        attributes:
          value: |
            ### ⛔ Choosing the Right Form

            <p align="justify">
              Please note that this form is specifically for ${{ .__temp__.purpose }}$,
              For other types of issues and requests, select the appropriate form
              from the <a href="${{ repo.url.issues.chooser }}$">issue template chooser</a>.
              If you are unsure about which form to choose or have another inquiry,
              please open a discussion in our <a href="${{ repo.url.discussions.home }}$">discussion forum</a>.
            </p>
    # Template Chooser Descriptions
    description_bug: >-
      Report problems and errors in
      ${{ .__data__.pkg_name }}$'s ${{ .__data__.pkg_entry_name }}$.
    description_feat: >-
      Request backward-compatible improvements and new functionalities
      in ${{ .__data__.pkg_name }}$'s ${{ .__data__.pkg_entry_name }}$.
    description_break: >-
      Request backward-incompatible changes to
      ${{ .__data__.pkg_name }}$'s ${{ .__data__.pkg_entry_name }}$.
    # Form Purpose
    purpose_bug: >-
      reporting a <b>non-security-related bug in
      ${{ .__data__.pkg_name }}$'s ${{ .__data__.pkg_entry_name }}$</b>,
      i.e. an unexpected behavior or result
      in ${{ .__data__.pkg_name }}$'s ${{ .__data__.pkg_entry_description }}$.
    purpose_feat: >-
      requesting a <b>backward-compatible improvement</b> or <b>new functionality</b> in
      ${{ .__data__.pkg_name }}$'s ${{ .__data__.pkg_entry_name }}$,
      i.e. a non-breaking change (that is not a bug fix) in
      ${{ .__data__.pkg_name }}$'s ${{ .__data__.pkg_entry_description }}$.
    purpose_break: >-
      requesting a <b>backward-incompatible change</b> in
      ${{ .__data__.pkg_name }}$'s ${{ .__data__.pkg_entry_name }}$,
      i.e. a breaking change in behaviour or functionalities of
      ${{ .__data__.pkg_name }}$'s ${{ .__data__.pkg_entry_description }}$.
    # Address
    address_api:
      - type: dropdown
        id: entrypoint
        attributes:
          label: API Entry Point
          description: Please select the relevant API entry point.
          multiple: false
          options: ${{ .__data__.python_api_names }}$
          default: 0
        validations:
          required: true
      - type: input
        id: endpoint
        attributes:
          label: Fully Qualified Name
          description: >-
            Please provide the fully qualified name (minus the entry point)
            of the relevant API endpoint.
            For example, for a method at
            `${{ .__data__.python_api_names[0] }}$.module_name.ClassName.method_name`
            in the entry point `${{ .__data__.python_api_names[0] }}$`,
            you should write `module_name.ClassName.method_name`.
          placeholder: module_name.ClassName.method_name
        validations:
          required: true
    address_cli:
      - type: dropdown
        id: entrypoint
        attributes:
          label: CLI Entry Point
          description: Please select the relevant CLI entry point.
          multiple: false
          options: ${{ .__data__.cli_names }}$
          default: 0
        validations:
          required: true
    address_gui:
      - type: dropdown
        id: entrypoint
        attributes:
          label: GUI Entry Point
          description: Please select the affected GUI entry point.
          multiple: false
          options: ${{ .__data__.gui_names }}$
          default: 0
        validations:
          required: true
    address_doc:
      - type: input
        id: url
        attributes:
          label: URL
          description: >-
            Please provide the URL of the relevant web page or repository file.
          placeholder: ${{ web.url.home }}$
        validations:
          required: true
    address_config:
      - type: input
        id: url
        attributes:
          label: URL
          description: >-
            Please provide the URL of the relevant configuration file in the repository.
          placeholder: ${{ repo.url.blob }}$/${{ control.path.config }}$
        validations:
          required: true
      - type: input
        id: jsonpath
        attributes:
          label: Path
          description: >-
            Please provide the JSONPath expression to the relevant configuration field.
          placeholder: $.license.expression
        validations:
          required: true
    labels:
      - [ commit, '${{ ..commit }}$' ]
      - [ release, '#{{ return get(f"commit.release.{get("..commit")}").get("action", "local") }}#' ]
  __data__:
    title_pkg: ' ${{ theme.icon.pkg }}$ App'
    title_doc: ' ${{ theme.icon.docs }}$ Docs'
    title_test: ' ${{ theme.icon.test }}$ Tests'
    title_api: ' ${{ theme.icon.api }}$ API'
    title_cli: ' ${{ theme.icon.cli }}$ CLI'
    title_gui: ' ${{ theme.icon.gui }}$ GUI'
    title_setup: ' ${{ theme.icon.setup }}$ Setup'
    title_bug: ' ${{ theme.icon.fix }}$ Bug Report'
    title_feat: ' ${{ theme.icon.feat }}$ Feature Request'
    title_breaking: ' ${{ theme.icon.change }}$ Change Request'
    heading_bug_report:
      type: markdown
      attributes:
        value: |
          <br>

          ## 🐞 Bug Report
    heading_feature_request:
      type: markdown
      attributes:
        value: |
          <br>

          ## ✨ Feature Request
    heading_change_request:
      type: markdown
      attributes:
        value: |
          <br>

          ## 💥 Change Request
    agreements:
      - type: markdown
        attributes:
          value: |
            ### ℹ️ Choosing the Right Title

            <p align="justify">Please write a concise and descriptive title and
            use relevant keywords to help others find the issue.</p>
      - type: markdown
        attributes:
          value: '### ✅ Agreements'
      - type: checkboxes
        id: terms
        attributes:
          label: >-
            To submit an issue, please agree to the following terms and conditions:
          options:
            - label: >-
                I confirm that I am following ${{ name }}$'s
                [Contribution Guidelines](${{ web.page.contribute.url }}$).
              required: true
            - label: >-
                I agree to follow ${{ name }}$'s
                [Code of Conduct](${{ file_coc.url }}$).
              required: true
      - type: markdown
        attributes:
          value: '### 🧑‍💻️ Collaboration'
      - type: checkboxes
        id: collab
        attributes:
          label: |
            Thank you again for filling out this issue ticket.
            If you are willing to collaborate on its design and implementation,
            please select the option below.
          options:
            - label: >-
                I am willing to collaborate on this issue and submit a pull request.
              required: false
    environment:
      - type: markdown
        attributes:
          value: |
            <br>

            ## 🎛 Environment Specifications
      - type: dropdown
        id: os
        attributes:
          label: Operating System
          description: |
            Please select all operating systems on which you have encountered the bug.
          multiple: true
          options: ${{ project.os_names }}$
        validations:
          required: true
      - type: dropdown
        id: python_versions
        attributes:
          label: Python Version
          description: |
            Please select all Python versions in which you have encountered the bug.
          multiple: true
          options: ${{ project.python_versions }}$
          default: 0
        validations:
          required: true
      - type: dropdown
        id: package_manager
        attributes:
          label: Package Manager
          description: |
            Please select the package manager used to download and install ${{ name }}$.
          multiple: false
          options: ${{ project.package_managers }}$
          default: 0
        validations:
          required: true
      - type: textarea
        id: environment
        attributes:
          label: Environment
          description: >-
            Please provide the details of all installed packages and their exact versions
            in the environment where you have encountered the bug. Follow the instructions below
            based on the package manager you have selected:

            1. **`pip`**: Run `pip freeze > requirements.txt` in your terminal within the environment,
            and copy the contents of the generated `requirements.txt` file here.

            2. **`conda`**: Run `conda env export > environment.yml` in your terminal within the environment
            (or alternatively `conda env export -n {YOUR_ENVIRONMENT_NAME} > environment.yml`),
            and copy the contents of the generated `environment.yml` file here.
          render: yaml
        validations:
          required: true
    version:
      type: dropdown
      id: version
      attributes:
        label: Version
        description: |
          Please select all relevant ${{ name }}$ versions.
        multiple: true
        options: ${{ project.versions }}$
        default: 0
      validations:
        required: true
    issue_summary:
      type: textarea
      id: summary
      attributes:
        label: Summary
        description: Please provide a summary of the issue.
      validations:
        required: true
      changelog: true
    mre_generic:
      type: textarea
      id: mre
      attributes:
        label: Minimal Reproducible Example (MRE)
        description: >-
          Please provide an exact step-by-step instruction to reproduce the problem.
          You can also include screenshots/recordings by dragging and dropping them here.
        placeholder: |
          1. ...
          2. ...
          3. ...
      validations:
        required: true
    stderr_optional:
      type: textarea
      id: stderr
      attributes:
        label: Error Message
        description: If applicable, provide the full traceback of the error message.
        render: shell
      validations:
        required: false
    proposal:
      type: textarea
      id: proposal
      attributes:
        label: Proposal
        description: Please describe your proposal in detail.
      validations:
        required: true
      changelog: true
    verify_bug:
      type: markdown
      attributes:
        value: |
          ### ⚠️ Verifying the Bug

          <p align="justify">
            Before submitting a report, please make sure that you are following our
            <a href="${{ web.page.contribute.url }}$">Bug Report Guidelines</a> to verify that:
          </p>

          - <p align="justify">The issue you are experiencing is in fact a bug, and not a documented expected behavior.</p>
          - <p align="justify">The bug is reproducible in the latest version of the release, and has not yet been reported.</p>
    verify_feat:
      type: markdown
      attributes:
        value: |
          ### ⚠️ Verifying the Request

          <p align="justify">
            Before submitting a report, please make sure that you are following our
            <a href="${{ web.page.contribute.url }}$">Feature Request Guidelines</a> to verify that:
          </p>

          - <p align="justify">Your request is for a backward-compatible change, and not a breaking change or a bug fix.</p>
          - <p align="justify">The request is not implemented in the latest version of the release, and has not yet been filed.</p>
    verify_change:
      type: markdown
      attributes:
        value: |
          ### ⚠️ Verifying the Request

          <p align="justify">
            Before submitting a report, please make sure that you are following our
            <a href="${{ web.page.contribute.url }}$">Change Request Guidelines</a> to verify that:
          </p>

          - <p align="justify">Your request is for a backward-incompatible change, and not a new feature, improvement, or bug fix.</p>
          - <p align="justify">The request is not implemented in the latest version of the release, and has not yet been filed.</p>
    custom_pkg_api:
      pkg_name: ${{ pypkg_main.name }}$
      pkg_entry_name: 'API'
      pkg_entry_description: 'Python application programming interface'
      python_api_names: ${{ project.python_api_names }}$
    custom_pkg_cli:
      pkg_name: ${{ pypkg_main.name }}$
      pkg_entry_name: 'CLI'
      pkg_entry_description: 'command-line interface'
      cli_names: ${{ project.cli_names }}$
    custom_pkg_gui:
      pkg_name: ${{ pypkg_main.name }}$
      pkg_entry_name: 'GUI'
      pkg_entry_description: 'graphical user interface'
      gui_names: ${{ project.gui_names }}$
    custom_test_api:
      pkg_name: ${{ pypkg_test.name }}$
      pkg_entry_name: 'API'
      pkg_entry_description: 'Python application programming interface'
      python_api_names: ${{ project.test_python_api_names }}$
    custom_test_cli:
      pkg_name: ${{ pypkg_test.name }}$
      pkg_entry_name: 'CLI'
      pkg_entry_description: 'command-line interface'
      cli_names: ${{ project.test_cli_names }}$
    custom_test_gui:
      pkg_name: ${{ pypkg_test.name }}$
      pkg_entry_name: 'GUI'
      pkg_entry_description: 'graphical user interface'
      gui_names: ${{ project.test_gui_names }}$
  protocol:
    config:
      default:
        pr_title: '{{ data.summary }}'
    template:
      body:
        - |
          {%- for label in form.id_labels + form.labels -%}
          {{
            mdit.element.badge(
              service="static",
              label=label.prefix,
              args={"message": label.suffix if label.prefix else label.name},
              style=ccc.theme.badge.style,
              color=label.color,
              label_color=ccc.theme.badge.color.grey,
              height=ccc.theme.badge.height,
            ).source()
          }}{{ "&nbsp;" * ccc.theme.badge.separator }}
          {%- endfor -%}
          {%- set versions = labels["version"] | map(attribute='suffix') | join(' | ') -%}
          {{
            mdit.element.badge(
              service="static",
              label=labels["version"][0].prefix,
              args={"message": versions},
              style=ccc.theme.badge.style,
              color=labels["version"][0].color,
              label_color=ccc.theme.badge.color.grey,
              height=ccc.theme.badge.height,
            ).source()
          }}
      sections:
        - heading: Status
          body:
            - class: badges
              style: ${{ theme.badge.style }}$
              height: ${{ theme.badge.height }}$
              label_color: ${{ theme.badge.color.grey }}$
              separator: ${{ theme.badge.separator }}$
              args:
                user: ${{ repo.owner }}$
                repo: ${{ repo.name }}$
                kind: issues
                number: '{{ issue.number }}'
              items:
                - service: static
                  label: State
                  args:
                    message: '{{ issue.state }}'
                  color: >-
                    {{ ccc.theme.badge.color.green if issue.state == "open" else ccc.theme.badge.color.red }}
                - service: static
                  label: Last Status
                  args:
                    message: '{{ status_label.suffix }}'
                  title: '{{ status_label.description }}'
                  color: >-
                    {{ status_label.color if status_label.color is defined else ccc.label.status.color }}
                - service: github
                  endpoint: issue_details
                  label: Last Update
                  args:
                    property: last-update
                - service: github
                  endpoint: issue_details
                  label: Comments
                  args:
                    property: comments
            - |
              {%- for id in ["triage", "planning", "requirement_analysis", "design"] -%}
              - [{{ "X" if status_label.id > id else " " }}] {{ id.replace("_", " ").title() }}
              {% endfor -%}
              {%- if pull_requests %}
              The implementation, testing, and deployment are tracked in the following PRs:
              {% for pull in pull_requests -%}
              - [{{ "X" if pull.merged else " " }}] #{{ pull.number }} (branch: [`{{ pull.head.name }}`]({{ pull.head.url.homepage }}))
              {% endfor -%}
              {%- endif -%}
        - heading: User Requirements Document (URD)
          body:
            - class: badges
              style: ${{ theme.badge.style }}$
              height: ${{ theme.badge.height }}$
              label_color: ${{ theme.badge.color.grey }}$
              separator: ${{ theme.badge.separator }}$
              args:
                user: ${{ repo.owner }}$
                repo: ${{ repo.name }}$
                kind: issues
                number: '{{ issue.number }}'
              items:
                - service: static
                  label: Issue Type
                  args:
                    message: '{{ form.name }}'
                  title: '{{ form.description }}'
                  color: ${{ theme.badge.color.blue }}$
                - service: github
                  endpoint: issue_details
                  label: Submitted
                  args:
                    property: age
                  color: ${{ theme.badge.color.blue }}$
                - service: static
                  label: Submitted By
                  args:
                    message: '{{ issue.user.name.full }}'
                  link: '{{ issue.user.github.url }}'
                  color: ${{ theme.badge.color.blue }}$
            - |
              ### Summary

              {% if input.endpoint -%}
              {{
                mdit.element.badge(
                  service="static",
                  label="Endpoint",
                  args={"message": input.entrypoint + "." + input.endpoint},
                  style=ccc.theme.badge.style,
                  color=ccc.theme.badge.color.blue,
                  label_color=ccc.theme.badge.color.grey,
                  height=ccc.theme.badge.height,
                ).source()
              }}{{ "&nbsp;" * ccc.theme.badge.separator }}
              {%- elif input.entrypoint -%}
              {{
                mdit.element.badge(
                  service="static",
                  label="Endpoint",
                  args={"message": input.entrypoint},
                  style=ccc.theme.badge.style,
                  color=ccc.theme.badge.color.blue,
                  label_color=ccc.theme.badge.color.grey,
                  height=ccc.theme.badge.height,
                ).source()
              }}{{ "&nbsp;" * ccc.theme.badge.separator }}
              {%- endif -%}
              {%- if input.url %}
              {{
                mdit.element.badge(
                  service="static",
                  label="URL",
                  args={"message": input.url},
                  style=ccc.theme.badge.style,
                  color=ccc.theme.badge.color.blue,
                  label_color=ccc.theme.badge.color.grey,
                  height=ccc.theme.badge.height,
                  link=input.url,
                ).source()
              }}{{ "&nbsp;" * ccc.theme.badge.separator }}
              {%- endif %}
              {%- if input.jsonpath %}
              {{
                mdit.element.badge(
                  service="static",
                  label="JSON Path",
                  args={"message": input.jsonpath},
                  style=ccc.theme.badge.style,
                  color=ccc.theme.badge.color.blue,
                  label_color=ccc.theme.badge.color.grey,
                  height=ccc.theme.badge.height,
                  link=input.url,
                ).source()
              }}{{ "&nbsp;" * ccc.theme.badge.separator }}
              {%- endif %}

              {{ input.summary }}

              {% if input.proposal -%}
              ### Proposal

              {{ input.proposal }}
              {%- endif %}

              {% if input.test_case -%}
              ### Test Case

              ```python
              {{ input.test_case }}
              ```
              {%- endif %}

              {% if input.mre -%}
              ### Minimal Reproducible Example

              {{ input.mre }}
              {%- endif %}

              {% if input.stderr -%}
              ### Output Log

              ```bash
              {{ input.stderr }}
              ```
              {%- endif %}

              {% if input.environment -%}
              ### Test Environment

              {%- set os_names = input.os | join(' | ') -%}
              {%- set py_vers = input.python_versions | join(' | ') -%}
              {{
                mdit.element.badges(
                  service="static",
                  style=ccc.theme.badge.style,
                  color=ccc.theme.badge.color.red,
                  label_color=ccc.theme.badge.color.grey,
                  height=ccc.theme.badge.height,
                  items=[
                    {
                      "label": "⚙️ Operating Systems",
                      "args": {"message": os_names},
                    },
                    {
                      "label": "Python Versions",
                      "args": {"message": py_vers},
                      "logo": ccc.web.path.source + "_media/logo_ext/python.svg",
                      "logo_type": "file",
                      "logo_media_type": "svg+xml",
                    },
                    {
                      "label": ccc.theme.icon.pkg + " Package Manager",
                      "args": {"message": input.package_manager},
                    },
                  ]
                )
              }}

              <details><summary><b>Environment</b></summary>

              ```yaml
              {{ input.environment }}
              ```

              </details>
              {%- endif %}
        - heading: Triage
          body: |
            {{ data.triage }}
        - heading: Plan
          body: |
            {{ data.summary }}

            {{ data.description }}
        - heading: Software Requirements Specification (SRS)
          body: |
            {{ data.srs }}
        - heading: Timeline
          body: |
            <div align="center">

            {{ data.timeline }}

            </div>

            {{ config }}

            {{ inputs }}
    data:
      summary:
        value: "\n\n**TBD**\n\n"
        changelog: true
      description:
        value: "\n\n\n"
        changelog: true
      triage:
        value: "\n\n**TBD**\n\n"
      plan:
        value: "\n\n**TBD**\n\n"
      srs:
        value: "\n\n**TBD**\n\n"
      timeline:
        value: >-

          |    Date    |   Time   |              Actor               |                      Description                      |

          | ---------- | -------- | -------------------------------- | ----------------------------------------------------- |
        template: |
          {%- macro make_entry(actor, description) -%}
            | {{ now.strftime("%Y.%m.%d") }} | {{ now.strftime("%H:%M:%S") }} | {{ "{:<32}".format(actor) }} | {{ "{:<53}".format(description) }} |
          {%- endmacro -%}

          {%- macro make_description() -%}
            {%- if action == "assigned" -%}
              {%- if event == "issues" -%}
                Issue assigned to {{ assignee.md_name }}.
              {%- elif event == "pull_request" -%}
                Pull request assigned to {{ assignee.md_name }}.
              {%- endif -%}
            {%- elif action == "unassigned" -%}
              {%- if event == "issues" -%}
                Issue unassigned from {{ assignee.md_name }}.
              {%- elif event == "pull_request" -%}
                Pull request unassigned from {{ assignee.md_name }}.
              {%- endif -%}
            {%- elif action == "review_requested" -%}
              Review assigned to {{ requested_reviewer.md_name }}.
            {%- elif action == "review_request_removed" -%}
              Review unassigned from {{ requested_reviewer.md_name }}.
            {%- elif action == "synchronize" -%}
              New commits pushed to [{{ pull_request.head.name }}]({{ pull_request.head.url.homepage }}) (CI [{{ context.run_id }}]({{ context.run_url }})).
            {%- elif action == "labeled" -%}
              {%- set category = label.category -%}
              {%- if category == "type" -%}
                  Type set to `{{ label.suffix }}`.
              {%- elif category == "scope" -%}
                  Scope set to `{{ label.suffix }}`.
              {%- elif category == "version" -%}
                    Target version set to `{{ label.suffix }}`.
              {%- elif category == "branch" -%}
                    Target branch set to `{{ label.suffix }}`.
              {%- elif category == "status" -%}
                {%- set status = label.id or label.id -%}
                {%- if status == "triage" -%}
                  Entered the triage phase.
                {%- elif status == "rejected" -%}
                  Rejected and closed.
                {%- elif status == "duplicate" -%}
                  Marked as duplicate and closed.
                {%- elif status == "invalid" -%}
                  Marked as invalid and closed.
                {%- elif status == "planning" -%}
                  Entered the planning phase.
                {%- elif status == "requirement_analysis" -%}
                  Entered the requirement analysis phase.
                {%- elif status == "design" -%}
                  Entered the design phase.
                {%- elif status == "implementation" -%}
                  Entered the implementation phase.
                {%- elif status == "testing" -%}
                  Entered the testing phase.
                {%- elif status == "deploy_alpha" -%}
                  Deployed as alpha release.
                {%- elif status == "deploy_beta" -%}
                  Deployed as beta release.
                {%- elif status == "deploy_rc" -%}
                  Deployed as release candidate.
                {%- elif status == "deploy_final" -%}
                  Deployed as final release.
                {%- else -%}
                  Status changed to {{ status }}.
                {%- endif -%}
              {%- endif -%}
            {%- elif action == "opened" -%}
              {%- if event == "issues" -%}
                Issue ticket #{{ issue.number }} submitted by {{ issue.user.md_name }}.
              {%- elif event == "pull_request" -%}
                Pull request #{{ pull_request.number }} opened from branch [{{ pull_request.head.name }}]({{ pull_request.head.url.homepage }}) to branch [{{ pull_request.base.name }}]({{ pull_request.base.url.homepage }}) by {{ pull_request.user.md_name }}.
              {%- endif -%}
            {%- endif -%}
          {%- endmacro -%}
          {%- set description = make_description() -%}
          {{ "\n" ~ make_entry(sender.md_name, description) if description else "" -}}
  forms:
    # Package
    - id: pkg_api_fix
      id_labels:
        - [ type, fix ]
        - [ scope, pkg ]
        - [ component, api ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.python_api_names")) }}#'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_api }}$${{ issue.__data__.title_bug }}$
      description: ${{ issue.__temp__.description_bug }}$
      __data__: ${{ issue.__data__.custom_pkg_api }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_bug }}$
      body: ${{ issue.__temp__.body_fix_api }}$
    - id: pkg_cli_fix
      id_labels:
        - [ type, fix ]
        - [ scope, pkg ]
        - [ component, cli ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.cli_names")) }}#'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_cli }}$${{ issue.__data__.title_bug }}$
      description: ${{ issue.__temp__.description_bug }}$
      __data__: ${{ issue.__data__.custom_pkg_cli }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_bug }}$
      body: ${{ issue.__temp__.body_fix_cli }}$
    - id: pkg_gui_fix
      id_labels:
        - [ type, fix ]
        - [ scope, pkg ]
        - [ component, gui ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.gui_names")) }}#'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_gui }}$${{ issue.__data__.title_bug }}$
      description: ${{ issue.__temp__.description_bug }}$
      __data__: ${{ issue.__data__.custom_pkg_gui }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_bug }}$
      body: ${{ issue.__temp__.body_fix_gui }}$
    - id: pkg_build_fix
      id_labels:
        - [ type, fix ]
        - [ scope, pkg ]
        - [ component, build ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_setup }}$${{ issue.__data__.title_bug }}$
      description: Report problems in downloading, installation, or initialization of ${{ pypkg_main.name }}$.
      __temp__:
        purpose: >-
          reporting a <b>non-security-related bug in ${{ name }}$'s setup process</b>,
          i.e. an unexpected behavior that occurs during
          the download, installation, or initialization of the application.
      body: ${{ issue.__temp__.body_fix_setup }}$
    - id: pkg_api_feat
      id_labels:
        - [ type, feat ]
        - [ scope, pkg ]
        - [ component, api ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.python_api_names")) }}#'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_api }}$${{ issue.__data__.title_feat }}$
      description: ${{ issue.__temp__.description_feat }}$
      __data__: ${{ issue.__data__.custom_pkg_api }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_feat }}$
      body: ${{ issue.__temp__.body_feat_api }}$
    - id: pkg_cli_feat
      id_labels:
        - [ type, feat ]
        - [ scope, pkg ]
        - [ component, cli ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.cli_names")) }}#'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_cli }}$${{ issue.__data__.title_feat }}$
      description: ${{ issue.__temp__.description_feat }}$
      __data__: ${{ issue.__data__.custom_pkg_cli }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_feat }}$
      body: ${{ issue.__temp__.body_feat_cli }}$
    - id: pkg_gui_feat
      id_labels:
        - [ type, feat ]
        - [ scope, pkg ]
        - [ component, gui ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.gui_names")) }}#'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_gui }}$${{ issue.__data__.title_feat }}$
      description: ${{ issue.__temp__.description_feat }}$
      __data__: ${{ issue.__data__.custom_pkg_gui }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_feat }}$
      body: ${{ issue.__temp__.body_feat_gui }}$
    - id: pkg_api_change
      id_labels:
        - [ type, change ]
        - [ scope, pkg ]
        - [ component, api ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.python_api_names")) }}#'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_api }}$${{ issue.__data__.title_breaking }}$
      description: ${{ issue.__temp__.description_break }}$
      __data__: ${{ issue.__data__.custom_pkg_api }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_break }}$
      body: ${{ issue.__temp__.body_change_api }}$
    - id: pkg_cli_change
      id_labels:
        - [ type, change ]
        - [ scope, pkg ]
        - [ component, cli ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.cli_names")) }}#'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_cli }}$${{ issue.__data__.title_breaking }}$
      description: ${{ issue.__temp__.description_break }}$
      __data__: ${{ issue.__data__.custom_pkg_cli }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_break }}$
      body: ${{ issue.__temp__.body_change_cli }}$
    - id: pkg_gui_change
      id_labels:
        - [ type, change ]
        - [ scope, pkg ]
        - [ component, gui ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.gui_names")) }}#'
      name: ${{ issue.__data__.title_pkg }}$${{ issue.__data__.title_gui }}$${{ issue.__data__.title_breaking }}$
      description: ${{ issue.__temp__.description_break }}$
      __data__: ${{ issue.__data__.custom_pkg_gui }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_break }}$
      body: ${{ issue.__temp__.body_change_gui }}$
    # Documentation
    - id: docs_fix
      id_labels:
        - [ type, fix ]
        - [ scope, docs ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      name: ${{ issue.__data__.title_doc }}$${{ issue.__data__.title_bug }}$
      description: >-
        Report problems and errors
        in ${{ name }}$'s website and documentation materials.
      __temp__:
        purpose: >-
          reporting a <b>non-security-related bug in
          ${{ name }}$'s website and documentation materials</b>,
          e.g. misspellings and other mechanical errors,
          broken links and images, layout issues, etc.
      body: ${{ issue.__temp__.body_fix_doc }}$
    - id: docs_feat
      id_labels:
        - [ type, feat ]
        - [ scope, docs ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      name: ${{ issue.__data__.title_doc }}$${{ issue.__data__.title_feat }}$
      description: >-
        Request backward-compatible improvements and new content
        in ${{ name }}$'s website and documentation materials.
      __temp__:
        purpose: >-
          requesting a <b>backward-compatible improvement</b> or <b>new content</b> in
          ${{ name }}$'s website and documentation materials</b>,
          i.e. a change that is not a bug fix
          and does not break existing references or functionalities.
      body: ${{ issue.__temp__.body_feat_doc }}$
    - id: docs_change
      id_labels:
        - [ type, change ]
        - [ scope, docs ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      name: ${{ issue.__data__.title_doc }}$${{ issue.__data__.title_breaking }}$
      description: >-
        Request backward-incompatible changes
        to ${{ name }}$'s website and documentation materials.
      __temp__:
        purpose: >-
          requesting a <b>backward-incompatible change</b> in
          ${{ name }}$'s website and documentation materials</b>,
          i.e. a change that breaks existing references or functionalities.
      body: ${{ issue.__temp__.body_change_doc }}$
    # Test Suite
    - id: test_api_fix
      id_labels:
        - [ type, fix ]
        - [ scope, test ]
        - [ scope, test-api ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.test_python_api_names")) }}#'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_api }}$${{ issue.__data__.title_bug }}$
      description: ${{ issue.__temp__.description_bug }}$
      __data__: ${{ issue.__data__.custom_test_api }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_bug }}$
      body: ${{ issue.__temp__.body_fix_api }}$
    - id: test_cli_fix
      id_labels:
        - [ type, fix ]
        - [ scope, test ]
        - [ component, cli ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.test_cli_names")) }}#'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_cli }}$${{ issue.__data__.title_bug }}$
      description: ${{ issue.__temp__.description_bug }}$
      __data__: ${{ issue.__data__.custom_test_cli }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_bug }}$
      body: ${{ issue.__temp__.body_fix_cli }}$
    - id: test_gui_fix
      id_labels:
        - [ type, fix ]
        - [ scope, test ]
        - [ component, gui ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.test_gui_names")) }}#'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_gui }}$${{ issue.__data__.title_bug }}$
      description: ${{ issue.__temp__.description_bug }}$
      __data__: ${{ issue.__data__.custom_test_gui }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_bug }}$
      body: ${{ issue.__temp__.body_fix_gui }}$
    - id: test_build_fix
      id_labels:
        - [ type, fix ]
        - [ scope, test ]
        - [ component, build ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_setup }}$${{ issue.__data__.title_bug }}$
      description: Report problems in downloading, installation, or initialization of ${{ pypkg_test.name }}$.
      __temp__:
        purpose: >-
          reporting a <b>non-security-related bug in ${{ name }}$'s setup process</b>,
          i.e. an unexpected behavior that occurs during
          the download, installation, or initialization of the application.
      body: ${{ issue.__temp__.body_fix_setup }}$
    - id: test_api_feat
      id_labels:
        - [ type, feat ]
        - [ scope, test ]
        - [ component, api ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.test_python_api_names")) }}#'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_api }}$${{ issue.__data__.title_feat }}$
      description: ${{ issue.__temp__.description_feat }}$
      __data__: ${{ issue.__data__.custom_test_api }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_feat }}$
      body: ${{ issue.__temp__.body_feat_api }}$
    - id: test_cli_feat
      id_labels:
        - [ type, feat ]
        - [ scope, test ]
        - [ component, cli ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.test_cli_names")) }}#'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_cli }}$${{ issue.__data__.title_feat }}$
      description: ${{ issue.__temp__.description_feat }}$
      __data__: ${{ issue.__data__.custom_test_cli }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_feat }}$
      body: ${{ issue.__temp__.body_feat_cli }}$
    - id: test_gui_feat
      id_labels:
        - [ type, feat ]
        - [ scope, test ]
        - [ component, gui ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.test_gui_names")) }}#'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_gui }}$${{ issue.__data__.title_feat }}$
      description: ${{ issue.__temp__.description_feat }}$
      __data__: ${{ issue.__data__.custom_test_gui }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_feat }}$
      body: ${{ issue.__temp__.body_feat_gui }}$
    - id: test_api_change
      id_labels:
        - [ type, change ]
        - [ scope, test ]
        - [ component, api ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.test_python_api_names")) }}#'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_api }}$${{ issue.__data__.title_breaking }}$
      description: ${{ issue.__temp__.description_break }}$
      __data__: ${{ issue.__data__.custom_test_api }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_break }}$
      body: ${{ issue.__temp__.body_change_api }}$
    - id: test_cli_change
      id_labels:
        - [ type, change ]
        - [ scope, test ]
        - [ component, cli ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.test_cli_names")) }}#'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_cli }}$${{ issue.__data__.title_breaking }}$
      description: ${{ issue.__temp__.description_break }}$
      __data__: ${{ issue.__data__.custom_test_cli }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_break }}$
      body: ${{ issue.__temp__.body_change_cli }}$
    - id: test_gui_change
      id_labels:
        - [ type, change ]
        - [ scope, test ]
        - [ component, gui ]
      labels:
        - '*{{ issue.__temp__.labels }}*'
      active: '#{{ return bool(get("project.test_gui_names")) }}#'
      name: ${{ issue.__data__.title_test }}$${{ issue.__data__.title_gui }}$${{ issue.__data__.title_breaking }}$
      description: ${{ issue.__temp__.description_break }}$
      __data__: ${{ issue.__data__.custom_test_gui }}$
      __temp__:
        purpose: ${{ issue.__temp__.purpose_break }}$
      body: ${{ issue.__temp__.body_change_gui }}$
    # Refactoring
    - id: refactor
      id_labels:
        - [ type, refactor ]
      labels:
        - [ scope, repo ]
        - '*{{ issue.__temp__.labels }}*'
      name: ' ${{ theme.icon.refactor }}$ Refactoring Request'
      description: >-
        Request code formatting and refactoring in ${{ name }}$'s source files.
      __temp__:
        purpose: >-
          requesting a <b>code formatting and refactoring</b> in ${{ name }}$'s source files,
          i.e. a change that improves the code quality, readability, and maintainability,
          without affecting the code's runtime behavior.
      body: ${{ issue.__temp__.body_refactor }}$
    # Internal
    - id: config
      id_labels:
        - [ type, config ]
      labels:
        - [ scope, repo ]
        - '*{{ issue.__temp__.labels }}*'
      name: ' ${{ theme.icon.config }}$ Configuration Request'
      description: >-
        Request a change in ${{ name }}$'s metadata and settings.
      __temp__:
        purpose: >-
          requesting a <b>reconfiguration</b> in ${{ name }}$'s metadata and settings,
          such as project information and other options that do not fall under
          other issue categories.
      body: ${{ issue.__temp__.body_config }}$
    - id: ci
      id_labels:
        - [ type, ci ]
      labels:
        - [ scope, repo ]
        - '*{{ issue.__temp__.labels }}*'
      name: ' ${{ theme.icon.ci }}$ DevOps Request'
      description: >-
        Request a change in ${{ name }}$'s automated workflows and development environment.
      __temp__:
        purpose: >-
          requesting a <b>change in ${{ name }}$'s automated workflows and development environment</b>,
          such as CI/CD pipelines, testing, and deployment configurations.
      body: ${{ issue.__temp__.body_config }}$
    - id: chore
      id_labels:
        - [ type, chore ]
      labels:
        - [ scope, repo ]
        - '*{{ issue.__temp__.labels }}*'
      name: ' ${{ theme.icon.chore }}$ Maintenance Request'
      description: Request a maintenance job in ${{ name }}$.
      __temp__:
        purpose: >-
          requesting a <b>maintenance job</b> in ${{ name }}$,
          such as file cleanup and other tasks that
          do not fall under other issue categories.
      body: ${{ issue.__temp__.body_maintenance }}$
pull:
  protocol:
    template:
      body:
        - - class: badge
            label: Resolves
            service: static
            args:
              message: '#{{ issue.number }}'
            link: '{{ issue.html_url }}'
            style: ${{ theme.badge.style }}$
            height: ${{ theme.badge.height }}$
            label_color: ${{ theme.badge.color.grey }}$
            color: ${{ theme.badge.color.blue }}$
          - '{{ "&nbsp;" * ccc.theme.badge.separator }}'
          - |
            {%- for label in form.id_labels + form.labels -%}
            {{
              mdit.element.badge(
                service="static",
                label=label.prefix,
                args={"message": label.suffix if label.prefix else label.name},
                style=ccc.theme.badge.style,
                color=label.color,
                label_color=ccc.theme.badge.color.grey,
                height=ccc.theme.badge.height,
              ).source()
            }}{{ "&nbsp;" * ccc.theme.badge.separator }}
            {%- endfor -%}
            {%- set versions = labels["version"] | map(attribute='suffix') | join(' | ') -%}
            {{
              mdit.element.badge(
                service="static",
                label=labels["version"][0].prefix,
                args={"message": versions},
                style=ccc.theme.badge.style,
                color=labels["version"][0].color,
                label_color=ccc.theme.badge.color.grey,
                height=ccc.theme.badge.height,
              ).source()
            }}
      sections:
        - heading: Status
          body:
            - class: badges
              style: ${{ theme.badge.style }}$
              height: ${{ theme.badge.height }}$
              label_color: ${{ theme.badge.color.grey }}$
              separator: ${{ theme.badge.separator }}$
              args:
                user: ${{ repo.owner }}$
                repo: ${{ repo.name }}$
                kind: pulls
                number: '{{ pull_request.number }}'
              items:
                - service: static
                  label: State
                  args:
                    message: '{{ pull_request.state }}'
                  color: >-
                    {{ ccc.theme.badge.color.green if pull_request.state == "open" else ccc.theme.badge.color.red }}
                - service: static
                  label: Last Status
                  args:
                    message: '{{ status_label.suffix }}'
                  title: '{{ status_label.description }}'
                  color: >-
                    {{ status_label.color if status_label.color is defined else ccc.label.status.color }}
                - service: github
                  endpoint: issue_details
                  label: Last Update
                  args:
                    property: last-update
                - service: github
                  endpoint: issue_details
                  label: Comments
                  args:
                    property: comments
        - heading: Software Design Document (SDD)
          body: |
            {{ data.sdd }}
        - heading: Implementation
          body:
            - '{{ tasklist }}'
        - heading: Testing
          body:
            - - |
                {% if ccc.web.readthedocs is defined -%}
                {% set config = ccc.web.readthedocs %}
                {% set domain = "org.readthedocs.build" if config.platform == "community" else "com.readthedocs.build" %}
                {% set url = "https://" ~ config.name ~ "--" ~ pull_request.number ~ "." ~ domain ~ "/" %}
                {% if config.version_scheme.translation %}
                  {% set url = url ~ config.language ~ "/" ~ pull_request.number ~ "/" %}
                {% endif %}
                {{
                  mdit.element.badge(
                    service="static",
                    label="Website Preview",
                    args={"message": "Read The Docs"},
                    style=ccc.theme.badge.style,
                    color=ccc.theme.badge.color.blue,
                    label_color=ccc.theme.badge.color.grey,
                    height=ccc.theme.badge.height,
                    link=url,
                  ).source()
                }}{{ "&nbsp;" * ccc.theme.badge.separator }}
                {%- endif -%}
              # ReadTheDocs website preview badge
              # Note: Enable "Preview Documentation from Pull Requests" in ReadtheDocs project at https://docs.readthedocs.io/en/latest/pull-requests.html
              # Refs: https://github.com/readthedocs/actions/blob/v1/preview/scripts/edit-description.js
              #       https://docs.readthedocs.io/en/latest/guides/pull-requests.html
        - heading: Deployment
          body:
            - '{{ data.deployment }}'
        - heading: Timeline
          body: |
            <div align="center">

            {{ data.timeline }}

            </div>

            {{ config }}
    data:
      summary:
        value: '{{ pr_title }}'
      description:
        value: "\n\n**TBD**\n\n"
      sdd:
        value: "\n\n**TBD**\n\n"
      testing:
        value: "\n\n**TBD**\n\n"
      deployment:
        value: "\n\n**TBD**\n\n"
      timeline: ${{ issue.protocol.data.timeline }}$
file_codeowners:
  name: CODEOWNERS
  summary: >-
    [`CODEOWNERS`](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners) file.
  description: |
    If present, a CODEOWNERS file is automatically maintained at the given [`path`](#ccc-code-owners-path),
    using file ownership information defined for team members.
    For each pull request, GitHub will then automatically add the owners of each
    modified file in that pull request as reviewers.
    Note that you can also assign issue-form-specific review tasks to each role
    (cf. [`ccc.role.*.assignment.review`](#ccc-role---assignment-review)).

    :::{admonition} Considerations
    :class: important

    - Code owners must have write permissions to the repository.
    - For code owners to be automatically requested for reviews, protection rules for
      [requiring pull request reviews](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches#require-pull-request-reviews-before-merging)
      must be enabled.
    :::
  path: .github/CODEOWNERS
  path_schema:
    description: |
      The file must be named `CODEOWNERS` (case-sensitive, without extension)
      and placed either in the `.github` directory, the `docs` directory,
      or the root of the repository.
    enum:
      - CODEOWNERS
      - .github/CODEOWNERS
      - docs/CODEOWNERS
    pattern: ^(?:|.github/|docs/)CODEOWNERS$
  type: txt
  content: >-
    #{{ return hook.file_codeowners() }}#
