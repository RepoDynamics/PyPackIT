# /etc/zsh/zshrc: system-wide .zshrc file for zsh(1).
#
# This file is sourced only for interactive shells. It
# should contain commands to set up aliases, functions,
# options, key bindings, etc.
#
# Global Order: zshenv, zprofile, zshrc, zlogin



# Source scripts
# ==============

if [ -f /etc/shellrc ]; then
    . /etc/shellrc
fi



# FROM '/etc/zsh/zshrc'
# =====================

# if `read` is used with no arguments and input is redirected from a file,
# Zsh uses READNULLCMD as the command to run on that file.
READNULLCMD=${PAGER:-/usr/bin/pager}

# An array to note missing features to ease diagnosis in case of problems.
typeset -ga debian_missing_features

if [[ -z "${DEBIAN_PREVENT_KEYBOARD_CHANGES-}" ]] && [[ "$TERM" != 'emacs' ]]; then
    typeset -A key
    key=(
        BackSpace  "${terminfo[kbs]}"
        Home       "${terminfo[khome]}"
        End        "${terminfo[kend]}"
        Insert     "${terminfo[kich1]}"
        Delete     "${terminfo[kdch1]}"
        Up         "${terminfo[kcuu1]}"
        Down       "${terminfo[kcud1]}"
        Left       "${terminfo[kcub1]}"
        Right      "${terminfo[kcuf1]}"
        PageUp     "${terminfo[kpp]}"
        PageDown   "${terminfo[knp]}"
    )

    function bind2maps () {
        local i sequence widget
        local -a maps

        while [[ "$1" != "--" ]]; do
            maps+=( "$1" )
            shift
        done
        shift

        sequence="${key[$1]}"
        widget="$2"

        [[ -z "$sequence" ]] && return 1

        for i in "${maps[@]}"; do
            bindkey -M "$i" "$sequence" "$widget"
        done
    }

    bind2maps emacs             -- BackSpace   backward-delete-char
    bind2maps       viins       -- BackSpace   vi-backward-delete-char
    bind2maps             vicmd -- BackSpace   vi-backward-char
    bind2maps emacs             -- Home        beginning-of-line
    bind2maps       viins vicmd -- Home        vi-beginning-of-line
    bind2maps emacs             -- End         end-of-line
    bind2maps       viins vicmd -- End         vi-end-of-line
    bind2maps emacs viins       -- Insert      overwrite-mode
    bind2maps             vicmd -- Insert      vi-insert
    bind2maps emacs             -- Delete      delete-char
    bind2maps       viins vicmd -- Delete      vi-delete-char
    bind2maps emacs viins vicmd -- Up          up-line-or-history
    bind2maps emacs viins vicmd -- Down        down-line-or-history
    bind2maps emacs             -- Left        backward-char
    bind2maps       viins vicmd -- Left        vi-backward-char
    bind2maps emacs             -- Right       forward-char
    bind2maps       viins vicmd -- Right       vi-forward-char

    # Make sure the terminal is in application mode, when zle is
    # active. Only then are the values from $terminfo valid.
    if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
        function zle-line-init () {
            emulate -L zsh
            printf '%s' ${terminfo[smkx]}
        }
        function zle-line-finish () {
            emulate -L zsh
            printf '%s' ${terminfo[rmkx]}
        }
        zle -N zle-line-init
        zle -N zle-line-finish
    else
        for i in {s,r}mkx; do
            (( ${+terminfo[$i]} )) || debian_missing_features+=($i)
        done
        unset i
    fi

    unfunction bind2maps

fi

# Completion
# ===========

# After `sudo`, seach for commands in the following directories.
zstyle ':completion:*:sudo:*' command-path \
    /usr/local/sbin \
    /usr/local/bin  \
    /usr/sbin       \
    /usr/bin        \
    /sbin           \
    /bin            \
    /usr/X11R6/bin

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# Initialize Zsh's completion system.
# If you don't want compinit called here, add `skip_global_compinit=1` in your $ZDOTDIR/.zshenv
if [[ -z "$skip_global_compinit" ]]; then
    autoload -Uz compinit
    compinit
fi


# Restore Zsh's real `run-help` behavior.
# ---------------------------------------
# Remove any existing alias for `run-help`.
(( ${+aliases[run-help]} )) && unalias run-help
# Load `run-help` from the system's fpath search paths.
autoload -Uz run-help


# History
# ========
setopt histignorealldups  # remove older duplicates
setopt sharehistory       # share history across sessions

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e

# Keep 1000 lines of history within the shell and save it to zsh_history:
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=/etc/zsh/zsh_history



# Oh My Zsh Settings
# ==================
# - https://github.com/ohmyzsh/ohmyzsh/wiki/Settings
# - https://github.com/ohmyzsh/ohmyzsh/tree/master/templates


# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi


# Main Settings
# -------------
export ZSH="/usr/local/oh-my-zsh"
ZSH_THEME="powerlevel10k/powerlevel10k"
plugins=(
    git
    github
    per-directory-history
    pip
    python
    z
    zsh-syntax-highlighting
)
ZSH_CUSTOM="$ZSH/custom"
ZSH_CACHE_DIR="$ZSH/cache"


# Update Settings
# ---------------
zstyle ':omz:update' mode disabled


# Completion Settings
# -------------------
ZSH_COMPDUMP="$ZSH_CACHE_DIR/.zcompdump"
COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
CASE_SENSITIVE="true"


# Library Settings
# ----------------
ENABLE_CORRECTION=true
HIST_STAMPS="yyyy-mm-dd"


# Source Oh My Zsh
# ----------------
source $ZSH/oh-my-zsh.sh


# Automatic Title Settings
# ------------------------
ZSH_THEME_TERM_TITLE_IDLE="%n@%m:%~"
ZSH_THEME_TERM_TAB_TITLE_IDLE="%15<..<%~%<<"


# Powerlevel10k Settings
# ----------------------
# To customize prompt, run `p10k configure` or edit ~/.config/zsh/.p10k.zsh.
[[ ! -f "/etc/zsh/p10k.zsh" ]] || source "/etc/zsh/p10k.zsh"





# Customizations

#  Activate pixi
eval "$(pixi completion -s zsh)"
